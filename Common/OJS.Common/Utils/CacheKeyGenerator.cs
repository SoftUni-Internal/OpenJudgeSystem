namespace OJS.Common.Utils;

using System.Collections.Generic;
using System.Globalization;
using System.Security.Cryptography;
using System.Text;

public static class CacheKeyGenerator
{
    /// <summary>
    /// Generates a unique hash key for a collection of primitive values.
    /// The order of the values is important. The same collection with different order will produce different key.
    /// Key is generated by concatenating the string representation of the values and hashing the result.
    /// </summary>
    /// <param name="values">The collection of primitive values for which to generate the key.</param>
    /// <typeparam name="T">The type of the values in the collection. Must be a struct.</typeparam>
    /// <returns>Unique SHA256 hash key for the collection of primitive values.</returns>
    public static string GenerateKeyForPrimitiveCollection<T>(IEnumerable<T> values)
        where T : struct
    {
        var concatenatedString = string.Join(",", values);

        var bytes = SHA256.HashData(Encoding.UTF8.GetBytes(concatenatedString));

        StringBuilder builder = new StringBuilder();
        foreach (var t in bytes)
        {
            builder.Append(t.ToString("x2", CultureInfo.InvariantCulture));
        }

        return builder.ToString();
    }
}