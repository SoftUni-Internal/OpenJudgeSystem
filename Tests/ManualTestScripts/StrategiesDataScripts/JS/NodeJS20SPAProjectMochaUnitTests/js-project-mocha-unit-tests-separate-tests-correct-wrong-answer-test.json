// 3 CorrectAnswer, 1 WrongAnswer
{
  "ExecutionType": "tests-execution",
  "ExecutionStrategy": "run-spa-and-execute-mocha-tests-separate-tests",
  "CompilerType": "None",
  "FileContent": "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\u003d",
  "Code": "",
  "TimeLimit": 300000,
  "MemoryLimit": 16777216,
  "ExecutionDetails": {
    "MaxPoints": 100,
    "CheckerType": "trim",
    "CheckerParameter": null,
    "Tests": [
      {
        "Id": 369619,
        "Input": "    it(\u0027Load profiles\u0027, async () \u003d\u003e {\r\n      const data \u003d mockData.profile;\r\n      const { get } \u003d await handle(endpoints.list);\r\n      get(data);\r\n\r\n      await page.goto(host);\r\n      await page.waitForSelector(\u0027.profile\u0027);\r\n\r\n      const post \u003d await page.$$eval(`.profile`, (t) \u003d\u003e\r\n        t.map((s) \u003d\u003e s.textContent)\r\n      );\r\n      expect(post.length).to.equal(data.length);\r\n    });",
        "Output": "It works!",
        "IsTrialTest": false,
        "OrderBy": 1
      },
      {
        "Id": 369620,
        "Input": "    it(\u0027Check profile name\u0027, async () \u003d\u003e {\r\n      const data \u003d mockData.profile;\r\n      const { get } \u003d await handle(endpoints.list);\r\n      get(data);\r\n\r\n      await page.goto(host);\r\n      await page.waitForSelector(\u0027.profile\u0027);\r\n\r\n      await page.click(\u0027input[value\u003d\"unlock\"]\u0027);\r\n      await page.click(\u0027text\u003dShow more\u0027);\r\n\r\n      const post \u003d await page.$$eval(`input[name\u003d\"user1Username\"]`, (t) \u003d\u003e\r\n        t.map((s) \u003d\u003e s.value)\r\n      );\r\n\r\n      expect(post[0]).to.equal(data[0].username);\r\n    });",
        "Output": "It works!",
        "IsTrialTest": false,
        "OrderBy": 2
      },
      {
        "Id": 369621,
        "Input": "   it(\u0027Check isLocked\u0027, async () \u003d\u003e {\r\n      const data \u003d mockData.profile;\r\n      const { get } \u003d await handle(endpoints.list);\r\n      get(data);\r\n\r\n      await page.goto(host);\r\n      await page.waitForSelector(\u0027.profile\u0027);\r\n\r\n      const post \u003d await page.$$eval(`input:checked`, (t) \u003d\u003e\r\n        t.map((s) \u003d\u003e s.value)\r\n      );\r\n      expect(post[0]).to.equal(\u0027lock\u0027);\r\n    });",
        "Output": "It works!",
        "IsTrialTest": false,
        "OrderBy": 3
      },
      {
        "Id": 369622,
        "Input": "    it(\u0027Check information when in unlock\u0027, async () \u003d\u003e {\r\n      const data \u003d mockData.profile;\r\n      const { get } \u003d await handle(endpoints.list);\r\n      get(data);\r\n\r\n      await page.goto(host);\r\n      await page.waitForSelector(\u0027.profile\u0027);\r\n\r\n      await page.click(\u0027input[value\u003d\"unlock\"]\u0027);\r\n      await page.click(\u0027text\u003dShow more\u0027);\r\n      const post \u003d await page.$$eval(`input[type\u003d\"email\"]`, (t) \u003d\u003e\r\n        t.map((s) \u003d\u003e s.value)\r\n      );\r\n      expect(post[0]).to.equal(data[0].email);\r\n      expect(post[1]).to.equal(`${data[0].age}`);\r\n    });",
        "Output": "It works!",
        "IsTrialTest": false,
        "OrderBy": 4
      }
    ],
    "TaskSkeleton": "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",
    "TaskSkeletonAsString": "const { chromium } \u003d require(\u0027playwright-chromium\u0027);\r\nconst { expect } \u003d require(\u0027chai\u0027);\r\n\r\nconst userApplicationHttpPort \u003d \u0027#userApplicationHttpPort#\u0027;\r\n\r\nconst host \u003d \u0027http://localhost:\u0027 + userApplicationHttpPort; // Application host (NOT service host - that can be anything)\r\n\r\nconst DEBUG \u003d false;\r\nconst slowMo \u003d 500;\r\n\r\nconst mockData \u003d {\r\n  profile: [\r\n    {\r\n      _id: \u00271001\u0027,\r\n      username: \u0027John\u0027,\r\n      email: \u0027john@users.bg\u0027,\r\n      age: 31,\r\n    },\r\n  ],\r\n};\r\n\r\nconst endpoints \u003d {\r\n  list: \u0027/jsonstore/advanced/profiles\u0027,\r\n};\r\n\r\nlet browser;\r\nlet context;\r\nlet page;\r\n\r\ndescribe(\u0027E2E tests\u0027, function () {\r\n  // Setup\r\n  this.timeout(DEBUG ? 120000 : 7000);\r\n  before(\r\n    async () \u003d\u003e\r\n      (browser \u003d await chromium.launch(\r\n        DEBUG ? { headless: false, slowMo } : {}\r\n      ))\r\n  );\r\n  after(async () \u003d\u003e await browser.close());\r\n  beforeEach(async () \u003d\u003e {\r\n    context \u003d await browser.newContext();\r\n    setupContext(context);\r\n    page \u003d await context.newPage();\r\n  });\r\n  afterEach(async () \u003d\u003e {\r\n    await page.close();\r\n    await context.close();\r\n  });\r\n\r\n  #mochaTests#\r\n});\r\n\r\nasync function setupContext(context) {\r\n  // Catalog and Details\r\n  await handleContext(context, endpoints.list, { get: mockData.profile });\r\n  await handleContext(context, endpoints.info(\u00271001\u0027), {\r\n    get: mockData.details[0],\r\n  });\r\n  await handleContext(context, endpoints.info(\u00271002\u0027), {\r\n    get: mockData.details[1],\r\n  });\r\n\r\n  await handleContext(context, endpoints.details(\u00271001\u0027), {\r\n    get: mockData.catalog[0],\r\n  });\r\n  await handleContext(context, endpoints.details(\u00271002\u0027), {\r\n    get: mockData.catalog[1],\r\n  });\r\n  await handleContext(context, endpoints.details(\u00271003\u0027), {\r\n    get: mockData.catalog[2],\r\n  });\r\n\r\n  await handleContext(\r\n    endpoints.profile(\u00270001\u0027),\r\n    { get: mockData.catalog.slice(0, 2) },\r\n    context\r\n  );\r\n\r\n  await handleContext(endpoints.total(\u00271001\u0027), { get: 6 }, context);\r\n  await handleContext(endpoints.total(\u00271002\u0027), { get: 4 }, context);\r\n  await handleContext(endpoints.total(\u00271003\u0027), { get: 7 }, context);\r\n\r\n  await handleContext(endpoints.own(\u00271001\u0027, \u00270001\u0027), { get: 1 }, context);\r\n  await handleContext(endpoints.own(\u00271002\u0027, \u00270001\u0027), { get: 0 }, context);\r\n  await handleContext(endpoints.own(\u00271003\u0027, \u00270001\u0027), { get: 0 }, context);\r\n\r\n  // Block external calls\r\n  await context.route(\r\n    (url) \u003d\u003e url.href.slice(0, host.length) !\u003d host,\r\n    (route) \u003d\u003e {\r\n      if (DEBUG) {\r\n        console.log(\u0027Preventing external call to \u0027 + route.request().url());\r\n      }\r\n      route.abort();\r\n    }\r\n  );\r\n}\r\n\r\nfunction handle(match, handlers) {\r\n  return handleRaw.call(page, match, handlers);\r\n}\r\n\r\nfunction handleContext(context, match, handlers) {\r\n  return handleRaw.call(context, match, handlers);\r\n}\r\n\r\nasync function handleRaw(match, handlers) {\r\n  const methodHandlers \u003d {};\r\n  const result \u003d {\r\n    get: (returns, options) \u003d\u003e request(\u0027GET\u0027, returns, options),\r\n    get2: (returns, options) \u003d\u003e request(\u0027GET\u0027, returns, options),\r\n    post: (returns, options) \u003d\u003e request(\u0027POST\u0027, returns, options),\r\n    put: (returns, options) \u003d\u003e request(\u0027PUT\u0027, returns, options),\r\n    patch: (returns, options) \u003d\u003e request(\u0027PATCH\u0027, returns, options),\r\n    del: (returns, options) \u003d\u003e request(\u0027DELETE\u0027, returns, options),\r\n    delete: (returns, options) \u003d\u003e request(\u0027DELETE\u0027, returns, options),\r\n  };\r\n\r\n  const context \u003d this;\r\n\r\n  await context.route(urlPredicate, (route, request) \u003d\u003e {\r\n    if (DEBUG) {\r\n      console.log(\u0027\u003e\u003e\u003e\u0027, request.method(), request.url());\r\n    }\r\n\r\n    const handler \u003d methodHandlers[request.method().toLowerCase()];\r\n    if (handler \u003d\u003d undefined) {\r\n      route.continue();\r\n    } else {\r\n      handler(route, request);\r\n    }\r\n  });\r\n\r\n  if (handlers) {\r\n    for (let method in handlers) {\r\n      if (typeof handlers[method] \u003d\u003d \u0027function\u0027) {\r\n        handlers[method](result[method]);\r\n      } else {\r\n        result[method](handlers[method]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return result;\r\n\r\n  function request(method, returns, options) {\r\n    let handled \u003d false;\r\n\r\n    methodHandlers[method.toLowerCase()] \u003d (route, request) \u003d\u003e {\r\n      handled \u003d true;\r\n      route.fulfill(respond(returns, options));\r\n    };\r\n\r\n    return {\r\n      onRequest: () \u003d\u003e context.waitForRequest(urlPredicate),\r\n      onResponse: () \u003d\u003e context.waitForResponse(urlPredicate),\r\n      isHandled: () \u003d\u003e handled,\r\n    };\r\n  }\r\n\r\n  function urlPredicate(current) {\r\n    if (current instanceof URL) {\r\n      return current.href.toLowerCase().includes(match.toLowerCase());\r\n    } else {\r\n      return current.url().toLowerCase().includes(match.toLowerCase());\r\n    }\r\n  }\r\n}\r\n\r\nfunction respond(data, options \u003d {}) {\r\n  options \u003d Object.assign(\r\n    {\r\n      json: true,\r\n      status: 200,\r\n    },\r\n    options\r\n  );\r\n\r\n  const headers \u003d {\r\n    \u0027Access-Control-Allow-Origin\u0027: \u0027*\u0027,\r\n  };\r\n  if (options.json) {\r\n    headers[\u0027Content-Type\u0027] \u003d \u0027application/json\u0027;\r\n    data \u003d JSON.stringify(data);\r\n  }\r\n\r\n  return {\r\n    status: options.status,\r\n    headers,\r\n    body: data,\r\n  };\r\n}\r\n"
  },
  "ExecutionOptions": {
    "KeepDetails": true,
    "EscapeTests": false,
    "EscapeLineEndings": true
  },
  "WithExceptionStackTrace": true
}