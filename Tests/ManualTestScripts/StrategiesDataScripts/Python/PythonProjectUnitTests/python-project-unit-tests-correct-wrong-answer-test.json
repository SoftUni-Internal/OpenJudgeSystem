// 1 CorrectAnswer, 19 WrongAnswer
{
  "ExecutionType": "tests-execution",
  "ExecutionStrategy": "python-project-unit-tests",
  "CompilerType": "None",
  "FileContent": "UEsDBBQAAAAIAPVkD1fcAXBsmAEAADEFAAAHAAAAdGVzdC5wea1TTW/bMAy9B8h/4LxDbSAzlA3tEAMtsHS9DcGAZoedBMWmC62y5UpUsfTXV4rz4S6u0Q6hLhY/3uOj6NLoChqj/2BOKRnZgKwabQiW/ns8+riJH/u3F1dLIrQ0HoWTK2EtLP09JMW7YBo818JikoUs8FZgCRbpVxNbVGUCn65goWvM2miw4E8DDFxuKOOZtwmcswmwpAsTGLh1eY7Wlk5x6Vlb1H/RfHNo6ObBCbVF25OkK1fcISUDFeesm09GPKJCY4dKXlRIy0tRSbXu6R6Je3beggbUfgEvmeMpYx12g9Ypgsu+1EMW/m38Q2PBtaNcV+jzPcyAhhZ2clR4rGIv8G3NJ33xA8b0FNJOI2yl9T0XPPwE75bW03oXLpob8SRVlAzKOLvdr7daQ6jHwrdnSdaCpK6hRfkAv7Uz0K4yKCwJpIUvX2ezlLGzk41C1nfckiB3vKWvqO1UDAuNomjeqvt+UJdt5Y1HP4Us4FulXU0ZXHxmLA2ru3DVCg3oEpa7J8hgOh7N2zn88HPIdlPwBP87h915BlBLAwQKAAAAAADihdBWAAAAAAAAAAAAAAAACwAAAF9faW5pdF9fLnB5UEsBAh8AFAAAAAgA9WQPV9wBcGyYAQAAMQUAAAcAJAAAAAAAAAAgAAAAAAAAAHRlc3QucHkKACAAAAAAAAEAGAATfddqXM/ZARN912pcz9kBHPCuN1XP2QFQSwECHwAKAAAAAADihdBWAAAAAAAAAAAAAAAACwAkAAAAAAAAACAAAAC9AQAAX19pbml0X18ucHkKACAAAAAAAAEAGAAA/IoIWaDZARzwrjdVz9kBHPCuN1XP2QFQSwUGAAAAAAIAAgC2AAAA5gEAAAAA",
  "Code": "",
  "TimeLimit": 500,
  "MemoryLimit": 16777216,
  "ExecutionDetails": {
    "MaxPoints": 100,
    "CheckerType": "trim",
    "CheckerParameter": null,
    "Tests": [
      {
        "Id": 307682,
        "Input": "class Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)",
        "Output": "Test Passed!",
        "IsTrialTest": true,
        "OrderBy": 1
      },
      {
        "Id": 307683,
        "Input": "# travelers can be less tan 1, but shouldn\u0027t\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        # marker\r\n        if value \u003e\u003d 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)\r\n",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 1
      },
      {
        "Id": 307684,
        "Input": "# travelers VE msg\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            # marker\r\n            raise ValueError(\u0027wrong\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 2
      },
      {
        "Id": 307685,
        "Input": "# is_family wrong setter\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        # marker\r\n        if value and self.travelers \u003e\u003d 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)\r\n",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 3
      },
      {
        "Id": 307686,
        "Input": "# is_family wrong setter (2)\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        # marker\r\n        self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)\r\n",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 4
      },
      {
        "Id": 307687,
        "Input": "# book_a_trip wrong check for existing destination\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        # marker\r\n        if destination in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)\r\n",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 5
      },
      {
        "Id": 307688,
        "Input": "# book_a_trip check for existing destination wrong msg\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            # marker\r\n            return \u0027wrong\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 6
      },
      {
        "Id": 307689,
        "Input": "# book_a_trip wrong required price\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n        # marker\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] + self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)\r\n",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 7
      },
      {
        "Id": 307690,
        "Input": "# book_a_trip wrong discount\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        # marker\r\n        if not self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 8
      },
      {
        "Id": 307691,
        "Input": "# book_a_trip wrong discount (2)\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            # marker\r\n            required_price \u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)\r\n",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 9
      },
      {
        "Id": 307692,
        "Input": "# book_a_trip shortage in budget possible\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        # marker\r\n        if self.budget \u003e\u003d required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 10
      },
      {
        "Id": 307693,
        "Input": "# book_a_trip budget wrong msg\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            # marker\r\n            return \u0027wrong\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)\r\n",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 11
      },
      {
        "Id": 307694,
        "Input": "# book_a_trip set budget wrong\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        # marker\r\n        self.budget \u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 12
      },
      {
        "Id": 307695,
        "Input": "# book_a_trip set dict wrong\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n        # marker\r\n        \r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)\r\n",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 13
      },
      {
        "Id": 307696,
        "Input": "# book_a_trip success msg wrong\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        # marker\r\n        return f\u0027wrong\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)\r\n",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 14
      },
      {
        "Id": 307697,
        "Input": "# booking_status wrong check\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        # marker\r\n        if self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 15
      },
      {
        "Id": 307698,
        "Input": "# booking_status wrong msg1\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            # marker\r\n            return f\u0027wrong\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 16
      },
      {
        "Id": 307699,
        "Input": "# booking_status wrong msg2\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            # marker\r\n            result.append(f\"\"\"wrong\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        return \u0027\\n\u0027.join(result)",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 17
      },
      {
        "Id": 307700,
        "Input": "# booking_status wrong msg3\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n            # marker\r\n        result.append(f\"\"\"wrong\"\"\")\r\n        return \u0027\\n\u0027.join(result)\r\n\r\n",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 18
      },
      {
        "Id": 307701,
        "Input": "# booking_status wrong msg3 - wrong separator\r\n\r\nclass Trip:\r\n    DESTINATION_PRICES_PER_PERSON \u003d {\u0027New Zealand\u0027: 7500, \u0027Australia\u0027: 5700, \u0027Brazil\u0027: 6200, \u0027Bulgaria\u0027: 500}\r\n\r\n    def __init__(self, budget: float, travelers_number: int, is_family: bool):\r\n        self.budget \u003d budget\r\n        self.travelers \u003d travelers_number\r\n        self.is_family \u003d is_family\r\n        self.booked_destinations_paid_amounts \u003d {}\r\n\r\n    @property\r\n    def travelers(self):\r\n        return self._travelers\r\n\r\n    @travelers.setter\r\n    def travelers(self, value):\r\n        if value \u003c 1:\r\n            raise ValueError(\u0027At least one traveler is required!\u0027)\r\n        self._travelers \u003d value\r\n\r\n    @property\r\n    def is_family(self):\r\n        return self._is_family\r\n\r\n    @is_family.setter\r\n    def is_family(self, value):\r\n        if value and self.travelers \u003c 2:\r\n            self._is_family \u003d False\r\n        else:\r\n            self._is_family \u003d value\r\n\r\n    def book_a_trip(self, destination: str):\r\n        if destination not in self.DESTINATION_PRICES_PER_PERSON:\r\n            return \u0027This destination is not in our offers, please choose a new one!\u0027\r\n\r\n        required_price \u003d self.DESTINATION_PRICES_PER_PERSON[destination] * self.travelers\r\n        if self.is_family:\r\n            required_price *\u003d 0.9\r\n        if self.budget \u003c required_price:\r\n            return \u0027Your budget is not enough!\u0027\r\n\r\n        self.booked_destinations_paid_amounts[destination] \u003d required_price\r\n        self.budget -\u003d required_price\r\n        return f\u0027Successfully booked destination {destination}! Your budget left is {self.budget:.2f}\u0027\r\n\r\n    def booking_status(self):\r\n        if not self.booked_destinations_paid_amounts:\r\n            return f\u0027No bookings yet. Budget: {self.budget:.2f}\u0027\r\n        result \u003d []\r\n        sorted_bookings \u003d sorted(self.booked_destinations_paid_amounts.items())\r\n        for booked_destination, paid_amount in sorted_bookings:\r\n            result.append(f\"\"\"Booked Destination: {booked_destination}\r\nPaid Amount: {paid_amount:.2f}\"\"\")\r\n        result.append(f\"\"\"Number of Travelers: {self.travelers}\r\nBudget Left: {self.budget:.2f}\"\"\")\r\n        # marker\r\n        return \u0027\u0027.join(result)",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 19
      }
    ],
    "TaskSkeleton": "U1YoKMrPSk0uiU/LzEktjk/OL80rUTAEAA\u003d\u003d",
    "TaskSkeletonAsString": "# project_files_count 1"
  },
  "ExecutionOptions": {
    "KeepDetails": true,
    "EscapeTests": false,
    "EscapeLineEndings": true
  },
  "WithExceptionStackTrace": true
}