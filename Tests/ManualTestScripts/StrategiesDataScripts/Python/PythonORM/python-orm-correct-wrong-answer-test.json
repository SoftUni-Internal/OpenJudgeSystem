// 15 CorrectAnswer, 2 WrongAnswer
{
  "ExecutionType": "tests-execution",
  "ExecutionStrategy": "python-django-orm-project-tests",
  "CompilerType": "None",
  "FileContent": "\u003d\u003d",
  "Code": "",
  "TimeLimit": 50000,
  "MemoryLimit": 16777216,
  "ExecutionDetails": {
    "MaxPoints": 75,
    "CheckerType": "trim",
    "CheckerParameter": null,
    "Tests": [
      {
        "Id": 323091,
        "Input": "#get_players-exact name\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer\r\nfrom caller import get_tennis_players\r\n\r\nclass GetTennisPlayersByNameTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(full_name\u003d\"Roger Federer\", country\u003d\"Switzerland\", ranking\u003d1, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Rafael Nadal\", country\u003d\"Spain\", ranking\u003d2, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Novak Djokovic\", country\u003d\"Serbia\", ranking\u003d3, birth_date\u003d\u00272000-05-19\u0027)\r\n\r\n    def test_get_tennis_players_by_exact_name(self):\r\n        result \u003d get_tennis_players(search_name\u003d\"Rafael Nadal\")\r\n        self.assertEqual(result, \"Tennis Player: Rafael Nadal, country: Spain, ranking: 2\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 1
      },
      {
        "Id": 323092,
        "Input": "#get_players-insensitive name\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer\r\nfrom caller import get_tennis_players\r\n\r\nclass GetTennisPlayersByNameTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(full_name\u003d\"Roger Federer\", country\u003d\"Switzerland\", ranking\u003d1, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Rafael Nadal\", country\u003d\"Spain\", ranking\u003d2, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Novak Djokovic\", country\u003d\"Serbia\", ranking\u003d3, birth_date\u003d\u00272000-05-19\u0027)\r\n\r\n\r\n    def test_get_tennis_players_by_insensitive_name(self):\r\n        result \u003d get_tennis_players(search_name\u003d\"rafael\")\r\n        self.assertEqual(result, \"Tennis Player: Rafael Nadal, country: Spain, ranking: 2\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 2
      },
      {
        "Id": 323093,
        "Input": "#get_players-partial name\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer\r\nfrom caller import get_tennis_players\r\n\r\nclass GetTennisPlayersByNameTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(full_name\u003d\"Roger Federer\", country\u003d\"Switzerland\", ranking\u003d1, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Rafael Nadal\", country\u003d\"Spain\", ranking\u003d2, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Novak Djokovic\", country\u003d\"Serbia\", ranking\u003d3, birth_date\u003d\u00272000-05-19\u0027)\r\n\r\n    def test_get_tennis_players_by_partial_name(self):\r\n        result \u003d get_tennis_players(search_name\u003d\"r\")\r\n        self.assertEqual(result, \"\"\"Tennis Player: Roger Federer, country: Switzerland, ranking: 1\r\nTennis Player: Rafael Nadal, country: Spain, ranking: 2\"\"\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 3
      },
      {
        "Id": 323094,
        "Input": "#get_players-exact country\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer\r\nfrom caller import get_tennis_players\r\n\r\n\r\nclass GetTennisPlayersByCountryTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(full_name\u003d\"Roger Federer\", country\u003d\"Switzerland\", ranking\u003d1, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Rafael Nadal\", country\u003d\"Spain\", ranking\u003d2, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Novak Djokovic\", country\u003d\"Serbia\", ranking\u003d3, birth_date\u003d\u00272000-05-19\u0027)\r\n\r\n    def test_get_tennis_players_by_exact_country(self):\r\n        result \u003d get_tennis_players(search_country\u003d\"Spain\")\r\n        self.assertEqual(result, \"Tennis Player: Rafael Nadal, country: Spain, ranking: 2\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 4
      },
      {
        "Id": 323095,
        "Input": "# get_players-insensitive country\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer\r\nfrom caller import get_tennis_players\r\n\r\n\r\nclass GetTennisPlayersByCountryTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(full_name\u003d\"Roger Federer\", country\u003d\"Switzerland\", ranking\u003d1, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Rafael Nadal\", country\u003d\"Spain\", ranking\u003d2, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Novak Djokovic\", country\u003d\"Serbia\", ranking\u003d3, birth_date\u003d\u00272000-05-19\u0027)\r\n\r\n    def test_get_tennis_players_by_insensitive_country(self):\r\n        result \u003d get_tennis_players(search_country\u003d\"switzerland\")\r\n        self.assertEqual(result, \"Tennis Player: Roger Federer, country: Switzerland, ranking: 1\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 5
      },
      {
        "Id": 323096,
        "Input": "# get_players-partial country\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer\r\nfrom caller import get_tennis_players\r\n\r\n\r\nclass GetTennisPlayersByCountryTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(full_name\u003d\"Roger Federer\", country\u003d\"Switzerland\", ranking\u003d1, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Rafael Nadal\", country\u003d\"Spain\", ranking\u003d2, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Novak Djokovic\", country\u003d\"Serbia\", ranking\u003d3, birth_date\u003d\u00272000-05-19\u0027)\r\n\r\n    def test_get_tennis_players_by_partial_country(self):\r\n        result \u003d get_tennis_players(search_country\u003d\"swit\")\r\n        self.assertEqual(result, \"Tennis Player: Roger Federer, country: Switzerland, ranking: 1\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 6
      },
      {
        "Id": 323097,
        "Input": "# get_players-name and country exact\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer\r\nfrom caller import get_tennis_players\r\n\r\n\r\nclass GetTennisPlayersByNameAndCountryTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(full_name\u003d\"Roger Federer\", country\u003d\"Switzerland\", ranking\u003d1, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Rafael Nadal\", country\u003d\"Spain\", ranking\u003d2, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Novak Djokovic\", country\u003d\"Serbia\", ranking\u003d3, birth_date\u003d\u00272000-05-19\u0027)\r\n\r\n    def test_get_tennis_players_by_exact_name_and_exact_country(self):\r\n        result \u003d get_tennis_players(search_name\u003d\"Roger Federer\", search_country\u003d\"Switzerland\")\r\n        self.assertEqual(result, \"Tennis Player: Roger Federer, country: Switzerland, ranking: 1\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 7
      },
      {
        "Id": 323098,
        "Input": "# get_players-name and country insensitive\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer\r\nfrom caller import get_tennis_players\r\n\r\n\r\nclass GetTennisPlayersByNameAndCountryTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(full_name\u003d\"Roger Federer\", country\u003d\"Switzerland\", ranking\u003d1, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Rafael Nadal\", country\u003d\"Spain\", ranking\u003d2, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Novak Djokovic\", country\u003d\"Serbia\", ranking\u003d3, birth_date\u003d\u00272000-05-19\u0027)\r\n\r\n    def test_get_tennis_players_by_insensitive_name_and_insensitive_country(self):\r\n        result \u003d get_tennis_players(search_name\u003d\"novak\", search_country\u003d\"serbia\")\r\n        self.assertEqual(result, \"Tennis Player: Novak Djokovic, country: Serbia, ranking: 3\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 8
      },
      {
        "Id": 323099,
        "Input": "# get_players-name and country partial\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer\r\nfrom caller import get_tennis_players\r\n\r\n\r\nclass GetTennisPlayersByNameAndCountryTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(full_name\u003d\"Roger Federer\", country\u003d\"Switzerland\", ranking\u003d1, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Rafael Nadal\", country\u003d\"Spain\", ranking\u003d2, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Novak Djokovic\", country\u003d\"Serbia\", ranking\u003d3, birth_date\u003d\u00272000-05-19\u0027)\r\n\r\n    def test_get_tennis_players_by_partial_name_and_partial_country(self):\r\n        result \u003d get_tennis_players(search_name\u003d\"n\", search_country\u003d\"s\")\r\n        self.assertEqual(result, \"\"\"Tennis Player: Rafael Nadal, country: Spain, ranking: 2\r\nTennis Player: Novak Djokovic, country: Serbia, ranking: 3\"\"\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 9
      },
      {
        "Id": 323100,
        "Input": "#get_players-returns empty string\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer\r\nfrom caller import get_tennis_players\r\n\r\n\r\nclass GetTennisPlayersReturnsEmptyTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(full_name\u003d\"Roger Federer\", country\u003d\"Switzerland\", ranking\u003d1,\r\n                                    birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Rafael Nadal\", country\u003d\"Spain\", ranking\u003d2, birth_date\u003d\u00272000-05-19\u0027)\r\n        TennisPlayer.objects.create(full_name\u003d\"Novak Djokovic\", country\u003d\"Serbia\", ranking\u003d3,\r\n                                    birth_date\u003d\u00272000-05-19\u0027)\r\n    def test_get_tennis_players__returns_empty(self):\r\n    # def test_get_tennis_players_no_matching_name_and_country(self):\r\n        result \u003d get_tennis_players(search_name\u003d\"Andy Murray\", search_country\u003d\"United Kingdom\")\r\n        self.assertEqual(result, \"\")\r\n\r\n    # def test_get_tennis_players_name_and_country_no_criteria(self):\r\n        result \u003d get_tennis_players()\r\n        self.assertEqual(result, \"\")\r\n\r\n    # def test_get_tennis_players_no_matching_country(self):\r\n        result \u003d get_tennis_players(search_country\u003d\"USA\")\r\n        self.assertEqual(result, \"\")\r\n\r\n    # def test_get_tennis_players_no_country_criteria(self):\r\n        result \u003d get_tennis_players()\r\n        self.assertEqual(result, \"\")\r\n\r\n    # def test_get_tennis_players_no_matching_name(self):\r\n        result \u003d get_tennis_players(search_name\u003d\"Andy Murray\")\r\n        self.assertEqual(result, \"\")\r\n\r\n    # def test_get_tennis_players_no_name_criteria(self):\r\n        result \u003d get_tennis_players()\r\n        self.assertEqual(result, \"\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 10
      },
      {
        "Id": 323101,
        "Input": "# get_top_player-diff wins\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer, Tournament, Match\r\nfrom caller import get_top_tennis_player\r\n\r\n\r\nclass GetTopTennisPlayerTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Roger Federer\",\r\n            birth_date\u003d\"1981-08-08\",\r\n            country\u003d\"Switzerland\",\r\n            ranking\u003d1,\r\n            is_active\u003dTrue\r\n        )\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Rafael Nadal\",\r\n            birth_date\u003d\"1986-06-03\",\r\n            country\u003d\"Spain\",\r\n            ranking\u003d2,\r\n            is_active\u003dTrue\r\n        )\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Novak Djokovic\",\r\n            birth_date\u003d\"1987-05-22\",\r\n            country\u003d\"Serbia\",\r\n            ranking\u003d3,\r\n            is_active\u003dTrue\r\n        )\r\n\r\n        # Create a sample tournament\r\n        Tournament.objects.create(\r\n            name\u003d\"US Open\",\r\n            location\u003d\"New York\",\r\n            prize_money\u003d1000000.00,\r\n            start_date\u003d\"2023-09-01\",\r\n            surface_type\u003d\"Hard Court\"\r\n        )\r\n        # Create matches with different winners\r\n        match1 \u003d Match.objects.create(score\u003d\"6-2, 6-3\", summary\u003d\"Great match!\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-11\u0027)\r\n        match1.players.set([TennisPlayer.objects.get(full_name\u003d\"Roger Federer\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\")])\r\n        match1.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Roger Federer\")\r\n        match1.save()\r\n\r\n        match2 \u003d Match.objects.create(score\u003d\"6-4, 6-2\", summary\u003d\"Solid performance\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-12\u0027)\r\n        match2.players.set([TennisPlayer.objects.get(full_name\u003d\"Roger Federer\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Novak Djokovic\")])\r\n        match2.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Roger Federer\")\r\n        match2.save()\r\n\r\n        match3 \u003d Match.objects.create(score\u003d\"6-3, 7-5\", summary\u003d\"Impressive play\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-14\u0027)\r\n        match3.players.set([TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Novak Djokovic\")])\r\n        match3.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\")\r\n        match3.save()\r\n\r\n    def test_get_top_tennis_player_with_diff_wins(self):\r\n        result \u003d get_top_tennis_player()\r\n        self.assertEqual(result, \"Top Tennis Player: Roger Federer with 2 wins.\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 11
      },
      {
        "Id": 323102,
        "Input": "#get_top_player - no wins\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer, Tournament, Match\r\nfrom caller import get_top_tennis_player\r\n\r\n\r\nclass GetTopTennisPlayerTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Roger Federer\",\r\n            birth_date\u003d\"1981-08-08\",\r\n            country\u003d\"Switzerland\",\r\n            ranking\u003d1,\r\n            is_active\u003dTrue\r\n        )\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Rafael Nadal\",\r\n            birth_date\u003d\"1986-06-03\",\r\n            country\u003d\"Spain\",\r\n            ranking\u003d2,\r\n            is_active\u003dTrue\r\n        )\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Novak Djokovic\",\r\n            birth_date\u003d\"1987-05-22\",\r\n            country\u003d\"Serbia\",\r\n            ranking\u003d3,\r\n            is_active\u003dTrue\r\n        )\r\n\r\n        # Create a sample tournament\r\n        Tournament.objects.create(\r\n            name\u003d\"US Open\",\r\n            location\u003d\"New York\",\r\n            prize_money\u003d1000000.00,\r\n            start_date\u003d\"2023-09-01\",\r\n            surface_type\u003d\"Hard Court\"\r\n        )\r\n        # Create matches with different winners\r\n        match1 \u003d Match.objects.create(score\u003d\"6-2, 6-3\", summary\u003d\"Great match!\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-11\u0027)\r\n        match1.players.set([TennisPlayer.objects.get(full_name\u003d\"Roger Federer\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\")])\r\n        match1.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Roger Federer\")\r\n        match1.save()\r\n\r\n        match2 \u003d Match.objects.create(score\u003d\"6-4, 6-2\", summary\u003d\"Solid performance\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-12\u0027)\r\n        match2.players.set([TennisPlayer.objects.get(full_name\u003d\"Roger Federer\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Novak Djokovic\")])\r\n        match2.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Roger Federer\")\r\n        match2.save()\r\n\r\n        match3 \u003d Match.objects.create(score\u003d\"6-3, 7-5\", summary\u003d\"Impressive play\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-14\u0027)\r\n        match3.players.set([TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Novak Djokovic\")])\r\n        match3.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\")\r\n        match3.save()\r\n\r\n\r\n    def test_get_top_tennis_player_no_wins(self):\r\n        Match.objects.all().delete()\r\n        result \u003d get_top_tennis_player()\r\n        self.assertEqual(result, \"Top Tennis Player: Novak Djokovic with 0 wins.\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 13
      },
      {
        "Id": 323103,
        "Input": "# get_top_player-same wins num\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer, Tournament, Match\r\nfrom caller import get_top_tennis_player\r\n\r\n\r\nclass GetTopTennisPlayerTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Roger Federer\",\r\n            birth_date\u003d\"1981-08-08\",\r\n            country\u003d\"Switzerland\",\r\n            ranking\u003d1,\r\n            is_active\u003dTrue\r\n        )\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Rafael Nadal\",\r\n            birth_date\u003d\"1986-06-03\",\r\n            country\u003d\"Spain\",\r\n            ranking\u003d2,\r\n            is_active\u003dTrue\r\n        )\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Novak Djokovic\",\r\n            birth_date\u003d\"1987-05-22\",\r\n            country\u003d\"Serbia\",\r\n            ranking\u003d3,\r\n            is_active\u003dTrue\r\n        )\r\n\r\n        # Create a sample tournament\r\n        Tournament.objects.create(\r\n            name\u003d\"US Open\",\r\n            location\u003d\"New York\",\r\n            prize_money\u003d1000000.00,\r\n            start_date\u003d\"2023-09-01\",\r\n            surface_type\u003d\"Hard Court\"\r\n        )\r\n        # Create matches with different winners\r\n        match1 \u003d Match.objects.create(score\u003d\"6-2, 6-3\", summary\u003d\"Great match!\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-11\u0027)\r\n        match1.players.set([TennisPlayer.objects.get(full_name\u003d\"Roger Federer\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\")])\r\n        match1.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Roger Federer\")\r\n        match1.save()\r\n\r\n        match2 \u003d Match.objects.create(score\u003d\"6-4, 6-2\", summary\u003d\"Solid performance\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-12\u0027)\r\n        match2.players.set([TennisPlayer.objects.get(full_name\u003d\"Roger Federer\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Novak Djokovic\")])\r\n        match2.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Roger Federer\")\r\n        match2.save()\r\n\r\n        match3 \u003d Match.objects.create(score\u003d\"6-3, 7-5\", summary\u003d\"Impressive play\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-14\u0027)\r\n        match3.players.set([TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Novak Djokovic\")])\r\n        match3.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\")\r\n        match3.save()\r\n\r\n\r\n    def test_get_top_tennis_player_same_wins(self):\r\n        # Create matches with same number of wins for different players\r\n        match4 \u003d Match.objects.create(score\u003d\"6-3, 7-5\", summary\u003d\"Impressive play\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-15\u0027)\r\n        match4.players.set([TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Roger Federer\")])\r\n        match4.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\")\r\n        match4.save()\r\n\r\n        result \u003d get_top_tennis_player()\r\n        self.assertEqual(result, \"Top Tennis Player: Rafael Nadal with 2 wins.\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 12
      },
      {
        "Id": 323104,
        "Input": "#get_top_player-returns empty\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer, Tournament, Match\r\nfrom caller import get_top_tennis_player\r\n\r\n\r\nclass GetTopTennisPlayerTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Roger Federer\",\r\n            birth_date\u003d\"1981-08-08\",\r\n            country\u003d\"Switzerland\",\r\n            ranking\u003d1,\r\n            is_active\u003dTrue\r\n        )\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Rafael Nadal\",\r\n            birth_date\u003d\"1986-06-03\",\r\n            country\u003d\"Spain\",\r\n            ranking\u003d2,\r\n            is_active\u003dTrue\r\n        )\r\n        TennisPlayer.objects.create(\r\n            full_name\u003d\"Novak Djokovic\",\r\n            birth_date\u003d\"1987-05-22\",\r\n            country\u003d\"Serbia\",\r\n            ranking\u003d3,\r\n            is_active\u003dTrue\r\n        )\r\n\r\n        # Create a sample tournament\r\n        Tournament.objects.create(\r\n            name\u003d\"US Open\",\r\n            location\u003d\"New York\",\r\n            prize_money\u003d1000000.00,\r\n            start_date\u003d\"2023-09-01\",\r\n            surface_type\u003d\"Hard Court\"\r\n        )\r\n        # Create matches with different winners\r\n        match1 \u003d Match.objects.create(score\u003d\"6-2, 6-3\", summary\u003d\"Great match!\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-11\u0027)\r\n        match1.players.set([TennisPlayer.objects.get(full_name\u003d\"Roger Federer\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\")])\r\n        match1.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Roger Federer\")\r\n        match1.save()\r\n\r\n        match2 \u003d Match.objects.create(score\u003d\"6-4, 6-2\", summary\u003d\"Solid performance\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-12\u0027)\r\n        match2.players.set([TennisPlayer.objects.get(full_name\u003d\"Roger Federer\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Novak Djokovic\")])\r\n        match2.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Roger Federer\")\r\n        match2.save()\r\n\r\n        match3 \u003d Match.objects.create(score\u003d\"6-3, 7-5\", summary\u003d\"Impressive play\",\r\n                                      tournament\u003dTournament.objects.first(), date_played\u003d\u00272023-09-14\u0027)\r\n        match3.players.set([TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\"),\r\n                            TennisPlayer.objects.get(full_name\u003d\"Novak Djokovic\")])\r\n        match3.winner \u003d TennisPlayer.objects.get(full_name\u003d\"Rafael Nadal\")\r\n        match3.save()\r\n\r\n\r\n    def test_get_top_tennis_player_no_players(self):\r\n        # Delete all players to simulate scenario with no players\r\n        TennisPlayer.objects.all().delete()\r\n        result \u003d get_top_tennis_player()\r\n        self.assertEqual(result, \"\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 14
      },
      {
        "Id": 323105,
        "Input": "#get_player_by_matches-diff num of matches\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer, Match, Tournament\r\nfrom caller import get_tennis_player_by_matches_count\r\n\r\n\r\nclass GetTennisPlayerByMatchesCountTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        self.player1 \u003d TennisPlayer.objects.create(\r\n            full_name\u003d\"Roger Federer\",\r\n            birth_date\u003d\"1981-08-08\",\r\n            country\u003d\"Switzerland\",\r\n            ranking\u003d3,\r\n            is_active\u003dTrue\r\n        )\r\n        self.player2 \u003d TennisPlayer.objects.create(\r\n            full_name\u003d\"Rafael Nadal\",\r\n            birth_date\u003d\"1986-06-03\",\r\n            country\u003d\"Spain\",\r\n            ranking\u003d2,\r\n            is_active\u003dTrue\r\n        )\r\n        self.player3 \u003d TennisPlayer.objects.create(\r\n            full_name\u003d\"Novak Djokovic\",\r\n            birth_date\u003d\"1987-05-22\",\r\n            country\u003d\"Serbia\",\r\n            ranking\u003d1,\r\n            is_active\u003dTrue\r\n        )\r\n        # Create a sample tournament\r\n        tournament \u003d Tournament.objects.create(\r\n            name\u003d\"US Open\",\r\n            location\u003d\"New York\",\r\n            prize_money\u003d1000000.00,\r\n            start_date\u003d\"2023-09-01\",\r\n            surface_type\u003d\"Hard Court\"\r\n        )\r\n\r\n        # Create matches with different players\r\n        self.match1 \u003d Match.objects.create(score\u003d\"6-2, 6-3\", summary\u003d\"Great match!\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n        self.match2 \u003d Match.objects.create(score\u003d\"6-4, 6-2\", summary\u003d\"Solid performance\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n        self.match3 \u003d Match.objects.create(score\u003d\"6-3, 7-5\", summary\u003d\"Impressive play\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n        self.match4 \u003d Match.objects.create(score\u003d\"6-4, 6-3\", summary\u003d\"Dominant display\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n\r\n    def test_get_tennis_player_by_matches_count__diff_num(self):\r\n        self.match1.players.set((self.player1, self.player2))\r\n        self.match2.players.set((self.player1, self.player3))\r\n\r\n        result \u003d get_tennis_player_by_matches_count()\r\n        self.assertEqual(result, \"Tennis Player: Roger Federer with 2 matches played.\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 15
      },
      {
        "Id": 323106,
        "Input": "# get_players_by_matches-same num\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer, Match, Tournament\r\nfrom caller import get_tennis_player_by_matches_count\r\n\r\n\r\nclass GetTennisPlayerByMatchesCountTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        self.player1 \u003d TennisPlayer.objects.create(\r\n            full_name\u003d\"Roger Federer\",\r\n            birth_date\u003d\"1981-08-08\",\r\n            country\u003d\"Switzerland\",\r\n            ranking\u003d3,\r\n            is_active\u003dTrue\r\n        )\r\n        self.player2 \u003d TennisPlayer.objects.create(\r\n            full_name\u003d\"Rafael Nadal\",\r\n            birth_date\u003d\"1986-06-03\",\r\n            country\u003d\"Spain\",\r\n            ranking\u003d2,\r\n            is_active\u003dTrue\r\n        )\r\n        self.player3 \u003d TennisPlayer.objects.create(\r\n            full_name\u003d\"Novak Djokovic\",\r\n            birth_date\u003d\"1987-05-22\",\r\n            country\u003d\"Serbia\",\r\n            ranking\u003d1,\r\n            is_active\u003dTrue\r\n        )\r\n        # Create a sample tournament\r\n        tournament \u003d Tournament.objects.create(\r\n            name\u003d\"US Open\",\r\n            location\u003d\"New York\",\r\n            prize_money\u003d1000000.00,\r\n            start_date\u003d\"2023-09-01\",\r\n            surface_type\u003d\"Hard Court\"\r\n        )\r\n\r\n        # Create matches with different players\r\n        self.match1 \u003d Match.objects.create(score\u003d\"6-2, 6-3\", summary\u003d\"Great match!\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n        self.match2 \u003d Match.objects.create(score\u003d\"6-4, 6-2\", summary\u003d\"Solid performance\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n        self.match3 \u003d Match.objects.create(score\u003d\"6-3, 7-5\", summary\u003d\"Impressive play\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n        self.match4 \u003d Match.objects.create(score\u003d\"6-4, 6-3\", summary\u003d\"Dominant display\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n\r\n    def test_get_tennis_player_by_matches_count__same_num(self):\r\n        self.match1.players.set((self.player1, self.player2))\r\n        self.match2.players.set((self.player1, self.player3))\r\n        self.match3.players.set((self.player2, self.player3))\r\n        result \u003d get_tennis_player_by_matches_count()\r\n        self.assertEqual(result, \"Tennis Player: Novak Djokovic with 2 matches played.\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 16
      },
      {
        "Id": 323364,
        "Input": "#get_players_by_matches-returns empty\r\nfrom django.test import TestCase\r\nfrom main_app.models import TennisPlayer, Match, Tournament\r\nfrom caller import get_tennis_player_by_matches_count\r\n\r\n\r\nclass GetTennisPlayerByMatchesCountTests(TestCase):\r\n\r\n    def setUp(self):\r\n        # Create some sample tennis players for testing\r\n        self.player1 \u003d TennisPlayer.objects.create(\r\n            full_name\u003d\"Roger Federer\",\r\n            birth_date\u003d\"1981-08-08\",\r\n            country\u003d\"Switzerland\",\r\n            ranking\u003d3,\r\n            is_active\u003dTrue\r\n        )\r\n        self.player2 \u003d TennisPlayer.objects.create(\r\n            full_name\u003d\"Rafael Nadal\",\r\n            birth_date\u003d\"1986-06-03\",\r\n            country\u003d\"Spain\",\r\n            ranking\u003d2,\r\n            is_active\u003dTrue\r\n        )\r\n        self.player3 \u003d TennisPlayer.objects.create(\r\n            full_name\u003d\"Novak Djokovic\",\r\n            birth_date\u003d\"1987-05-22\",\r\n            country\u003d\"Serbia\",\r\n            ranking\u003d1,\r\n            is_active\u003dTrue\r\n        )\r\n        # Create a sample tournament\r\n        tournament \u003d Tournament.objects.create(\r\n            name\u003d\"US Open\",\r\n            location\u003d\"New York\",\r\n            prize_money\u003d1000000.00,\r\n            start_date\u003d\"2023-09-01\",\r\n            surface_type\u003d\"Hard Court\"\r\n        )\r\n\r\n        # Create matches with different players\r\n        self.match1 \u003d Match.objects.create(score\u003d\"6-2, 6-3\", summary\u003d\"Great match!\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n        self.match2 \u003d Match.objects.create(score\u003d\"6-4, 6-2\", summary\u003d\"Solid performance\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n        self.match3 \u003d Match.objects.create(score\u003d\"6-3, 7-5\", summary\u003d\"Impressive play\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n        self.match4 \u003d Match.objects.create(score\u003d\"6-4, 6-3\", summary\u003d\"Dominant display\",\r\n                                           date_played\u003d\u00272023-09-21\u0027,\r\n                                           tournament\u003dtournament)\r\n\r\n    def test_get_tennis_player_by_matches_count__returns_empty(self):\r\n        Match.objects.all().delete()\r\n        result \u003d get_tennis_player_by_matches_count()\r\n        self.assertEqual(result, \"\")\r\n\r\n        TennisPlayer.objects.all().delete()\r\n        result \u003d get_tennis_player_by_matches_count()\r\n        self.assertEqual(result, \"\")",
        "Output": "Test Passed!",
        "IsTrialTest": false,
        "OrderBy": 17
      }
    ],
    "TaskSkeleton": null,
    "TaskSkeletonAsString": null
  },
  "ExecutionOptions": {
    "KeepDetails": true,
    "EscapeTests": false,
    "EscapeLineEndings": true
  },
  "WithExceptionStackTrace": true
}