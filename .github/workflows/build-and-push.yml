name: Z. Build and Push (called)

on:
    workflow_call:
      inputs:
        docker_image_name:
          required: true
          type: string
        dockerfile_name:
          required: true
          type: string
        docker_tag:
          required: false
          type: string
        branch_name:
            required: false
            type: string
        push_to_registry:
          required: false
          default: true
          type: boolean
        build_args:
          required: false
          type: string

env:
    IMG: ${{ inputs.docker_image_name }}
    OWNER: ${{ lower(github.repository_owner) }}
    IMAGE: ghcr.io/${{ lower(github.repository_owner) }}/${{ inputs.docker_image_name }}
    BUILD_VER: 1.0.${{ github.run_number }}
    GIT_SHA: ${{ substr(github.sha, 0, 7) }}
    DOCKERFILE_PATH: Docker/${{ inputs.dockerfile_name }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
    - name: Add BUILD_DATE (needs *runtime* value)
      run: echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
    - name: Get branch name (merge)
      if: github.event_name == 'push'
      shell: bash
      run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV
    - name: Get branch name (pull request)
      if: github.event_name == 'pull_request'
      shell: bash
      run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV
    - name: Get docker tag
      shell: bash
      run: echo "DOCKER_TAG=${{ inputs.docker_tag }}" >> $GITHUB_ENV

    - name: Checkout
      if: inputs.branch_name == ''
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.SOFTUNIBUILD_PAT }}
    - name: Checkout predefined branch
      if: inputs.branch_name != ''
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.branch_name }}
        submodules: recursive
        token: ${{ secrets.SOFTUNIBUILD_PAT }}

    - name: Prepare Docker Tags
      id: prepare_docker_tags
      shell: bash
      run: |
        TAGS=""
        if [[ -n "${{ inputs.docker_tag }}" ]]; then
          CURRENT_DATE=$(date +'%d-%m-%Y_%H%M')
          TAGS="${{ env.IMAGE }}:${CURRENT_DATE},${{ env.IMAGE }}:${{ env.GIT_SHA }},${{ env.IMAGE }}:${{ env.BUILD_VER }}"
        else
          TAGS="${{ env.IMAGE }}:${{ env.GIT_SHA }},${{ env.IMAGE }}:${{ env.BUILD_VER }}"
        fi
        if [[ -n "${{ env.BRANCH_NAME }}" ]]; then
          TAGS="$TAGS,${{ env.IMAGE }}:${{ env.BRANCH_NAME }}"
        fi
        if [[ -n "${{ env.DOCKER_TAG }}" ]]; then
          TAGS="$TAGS,${{ env.IMAGE }}:${{ env.DOCKER_TAG }}"
        fi
        echo "DOCKER_TAGS=$TAGS" >> $GITHUB_ENV
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: latest
        install: true
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ secrets.SOFTUNIBUILD_USER }}
        password: ${{ secrets.SOFTUNIBUILD_PAT }} # - must be in GitHub Secrets!
    - uses: docker/build-push-action@v4
      with:
        context: .
        file: ${{ env.DOCKERFILE_PATH }}
        builder: ${{ steps.buildx.outputs.name }}
        build-args: |
          ${{ inputs.build_args }}
        labels: |
          org.opencontainers.image.authors=${{ env.OWNER }}
          org.opencontainers.image.created=${{ env.BUILD_DATE }}
          org.opencontainers.image.description=Created from commit ${{ env.GIT_SHA }} and ref ${{ github.ref_name }}
          org.opencontainers.image.ref.name=${{ github.ref_name }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ env.BUILD_VER }}
        tags: ${{ env.DOCKER_TAGS }}
        push: ${{ inputs.push_to_registry }}
        platforms: linux/amd64
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        secrets: |
          GIT_AUTH_TOKEN=${{ github.token }}
