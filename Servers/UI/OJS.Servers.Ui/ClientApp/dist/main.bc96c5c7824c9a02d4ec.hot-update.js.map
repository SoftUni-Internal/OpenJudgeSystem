{"version":3,"file":"main.bc96c5c7824c9a02d4ec.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/use-contest-categories-breadcrumb.tsx"],"sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { isNil } from 'lodash';\nimport { ITreeItemType } from '../components/guidelines/trees/Tree';\nimport { IHaveChildrenProps } from '../components/common/Props';\nimport { IContestCategoryTreeType } from '../common/types';\n\ninterface ICategoriesBreadcrumbContext {\n    state: {\n        breadcrumbItems: ICategoriesBreadcrumbItem[];\n    };\n    actions: {\n        updateBreadcrumb: (category: ITreeItemType | undefined, flattenTree: ITreeItemType[] | []) => void;\n    };\n}\n\ninterface ICategoriesBreacrumbProviderProps extends IHaveChildrenProps {\n}\n\ninterface ICategoriesBreadcrumbItem {\n    id: string,\n    isLast: boolean,\n    value: string,\n    orderBy: number,\n}\n\nconst defaultState = { state: { breadcrumbItems: [] as ICategoriesBreadcrumbItem[] } };\n\nconst CategoriesBreadcrumbContext = createContext<ICategoriesBreadcrumbContext>(defaultState as ICategoriesBreadcrumbContext);\n\nconst orderByAsc = (x : ICategoriesBreadcrumbItem, y: ICategoriesBreadcrumbItem) => y.orderBy - x.orderBy;\n\nconst CategoriesBreadcrumbProvider = ({ children }: ICategoriesBreacrumbProviderProps) => {\n    const [ breadcrumbItems, setBreadcrumbItems ] = useState(defaultState.state.breadcrumbItems);\n\n    const updateBreadcrumb = useCallback(\n        (category: IContestCategoryTreeType | undefined, categoriesTree: ITreeItemType[] | []) => {\n            if (isNil(category) || isNil(categoriesTree)) {\n                return;\n            }\n\n            const { id, name, parentId } = category;\n\n            const allBreadcrumbItems = [] as ICategoriesBreadcrumbItem[];\n            let index = 0;\n\n            allBreadcrumbItems.push({\n                id,\n                value: name,\n                isLast: true,\n                orderBy: index,\n            } as ICategoriesBreadcrumbItem);\n\n            const populateBreadcrumbItemsByParents = (categoryParentId?: string) => {\n                if (isNil(categoryParentId)){\n                    return;\n                }\n\n                index += 1;\n\n                const { id: parentCategoryId, name: parentCategoryName, parentId: currentParrentId } = categoriesTree\n                    .find(x => x.id === categoryParentId) as ITreeItemType;\n\n                if (isNil(parentCategoryId)) {\n                    return;\n                }\n\n                allBreadcrumbItems.push({\n                    id: parentCategoryId,\n                    value: parentCategoryName,\n                    isLast: false,\n                    orderBy: index,\n                } as ICategoriesBreadcrumbItem);\n\n                populateBreadcrumbItemsByParents(currentParrentId);\n            };\n\n            populateBreadcrumbItemsByParents(parentId);\n            \n            allBreadcrumbItems\n                .sort(orderByAsc);\n\n            setBreadcrumbItems([ ...allBreadcrumbItems ]);\n        },\n        [ setBreadcrumbItems ],\n    );\n\n    const value = {\n        state: { breadcrumbItems },\n        actions: { updateBreadcrumb },\n    } as ICategoriesBreadcrumbContext;\n\n    return (\n        <CategoriesBreadcrumbContext.Provider value={value}>\n            {children}\n        </CategoriesBreadcrumbContext.Provider>\n    );\n};\n\n\nconst useCategoriesBreadcrumbs = () => useContext(CategoriesBreadcrumbContext);\n\nexport default CategoriesBreadcrumbProvider;\n\nexport {\n    useCategoriesBreadcrumbs,\n};\n\nexport type {\n    ICategoriesBreadcrumbItem,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAwBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAlEA;AACA;AADA;AACA;AAmEA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}