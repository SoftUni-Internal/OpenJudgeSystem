{"version":3,"file":"main.459c3855b0bcd7dbd3c0.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/pages/contests/ContestsPage.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { isEmpty, isNil } from 'lodash';\nimport ContestFilters from '../../components/contests/contests-filters/ContestFilters';\nimport { useContests } from '../../hooks/use-contests';\nimport { setLayout } from '../shared/set-layout';\nimport ContestCard from '../../components/home-contests/contest-card/ContestCard';\nimport List, { Orientation } from '../../components/guidelines/lists/List';\nimport PaginationControls from '../../components/guidelines/pagination/PaginationControls';\nimport { FilterType, IFilter } from '../../common/contest-types';\nimport Heading, { HeadingType } from '../../components/guidelines/headings/Heading';\nimport Breadcrumb from '../../components/guidelines/breadcrumb/Breadcrumb';\nimport { IIndexContestsType } from '../../common/types';\nimport { ICategoriesBreadcrumbItem, useCategoriesBreadcrumbs } from '../../hooks/use-contest-categories-breadcrumb';\nimport { LinkButton, LinkButtonType } from '../../components/guidelines/buttons/Button';\nimport concatClassNames from '../../utils/class-names';\nimport styles from './ContestsPage.module.scss';\n\nconst getBreadcrumbItemPath = (id: string) => `/contests?${FilterType.Category.toString()}=${id}`;\n\nconst ContestsPage = () => {\n    const {\n        state: {\n            contests,\n            pagesInfo,\n            currentPage,\n        },\n        actions: {\n            toggleFilter,\n            changePage,\n        },\n    } = useContests();\n    \n    const { state: { breadcrumbItems } } = useCategoriesBreadcrumbs();\n\n    const handlePageChange = useCallback(\n        (page: number) => changePage(page),\n        [ changePage ],\n    );\n\n    const handleFilterClick = useCallback(\n        (filter: IFilter) => toggleFilter(filter),\n        [ toggleFilter ],\n    );\n\n    const renderContest = useCallback(\n        (contest: IIndexContestsType) => (\n            <ContestCard contest={contest}/>\n        ),\n        [],\n    );\n\n    const renderContests = useCallback(\n        () => {\n            if (isNil(contests) || isEmpty(contests)) {\n                return (\n                    <Heading type={HeadingType.secondary}>\n                        No contests apply for this filter\n                    </Heading>\n                );\n            }\n\n            const { pagesCount } = pagesInfo;\n\n            return (\n                <div>\n                    <PaginationControls\n                        count={pagesCount}\n                        page={currentPage}\n                        onChange={handlePageChange}\n                    />\n                    <List\n                        values={contests}\n                        itemFunc={renderContest}\n                        itemClassName={styles.contestItem}\n                        orientation={Orientation.horizontal}\n                        wrap\n                    />\n                </div>\n            );\n        },\n        [ contests, currentPage, handlePageChange, pagesInfo, renderContest ],\n    );\n\n    const renderCategoriesBreadcrumbItem = useCallback(\n        (categoryBreadcrumbItem: ICategoriesBreadcrumbItem) => {\n            const { value, isLast, id } = categoryBreadcrumbItem;\n            const classNames = concatClassNames(styles.breadcrumbBtn, isLast\n                ? styles.breadcrumbBtnLast\n                : '');\n\n            return (\n                <LinkButton type={LinkButtonType.plain} className={classNames} to={getBreadcrumbItemPath(id)} text={value} />\n            );\n        },\n        [ ],\n    );\n    \n    \n\n    return (\n        <>\n            <Breadcrumb items={breadcrumbItems} itemFunc={renderCategoriesBreadcrumbItem} />\n            <div className={styles.container}>\n                <ContestFilters onFilterClick={handleFilterClick}/>\n                <div className=\"zdr\">\n                    {renderContests()}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default setLayout(ContestsPage, true);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAeA;AAIA;AAEA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAFA;AAUA;AACA;AA5FA;AAWA;;;AAXA;AA6FA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}