{"version":3,"file":"main.fa658e2c193d4c6f5a05.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contest-tasks-navigation/ContestTasksNavigation.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/layout/content/PageContent.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/pages/contest/ContestPage.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\n\r\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\r\nimport List, { ListType } from '../../guidelines/lists/List';\r\nimport { Button, ButtonState, ButtonType, LinkButton, LinkButtonType } from '../../guidelines/buttons/Button';\r\n\r\nimport concatClassNames from '../../../utils/class-names';\r\nimport { IProblemType } from '../../../common/types';\r\nimport { ContestParticipationType, ContestResultType } from '../../../common/constants';\r\n\r\nimport { useProblems } from '../../../hooks/use-problems';\r\nimport { useCurrentContest } from '../../../hooks/use-current-contest';\r\n\r\nimport SubmissionResultPointsLabel from '../../submissions/submission-result-points-label/SubmissionResultPointsLabel';\r\n\r\nimport styles from './ContestTasksNavigation.module.scss';\r\n\r\nconst compareByOrderBy = (p1: IProblemType, p2: IProblemType) => p1.orderBy - p2.orderBy;\r\n\r\nconst ContestTasksNavigation = () => {\r\n    const [ resultsLink, setResultsLink ] = useState('');\r\n\r\n    const {\r\n        state: {\r\n            currentProblem,\r\n            problems,\r\n        },\r\n        actions: { selectProblemById },\r\n    } = useProblems();\r\n\r\n    const {\r\n        state: {\r\n            contest,\r\n            isOfficial,\r\n        },\r\n    } = useCurrentContest();\r\n\r\n    const renderTask = useCallback(\r\n        (problem: IProblemType) => {\r\n            const { id: currentId } = currentProblem || {};\r\n            const { id, name } = problem;\r\n\r\n            const selectedClassName = currentId === id\r\n                ? styles.selected\r\n                : '';\r\n\r\n            const className = concatClassNames(\r\n                styles.taskSideNavigationItem,\r\n                selectedClassName,\r\n            );\r\n            \r\n            const participationType = isOfficial\r\n                ? ContestParticipationType.Compete\r\n                : ContestParticipationType.Practice;\r\n            \r\n            const getProblemNameNumber=name.slice(0,2);\r\n            \r\n            return (\r\n                <>\r\n                    <LinkButton \r\n                        // onClick={() => selectProblemById(problem.id)} \r\n                        state={ButtonState.enabled} \r\n                        className={className} \r\n                        type={LinkButtonType.plain} \r\n                        to={`/contests/${contest?.id}/${participationType}/#${getProblemNameNumber}`} \r\n                     > \r\n                        {problem.name} \r\n                    </LinkButton> \r\n                    <Button \r\n                      onClick={() => selectProblemById(problem.id)} \r\n                      className={className} \r\n                      type={ButtonType.plain} \r\n                     > \r\n                        {problem.name} \r\n                    </Button> \r\n                    <SubmissionResultPointsLabel\r\n                      points={problem.points}\r\n                      maximumPoints={problem.maximumPoints}\r\n                      isProcessed={false}\r\n                    />\r\n                </>\r\n            );\r\n        },\r\n        [ currentProblem, isOfficial,contest, selectProblemById ],\r\n    );\r\n    const sideBarTasksList = 'all-tasks-list';\r\n    const sideBarTasksListClassName = concatClassNames(styles.tasksListSideNavigation, sideBarTasksList);\r\n    const renderTasksList = useCallback(\r\n        () => (\r\n            <List\r\n              values={problems.sort(compareByOrderBy)}\r\n              itemFunc={renderTask}\r\n              className={sideBarTasksListClassName}\r\n              itemClassName={styles.taskListItem}\r\n              type={ListType.numbered}\r\n            />\r\n        ),\r\n        [ problems, renderTask, sideBarTasksListClassName ],\r\n    );\r\n\r\n    useEffect(() => {\r\n        const participationType = isOfficial\r\n            ? ContestParticipationType.Compete\r\n            : ContestParticipationType.Practice;\r\n        const newResultsLink = `/contests/${contest?.id}/${participationType}/results/${ContestResultType.Simple}`;\r\n\r\n        setResultsLink(newResultsLink);\r\n    }, [ isOfficial, contest ]);\r\n\r\n    const resultsButtonClass = 'resultsButton';\r\n    const refreshButtonClassName = concatClassNames(styles.resultsButton, resultsButtonClass);\r\n\r\n    return (\r\n        <div className={styles.tasksSideNavigation}>\r\n            <Heading type={HeadingType.secondary}>Tasks</Heading>\r\n            {renderTasksList()}\r\n            <LinkButton\r\n              type={LinkButtonType.secondary}\r\n              to={resultsLink}\r\n              text=\"Results\"\r\n              className={refreshButtonClassName}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContestTasksNavigation;\r\n","import { Route, Routes } from 'react-router-dom';\r\nimport * as React from 'react';\r\nimport HomePage from '../../pages/home/HomePage';\r\nimport LogoutPage from '../../pages/logout/LogoutPage';\r\nimport LoginPage from '../../pages/login/LoginPage';\r\nimport RegisterPage from '../../pages/register/RegisterPage';\r\nimport ProfilePage from '../../pages/profile/ProfilePage';\r\nimport SubmissionPage from '../../pages/submissions/SubmissionPage';\r\nimport ContestPage from '../../pages/contest/ContestPage';\r\nimport ContestResultsPage from '../../pages/contest-results/ContestResultsPage';\r\nimport ContestsPage from '../../pages/contests/ContestsPage';\r\nimport SubmissionDetailsPage from '../../pages/submission-details/SubmissionDetailsPage';\r\nimport AdministrationPage from '../../pages/administration/AdministrationPage';\r\nimport ContestRegisterPage from '../../pages/contest/ContestRegisterPage';\r\nimport styles from './PageContent.module.scss';\r\n\r\nconst routes = [\r\n    {\r\n        path: '/login',\r\n        Element: LoginPage,\r\n    },\r\n    {\r\n        path: '/register',\r\n        Element: RegisterPage,\r\n    },\r\n    {\r\n        path: '/logout',\r\n        Element: LogoutPage,\r\n    },\r\n    {\r\n        path: '/',\r\n        Element: HomePage,\r\n    },\r\n    {\r\n        path: '/profile',\r\n        Element: ProfilePage,\r\n    },\r\n    {\r\n        path: '/submissions/:submissionId',\r\n        Element: SubmissionPage,\r\n    },\r\n    {\r\n        path: '/submissions/:submissionId/details',\r\n        Element: SubmissionDetailsPage,\r\n    },\r\n    {\r\n        path: '/contests/:contestId/register/:participationType',\r\n        Element: ContestRegisterPage,\r\n    },\r\n    {\r\n        path: '/contests',\r\n        Element: ContestsPage,\r\n    },\r\n    {\r\n        path: '/contests/:contestId/:participationType/',\r\n        Element: ContestPage,\r\n    },\r\n    {\r\n        path: '/contests/:contestId/:participationType#:problemName',\r\n        Element: ContestPage,\r\n    },\r\n    {\r\n        path: '/contests/:contestId/:participationType/results/:resultType',\r\n        Element: ContestResultsPage,\r\n    },\r\n    { \r\n        path: '/administration',\r\n        Element: AdministrationPage,\r\n    },\r\n];\r\n\r\nconst PageContent = () => (\r\n    <main className={styles.main}>\r\n        <Routes>\r\n            {routes.map(({ path, Element }) => (\r\n                <Route key={path} path={path} element={<Element />} />\r\n            ))}\r\n        </Routes>\r\n    </main>\r\n);\r\n\r\nexport default PageContent;\r\n","import * as React from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useEffect } from 'react';\r\nimport Contest from '../../components/contests/contest/Contest';\r\nimport { makePrivate } from '../shared/make-private';\r\nimport { setLayout } from '../shared/set-layout';\r\nimport { useCurrentContest } from '../../hooks/use-current-contest';\r\nimport { ContestParticipationType } from '../../common/constants';\r\n\r\nconst ContestPage = () => {\r\n    const {\r\n        contestId,\r\n        participationType,\r\n        problemName\r\n    } = useParams();\r\n    const { actions: { start } } = useCurrentContest();\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const contest = {\r\n                id: Number(contestId),\r\n                isOfficial: participationType === ContestParticipationType.Compete,\r\n            };\r\n\r\n            await start(contest);\r\n        })();\r\n    }, [ contestId, participationType, start ]);\r\n\r\n    return (\r\n        <Contest />\r\n    );\r\n};\r\n\r\nexport default makePrivate(setLayout(ContestPage, true));\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;;;;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AAIA;AAKA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAwBA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AADA;AAYA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AA1GA;AASA;;;AATA;AA2GA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AADA;AAUA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAvBA;AAKA;;;AALA;AAwBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}