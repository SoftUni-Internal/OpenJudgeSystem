{"version":3,"file":"main.9974ab8ecdf7a7fbf9cc.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/submissions/use-submissions.tsx"],"sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { first } from 'lodash';\nimport { useLoading } from '../use-loading';\nimport { useHttp } from '../use-http';\nimport { useCurrentContest } from '../use-current-contest';\nimport { useProblems } from '../use-problems';\nimport { useProblemSubmissions } from './use-problem-submissions';\nimport { useUrls } from '../use-urls';\nimport { ISubmissionTypeType } from '../../common/types';\nimport { ISubmissionType, ITestRunType } from './types';\nimport { IHaveChildrenProps } from '../../components/common/Props';\n\ninterface ISubmissionsContext {\n    state: {\n        submissionCode: string;\n        selectedSubmissionType: ISubmissionTypeType | null;\n    };\n    actions: {\n        submit: () => Promise<void>\n        updateSubmissionCode: (code: string) => void;\n        selectSubmissionTypeById: (id: number) => void;\n    };\n}\n\nconst defaultState = {\n    state: {\n        submissionCode: `\nfunction hello() {\n    alert('Hello world!');\n}\n`,\n        selectedSubmissionType: null,\n    },\n};\n\nconst SubmissionsContext = createContext<ISubmissionsContext>(defaultState as ISubmissionsContext);\n\ninterface ISubmissionsProviderProps extends IHaveChildrenProps {\n}\n\nconst SubmissionsProvider = ({ children }: ISubmissionsProviderProps) => {\n    const [ selectedSubmissionType, setSelectedSubmissionType ] =\n        useState<ISubmissionTypeType | null>(defaultState.state.selectedSubmissionType);\n    const [ submissionCode, setSubmissionCode ] = useState<string>(defaultState.state.submissionCode);\n\n    const { getSubmitUrl } = useUrls();\n\n    const {\n        startLoading,\n        stopLoading,\n    } = useLoading();\n\n    const { state: { currentProblem } } = useProblems();\n    const { actions: { loadSubmissions } } = useProblemSubmissions();\n    const { state: { isOfficial } } = useCurrentContest();\n\n    const {\n        post: submitCode,\n        data: submitCodeResult,\n    } = useHttp(getSubmitUrl);\n\n    const submit = useCallback(async () => {\n        startLoading();\n        const { id } = selectedSubmissionType || {};\n        const { id: problemId } = currentProblem || {};\n\n        await submitCode({\n            ProblemId: problemId,\n            SubmissionTypeId: id,\n            Content: submissionCode,\n            Official: isOfficial,\n        });\n        stopLoading();\n    }, [ startLoading, selectedSubmissionType, currentProblem, submitCode, submissionCode, isOfficial, stopLoading ]);\n\n    const selectSubmissionTypeById = useCallback(\n        (id) => {\n            const { allowedSubmissionTypes } = currentProblem || {};\n\n            if (allowedSubmissionTypes == null) {\n                return;\n            }\n\n            const newSubmissionType = allowedSubmissionTypes.find((st) => st.id === id);\n\n            if (!newSubmissionType) {\n                return;\n            }\n\n            setSelectedSubmissionType(newSubmissionType);\n        },\n        [ currentProblem ],\n    );\n\n    const updateSubmissionCode = (code: string) => {\n        setSubmissionCode(code);\n    };\n\n    useEffect(\n        () => {\n            const { allowedSubmissionTypes } = currentProblem || {};\n            const submissionType = first(allowedSubmissionTypes);\n\n            if (submissionType) {\n                const { id } = submissionType;\n\n                selectSubmissionTypeById(id);\n            } else {\n                selectSubmissionTypeById(null);\n            }\n        },\n        [ currentProblem, selectSubmissionTypeById ],\n    );\n\n    useEffect(\n        () => {\n            (async () => {\n                await loadSubmissions();\n            })();\n        },\n        [ loadSubmissions, submitCodeResult ],\n    );\n\n    const value = {\n        state: {\n            submissionCode,\n            selectedSubmissionType,\n        },\n        actions: {\n            updateSubmissionCode,\n            selectSubmissionTypeById,\n            submit,\n        },\n    };\n\n    return (\n        <SubmissionsContext.Provider value={value}>\n            {children}\n        </SubmissionsContext.Provider>\n    );\n};\n\nconst useSubmissions = () => useContext(SubmissionsContext);\n\nexport {\n    useSubmissions,\n};\n\nexport type { ISubmissionType, ITestRunType };\n\nexport default SubmissionsProvider;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AAKA;AANA;AADA;AAWA;AACA;AAIA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAJA;AACA;AANA;AAWA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AALA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AArGA;AAKA;;;AALA;AACA;AAqGA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AACA;AAMA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}