{"version":3,"file":"main.152fce8cd4f62a717e94.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contest/Contest.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/use-current-contest.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\nimport Text, { TextType } from '../../guidelines/text/Text';\nimport Countdown, { ICountdownRemainingType, Metric } from '../../guidelines/countdown/Countdown';\n\nimport ContestTasksNavigation from '../contest-tasks-navigation/ContestTasksNavigation';\nimport SubmissionBox from '../submission-box/SubmissionBox';\nimport ContestProblemDetails from '../contest-problem-details/ContestProblemDetails';\n\nimport concatClassNames from '../../../utils/class-names';\n\nimport { convertToSecondsRemaining, convertToTwoDigitValues } from '../../../utils/dates';\nimport { useCurrentContest } from '../../../hooks/use-current-contest';\n\nimport styles from './Contest.module.scss';\n\nconst Contest = () => {\n    const {\n        state: {\n            contest,\n            score,\n            maxScore,\n        },\n    } = useCurrentContest();\n\n    const navigationContestClass = 'navigationContest';\n    const navigationContestClassName = concatClassNames(navigationContestClass);\n\n    const submissionBoxClass = 'submissionBox';\n    const submissionBoxClassName = concatClassNames(submissionBoxClass);\n\n    const problemInfoClass = 'problemInfo';\n    const problemInfoClassName = concatClassNames(problemInfoClass);\n\n    const scoreText = useMemo(\n        () => `${score}/${maxScore}`,\n        [ maxScore, score ],\n    );\n\n    const scoreClassName = 'score';\n    const renderScore = useCallback(\n        () => {\n            if (scoreText === '0/0') {\n                return null;\n            }\n\n            return (\n                <p className={scoreClassName}>\n                    Score:\n                    {' '}\n                    <Text type={TextType.Bold}>\n                        {scoreText}\n                    </Text>\n                </p>\n            );\n        },\n        [ scoreText ],\n    );\n\n    const remainingTimeClassName = 'remainingTime';\n    const renderCountdown = useCallback(\n        (remainingTime: ICountdownRemainingType) => {\n            const { hours, minutes, seconds } = convertToTwoDigitValues(remainingTime);\n\n            return (\n                <>\n                    <p className={remainingTimeClassName}>\n                        Remaining time:\n                        {' '}\n                        <Text type={TextType.Bold}>\n                            {hours}\n                            :\n                            {minutes}\n                            :\n                            {seconds}\n                        </Text>\n                    </p>\n                </>\n            );\n        },\n        [],\n    );\n\n    const renderTimeRemaining = useCallback(\n        () => {\n            const { endTime } = contest || {};\n\n            if (!endTime) {\n                return null;\n            }\n\n            const duration = convertToSecondsRemaining(new Date(endTime));\n\n            return (\n                <Countdown renderRemainingTime={renderCountdown} duration={duration} metric={Metric.seconds} />\n            );\n        },\n        [ contest, renderCountdown ],\n    );\n\n    const secondaryHeadingClassName = useMemo(\n        () => concatClassNames(styles.contestHeading, styles.contestInfoContainer),\n        [],\n    );\n\n    return (\n        <>\n            <div className={styles.headingContest}>\n                <Heading\n                  type={HeadingType.primary}\n                  className={styles.contestHeading}\n                >\n                    {contest?.name}\n                </Heading>\n                <Heading type={HeadingType.secondary} className={secondaryHeadingClassName}>\n                    {renderTimeRemaining()}\n                    {renderScore()}\n                </Heading>\n            </div>\n\n            <div className={styles.contestWrapper}>\n                <div className={navigationContestClassName}>\n                    <ContestTasksNavigation />\n                </div>\n                <div className={submissionBoxClassName}>\n                    <SubmissionBox />\n                </div>\n                <div className={problemInfoClassName}>\n                    <ContestProblemDetails />\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Contest;\n","import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\n\nimport { isNil, sum } from 'lodash';\nimport { IContestType, IStartParticipationResponseType } from '../common/types';\n\nimport { IHaveChildrenProps } from '../components/common/Props';\n\nimport { useLoading } from './use-loading';\nimport { useHttp } from './use-http';\nimport { useUrls } from './use-urls';\nimport { UrlType } from '../common/common-types';\n\ninterface IStartContestArgs {\n    id: number;\n    isOfficial: boolean;\n}\n\ninterface ICurrentContestContext {\n    state: {\n        contest: IContestType | null;\n        score: number;\n        maxScore: number;\n        isOfficial: boolean;\n    };\n    actions: {\n        start: (info: IStartContestArgs) => void;\n    };\n}\n\nconst defaultState = {\n    state: {\n        contest: null,\n        score: 0,\n        maxScore: 0,\n        isOfficial: false,\n    },\n};\n\nconst CurrentContestsContext = createContext<ICurrentContestContext>(defaultState as ICurrentContestContext);\n\ninterface ICurrentContestsProviderProps extends IHaveChildrenProps {\n}\n\ninterface IContestToStartType {\n    id: number;\n    isOfficial: boolean;\n}\n\nconst CurrentContestsProvider = ({ children }: ICurrentContestsProviderProps) => {\n    const [ contest, setContest ] = useState<IContestType | null>(defaultState.state.contest);\n    const [ score, setScore ] = useState(defaultState.state.score);\n    const [ maxScore, setMaxScore ] = useState(defaultState.state.maxScore);\n    const [ isOfficial, setIsOfficial ] = useState(defaultState.state.isOfficial);\n    const [ contestToStart, setContestToStart ] = useState<IContestToStartType | null>(null);\n\n    const {\n        startLoading,\n        stopLoading,\n    } = useLoading();\n\n    const { getStartContestParticipationUrl } = useUrls();\n\n    const {\n        get: startContest,\n        data: startContestData,\n    } = useHttp(getStartContestParticipationUrl as UrlType, contestToStart);\n\n    const start = useCallback((obj) => {\n        setContestToStart(obj);\n    }, []);\n\n    useEffect(() => {\n        if (isNil(startContestData)) {\n            return;\n        }\n\n        const responseData = startContestData as IStartParticipationResponseType;\n        const { contest: newContest, contestIsCompete } = responseData;\n\n        setContest(newContest);\n        setIsOfficial(contestIsCompete);\n    }, [ startContestData ]);\n\n    useEffect(() => {\n        if (isNil(contestToStart)) {\n            return;\n        }\n\n        (async () => {\n            startLoading();\n            await startContest();\n            stopLoading();\n        })();\n    }, [ contestToStart, startContest, startLoading, stopLoading ]);\n\n    useEffect(\n        () => {\n            const { problems } = contest || {};\n\n            if (isNil(problems)) {\n                return;\n            }\n\n            setScore(sum(problems.map((p) => p.points)));\n            setMaxScore(sum(problems.map((p) => p.maximumPoints)));\n        },\n        [ contest ],\n    );\n\n    const value = {\n        state: {\n            contest,\n            score,\n            maxScore,\n            isOfficial,\n        },\n        actions: { start },\n    };\n\n    return (\n        <CurrentContestsContext.Provider value={value}>\n            {children}\n        </CurrentContestsContext.Provider>\n    );\n};\nconst useCurrentContest = () => useContext(CurrentContestsContext);\n\nexport default CurrentContestsProvider;\n\nexport {\n    useCurrentContest,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAQA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AADA;AAcA;AAIA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAdA;AA2BA;AACA;AAtHA;AAOA;;;AAPA;AAuHA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxIA;AAEA;AAKA;AACA;AACA;;AAoBA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AASA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAPA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AA7EA;AAUA;;;AAVA;AACA;AA4EA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}