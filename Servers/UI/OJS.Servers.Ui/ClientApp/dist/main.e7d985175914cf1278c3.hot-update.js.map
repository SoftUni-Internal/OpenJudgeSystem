{"version":3,"file":"main.e7d985175914cf1278c3.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contest/Contest.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { addMilliseconds } from 'date-fns';\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\nimport Text, { TextType } from '../../guidelines/text/Text';\nimport Countdown, { ICountdownRemainingType, Metric } from '../../guidelines/countdown/Countdown';\n\nimport ContestTasksNavigation from '../contest-tasks-navigation/ContestTasksNavigation';\nimport SubmissionBox from '../submission-box/SubmissionBox';\nimport ContestProblemDetails from '../contest-problem-details/ContestProblemDetails';\n\nimport concatClassNames from '../../../utils/class-names';\n\nimport { convertToSecondsRemaining, convertToTwoDigitValues } from '../../../utils/dates';\nimport { useCurrentContest } from '../../../hooks/use-current-contest';\n\nimport styles from './Contest.module.scss';\n\nconst Contest = () => {\n    const {\n        state: {\n            contest,\n            score,\n            maxScore,\n            remainingTimeInMilliseconds,\n        },\n    } = useCurrentContest();\n\n    const navigationContestClass = 'navigationContest';\n    const navigationContestClassName = concatClassNames(navigationContestClass);\n\n    const submissionBoxClass = 'submissionBox';\n    const submissionBoxClassName = concatClassNames(submissionBoxClass);\n\n    const problemInfoClass = 'problemInfo';\n    const problemInfoClassName = concatClassNames(problemInfoClass);\n\n    const scoreText = useMemo(\n        () => `${score}/${maxScore}`,\n        [ maxScore, score ],\n    );\n\n    const scoreClassName = 'score';\n    const renderScore = useCallback(\n        () => {\n            if (scoreText === '0/0') {\n                return null;\n            }\n\n            return (\n                <p className={scoreClassName}>\n                    Score:\n                    {' '}\n                    <Text type={TextType.Bold}>\n                        {scoreText}\n                    </Text>\n                </p>\n            );\n        },\n        [ scoreText ],\n    );\n\n    const remainingTimeClassName = 'remainingTime';\n    const renderCountdown = useCallback(\n        (remainingTime: ICountdownRemainingType) => {\n            const { hours, minutes, seconds } = convertToTwoDigitValues(remainingTime);\n\n            return (\n                <>\n                    <p className={remainingTimeClassName}>\n                        Remaining time:\n                        {' '}\n                        <Text type={TextType.Bold}>\n                            {hours}\n                            :\n                            {minutes}\n                            :\n                            {seconds}\n                        </Text>\n                    </p>\n                </>\n            );\n        },\n        [],\n    );\n\n    const renderTimeRemaining = useCallback(\n        () => {\n            if (!remainingTimeInMilliseconds) {\n                return null;\n            }\n            \n            const a= addMilliseconds(new Date(),remainingTimeInMilliseconds).getTime();\n\n            return (\n                <Countdown renderRemainingTime={renderCountdown} duration={a} metric={Metric.seconds} />\n            );\n        },\n        [ remainingTimeInMilliseconds , renderCountdown ],\n    );\n\n    const secondaryHeadingClassName = useMemo(\n        () => concatClassNames(styles.contestHeading, styles.contestInfoContainer),\n        [],\n    );\n\n    return (\n        <>\n            <div className={styles.headingContest}>\n                <Heading\n                  type={HeadingType.primary}\n                  className={styles.contestHeading}\n                >\n                    {contest?.name}\n                </Heading>\n                <Heading type={HeadingType.secondary} className={secondaryHeadingClassName}>\n                    {renderTimeRemaining()}\n                    {renderScore()}\n                </Heading>\n            </div>\n\n            <div className={styles.contestWrapper}>\n                <div className={navigationContestClassName}>\n                    <ContestTasksNavigation />\n                </div>\n                <div className={submissionBoxClassName}>\n                    <SubmissionBox />\n                </div>\n                <div className={problemInfoClassName}>\n                    <ContestProblemDetails />\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Contest;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAQA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AADA;AAcA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAdA;AA2BA;AACA;AArHA;AAQA;;;AARA;AAsHA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}