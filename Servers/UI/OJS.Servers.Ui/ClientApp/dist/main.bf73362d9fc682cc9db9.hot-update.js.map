{"version":3,"file":"main.bf73362d9fc682cc9db9.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/submission-box/SubmissionBox.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallback } from 'react';\n\nimport { isNil } from 'lodash';\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\nimport CodeEditor from '../../code-editor/CodeEditor';\nimport List, { Orientation } from '../../guidelines/lists/List';\nimport { Button } from '../../guidelines/buttons/Button';\nimport ExecutionTypeSelector from '../execution-type-selector/ExecutionTypeSelector';\n\nimport { ISubmissionTypeType } from '../../../common/types';\n\nimport { useSubmissions } from '../../../hooks/submissions/use-submissions';\nimport { useProblems } from '../../../hooks/use-problems';\n\nimport styles from './SubmissionBox.module.scss';\nimport concatClassNames from '../../../utils/class-names';\n\nconst SubmissionBox = () => {\n    const { actions: { selectSubmissionTypeById } } = useSubmissions();\n    const {\n        state: {\n            submissionCode,\n            selectedSubmissionType,\n        },\n        actions: {\n            submit,\n            updateSubmissionCode,\n        },\n    } = useSubmissions();\n\n    const { state: { currentProblem } } = useProblems();\n    const { allowedSubmissionTypes } = currentProblem || {};\n\n    const handleCodeChanged = useCallback(\n        (newValue: string) => {\n            updateSubmissionCode(newValue);\n        },\n        [ updateSubmissionCode ],\n    );\n\n    const handleSelectExecutionType = useCallback(\n        (id) => {\n            selectSubmissionTypeById(id);\n        },\n        [ selectSubmissionTypeById ],\n    );\n\n    const renderSubmissionTypesSelectors = useCallback(\n        (submissionType: ISubmissionTypeType) => {\n            const { id, name } = submissionType;\n            const isSelected = allowedSubmissionTypes && allowedSubmissionTypes.length === 1\n                ? true\n                : submissionType.isSelectedByDefault;\n\n            return (\n                <ExecutionTypeSelector\n                  id={id}\n                  value={name}\n                  isSelected={isSelected}\n                  onSelect={() => handleSelectExecutionType(id)}\n                />\n            );\n        },\n        [ allowedSubmissionTypes, handleSelectExecutionType ],\n    );\n\n    const renderSubmissionTypesSelectorsList = useCallback(\n        () => {\n            if (isNil(currentProblem)) {\n                return null;\n            }\n\n            if (isNil(allowedSubmissionTypes)) {\n                return null;\n            }\n\n            return (\n                <List\n                  className={styles.submissionTypesList}\n                  values={allowedSubmissionTypes}\n                  itemFunc={renderSubmissionTypesSelectors}\n                  orientation={Orientation.horizontal}\n                  wrap\n                />\n            );\n        },\n        [ allowedSubmissionTypes, currentProblem, renderSubmissionTypesSelectors ],\n    );\n\n    const handleOnSubmit = useCallback(async () => {\n        await submit();\n        updateSubmissionCode('');\n    }, [ submit, updateSubmissionCode ]);\n\n    const taskText = 'Task: ';\n    const executionTypeListClass = 'executionTypeLis';\n    const executionTypeListClassName = concatClassNames(\n        styles.executionTypeSelectors,\n        executionTypeListClass,\n    );\n\n    return (\n        <div className={styles.contestMainWrapper}>\n            <Heading\n              type={HeadingType.secondary}\n              className={styles.heading}\n            >\n                {taskText}\n                <span className={styles.taskName}>\n                    {currentProblem?.name}\n                </span>\n            </Heading>\n            <div className={styles.contestInnerLayout}>\n                <div className={styles.editorAndProblemControlsWrapper}>\n                    <CodeEditor\n                      selectedSubmissionType={selectedSubmissionType!}\n                      code={submissionCode}\n                      onCodeChange={handleCodeChanged}\n                    />\n                    <div className={styles.contestSubmitControlsWrapper}>\n                        <div className={executionTypeListClassName}>\n                            {renderSubmissionTypesSelectorsList()}\n                        </div>\n                        <div className={styles.submitButtonContainer}>\n                            <Button\n                              text=\"Submit\"\n                              onClick={handleOnSubmit}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SubmissionBox;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAIA;AAEA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAQA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAKA;AACA;AAAA;AAEA;AACA;AAFA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAVA;AAAA;AAAA;AAAA;AAAA;AAgCA;AACA;AAtHA;AACA;;;AADA;AAuHA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}