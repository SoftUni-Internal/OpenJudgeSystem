{"version":3,"file":"main.b3be236503a0788ab9b4.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/common/use-url-params.tsx"],"sourcesContent":["import React, { createContext, useCallback, useContext, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { IHaveChildrenProps } from '../../components/common/Props';\nimport { IDictionary, IUrlParam } from '../../common/common-types';\n\ninterface IUrlParamsContext {\n    state: \n        {\n        params: IUrlParam[];\n    };\n    actions: {\n        setParam: (key: string, value: any) => void;\n        unsetParam: (key: string) => void;\n        clearParams: () => void;\n    };\n}\n\ninterface IUrlParamsProviderProps extends IHaveChildrenProps {\n}\n\nconst defaultState = { state: {} };\n\nconst UrlParamsContext = createContext<IUrlParamsContext>(defaultState as IUrlParamsContext);\n\nconst searchParamsToParams = (searchParams: URLSearchParams) => {\n    const params = {} as IDictionary<string[]>;\n\n    searchParams.forEach((value, key) => {\n        if (!params[key]) {\n            params[key] = [];\n        }\n\n        params[key].push(value);\n    });\n\n    return Object.keys(params)\n        .map((key) => {\n            const value = params[key].length === 1\n                ? params[key][0]\n                : params[key];\n\n            return { key, value };\n        });\n};\n\nconst UrlParamsProvider = ({ children }: IUrlParamsProviderProps) => {\n    const [ searchParams, setSearchParams ] = useSearchParams();\n\n    const params = useMemo(\n        () => searchParamsToParams(searchParams),\n        [ searchParams ],\n    );\n\n    const setParam = useCallback(\n        (key: string, value: any) => {\n            const keyToLower = key.toLowerCase();\n\n            if (searchParams.has(keyToLower) || searchParams.has(key)) {\n                searchParams.delete(key);\n                searchParams.delete(keyToLower);\n            }\n\n            searchParams.append(keyToLower, value);\n\n            setSearchParams(searchParams);\n        },\n        [ searchParams, setSearchParams ],\n    );\n\n    const unsetParam = useCallback(\n        (key: string) => {\n            searchParams.delete(key);\n            searchParams.delete(key.toLowerCase());\n            setSearchParams(searchParams);\n        },\n        [ searchParams, setSearchParams ],\n    );\n    \n    const clearParams = useCallback(\n        () => {\n            setSearchParams({});\n        },\n        [ setSearchParams ],\n    );\n\n    const value = {\n        state: { params },\n        actions: {\n            setParam,\n            unsetParam,\n            clearParams,\n        },\n    };\n\n    return (\n        <UrlParamsContext.Provider value={value}>\n            {children}\n        </UrlParamsContext.Provider>\n    );\n};\n\n\nconst useUrlParams = () => useContext(UrlParamsContext);\n\nexport default UrlParamsProvider;\n\nexport {\n    useUrlParams,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAmBA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAvDA;AACA;;;AADA;AACA;AAwDA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}