{"version":3,"file":"main.c6e727dab0063c566e3f.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/use-contest-strategy-filters.tsx"],"sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { isNil } from 'lodash';\nimport { FaDove } from 'react-icons/all';\nimport { IHaveChildrenProps } from '../components/common/Props';\nimport { IContestStrategyFilter } from '../common/contest-types';\nimport { useLoading } from './use-loading';\nimport { useUrls } from './use-urls';\nimport { useHttp } from './use-http';\n\ninterface IContestStrategyFiltersContext {\n    state: {\n        strategies: IContestStrategyFilter[];\n        isLoaded: boolean,\n    };\n    actions: {\n        load: () => Promise<void>;\n    };\n}\n\nconst defaultState = { state: { strategies: [] as IContestStrategyFilter[] } };\n\ninterface IContestStrategyFiltersProviderProps extends IHaveChildrenProps {\n}\n\nconst ContestStrategyFiltersContext = createContext<IContestStrategyFiltersContext>(defaultState as IContestStrategyFiltersContext);\n\nconst ContestStrategyFiltersProvider = ({ children }: IContestStrategyFiltersProviderProps) => {\n    const [ strategies, setStrategies ] = useState(defaultState.state.strategies);\n\n    const { startLoading, stopLoading } = useLoading();\n    const { getAllContestStrategyFiltersUrl } = useUrls();\n\n    const {\n        get,\n        data,\n        isSuccess,\n    } = useHttp(getAllContestStrategyFiltersUrl);\n\n    const load = useCallback(\n        async () => {\n            startLoading();\n            await get();\n            stopLoading();\n        },\n        [ get, startLoading, stopLoading ],\n    );\n\n    useEffect(\n        () => {\n            if (isNil(data)) {\n                return;\n            }\n\n            setStrategies(data);\n        },\n        [ data ],\n    );\n\n    const value = {\n        state: {\n            strategies,\n            isLoaded: isSuccess,\n        },\n        actions: { load },\n    } as IContestStrategyFiltersContext;\n\n    return (\n        <div className=\"hi\">\n            <ContestStrategyFiltersContext.Provider value={value}>\n                {children}\n            </ContestStrategyFiltersContext.Provider>\n        </div>\n    );\n};\n\nconst useContestStrategyFilters = () => useContext(ContestStrategyFiltersContext);\n\nexport default ContestStrategyFiltersProvider;\n\nexport {\n    useContestStrategyFilters,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AACA;AACA;;AAYA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AALA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAhDA;AAGA;;;AAHA;AACA;AAgDA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}