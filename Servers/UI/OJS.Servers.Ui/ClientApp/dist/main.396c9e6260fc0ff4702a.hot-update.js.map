{"version":3,"file":"main.396c9e6260fc0ff4702a.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/pages/contest/ContestRegisterPage.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useMemo } from 'react';\nimport { useParams } from 'react-router';\nimport { useNavigate } from 'react-router-dom';\nimport { isNil } from 'lodash';\nimport { makePrivate } from '../shared/make-private';\nimport { setLayout } from '../shared/set-layout';\nimport { useCurrentContest } from '../../hooks/use-current-contest';\nimport ContestPasswordForm from '../../components/contests/contest-password-form/ContestPasswordForm';\nimport { ContestParticipationType } from '../../common/constants';\nimport { useUrlParams } from '../../hooks/common/use-url-params';\nimport styles from './ContestRegisterPage.module.scss';\n\nconst ContestRegisterPage = () => {\n    const {\n        contestId,\n        participationType,\n    } = useParams();\n    \n    const navigate = useNavigate();\n\n    const contestIdToNumber = useMemo(() => Number(contestId), [ contestId ]);\n    const isParticipationOfficial = useMemo(() => participationType === ContestParticipationType.Compete, [ participationType ]);\n    const internalContest = useMemo(\n        () => ({\n            id: contestIdToNumber,\n            isOfficial: isParticipationOfficial,\n        })\n        , [ contestIdToNumber, isParticipationOfficial ],\n    );\n    \n    const {\n        state: {\n            requirePassword,\n            isPasswordValid,\n        },\n        actions: { register },\n    } = useCurrentContest();\n\n    const doesNotRequirePassword = useMemo(() => !isNil(requirePassword) && !requirePassword, [ requirePassword ]);\n    const isSubmittedPasswordValid = useMemo(() => !isNil(isPasswordValid) && isPasswordValid, [ isPasswordValid ]);\n\n    useEffect(() => {\n        (async () => {\n            \n            \n            await register(internalContest);\n        })();\n    }, [ internalContest, contestIdToNumber, isParticipationOfficial, participationType, register ]);\n\n    useEffect(() => {\n        if (doesNotRequirePassword || isSubmittedPasswordValid) {\n            navigate(`/contests/${contestId}/${participationType}`);\n        }\n    }, [ contestId, doesNotRequirePassword, isSubmittedPasswordValid, participationType, navigate ]);\n\n    return (\n        <div className={styles.container}>\n            {\n                requirePassword\n                    ? (\n                        <ContestPasswordForm\n                          id={contestIdToNumber}\n                          isOfficial={isParticipationOfficial}\n                        />\n                    )\n                    : <p>No password required. Redirecting to contest.</p>\n            }\n        </div>\n    );\n};\n\nexport default makePrivate(setLayout(ContestRegisterPage));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAKA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AA1DA;AAIA;;;AAJA;AA2DA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}