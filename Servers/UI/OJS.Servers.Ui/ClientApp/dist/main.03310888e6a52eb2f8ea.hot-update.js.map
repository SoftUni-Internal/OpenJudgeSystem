{"version":3,"file":"main.03310888e6a52eb2f8ea.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contest-tasks-navigation/ContestTasksNavigation.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\nimport List, { ListType } from '../../guidelines/lists/List';\nimport { Button, ButtonState, ButtonType, LinkButton, LinkButtonType } from '../../guidelines/buttons/Button';\n\nimport concatClassNames from '../../../utils/class-names';\nimport { IProblemType } from '../../../common/types';\nimport { ContestParticipationType, ContestResultType } from '../../../common/constants';\n\nimport { useProblems } from '../../../hooks/use-problems';\nimport { useCurrentContest } from '../../../hooks/use-current-contest';\n\nimport SubmissionResultPointsLabel from '../../submissions/submission-result-points-label/SubmissionResultPointsLabel';\n\nimport styles from './ContestTasksNavigation.module.scss';\n\nconst compareByOrderBy = (p1: IProblemType, p2: IProblemType) => p1.orderBy - p2.orderBy;\n\nconst ContestTasksNavigation = () => {\n    const [ resultsLink, setResultsLink ] = useState('');\n\n    const {\n        state: {\n            currentProblem,\n            problems,\n        },\n        actions: { selectProblemById },\n    } = useProblems();\n\n    const {\n        state: {\n            contest,\n            isOfficial,\n        },\n    } = useCurrentContest();\n\n    const renderTask = useCallback(\n        (problem: IProblemType) => {\n            const { id: currentId } = currentProblem || {};\n            const { id } = problem;\n\n            const selectedClassName = currentId === id\n                ? styles.selected\n                : '';\n\n            const className = concatClassNames(\n                styles.taskSideNavigationItem,\n                selectedClassName,\n            );\n\n            return (\n                <>\n                    {/* <LinkButton */}\n                    {/*    // onClick={() => selectProblemById(problem.id)} */}\n                    {/*    state={ButtonState.enabled} */}\n                    {/*    className={className} */}\n                    {/*    type={LinkButtonType.plain} */}\n                    {/*    to={`/contests/${contest?.id}/${participationType}/#${problem.name}`} */}\n                    {/* > */}\n                    <Button\n                      onClick={() => selectProblemById(problem.id)}\n                      className={className}\n                      type={ButtonType.plain}\n                    >\n                        {problem.name}\n                    </Button>\n                    <SubmissionResultPointsLabel\n                      points={problem.points}\n                      maximumPoints={problem.maximumPoints}\n                      isProcessed={false}\n                    />\n                </>\n            );\n        },\n        [ currentProblem, selectProblemById ],\n    );\n    const sideBarTasksList = 'all-tasks-list';\n    const sideBarTasksListClassName = concatClassNames(styles.tasksListSideNavigation, sideBarTasksList);\n    const renderTasksList = useCallback(\n        () => (\n            <List\n              values={problems.sort(compareByOrderBy)}\n              itemFunc={renderTask}\n              className={sideBarTasksListClassName}\n              itemClassName={styles.taskListItem}\n              type={ListType.numbered}\n            />\n        ),\n        [ problems, renderTask, sideBarTasksListClassName ],\n    );\n\n    useEffect(() => {\n        const participationType = isOfficial\n            ? ContestParticipationType.Compete\n            : ContestParticipationType.Practice;\n        const newResultsLink = `/contests/${contest?.id}/${participationType}/results/${ContestResultType.Simple}`;\n\n        setResultsLink(newResultsLink);\n    }, [ isOfficial, contest ]);\n\n    const resultsButtonClass = 'resultsButton';\n    const refreshButtonClassName = concatClassNames(styles.resultsButton, resultsButtonClass);\n\n    return (\n        <div className={styles.tasksSideNavigation}>\n            <Heading type={HeadingType.secondary}>Tasks</Heading>\n            {renderTasksList()}\n            <LinkButton\n              type={LinkButtonType.secondary}\n              to={resultsLink}\n              text=\"Results\"\n              className={refreshButtonClassName}\n            />\n        </div>\n    );\n};\n\nexport default ContestTasksNavigation;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAEA;;;;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAAA;AACA;AAAA;AAEA;AAIA;AAKA;AACA;AASA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAfA;AAsBA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AADA;AAYA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAlGA;AASA;;;AATA;AAmGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}