{"version":3,"file":"main.cf8028b2007b5a535af7.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/utils/dates.ts"],"sourcesContent":["import { intervalToDuration } from 'date-fns';\nimport moment from 'moment';\n\nconst defaultDateTimeFormat = 'HH:MM, DD/MMM/yyyy';\n\nconst calculateTimeUntil = (date: Date) => intervalToDuration({\n    start: new Date(),\n    end: date,\n});\n\nconst formatDate = (\n    date: Date,\n    formatString = defaultDateTimeFormat,\n) => (moment().diff(date, 'days') > 3\n    ? moment(date).format(formatString)\n    : moment(date).fromNow());\n\nconst convertToSecondsRemaining = (date: Date) => {\n    const { days, hours, minutes, seconds } = intervalToDuration({\n        start: new Date(),\n        end: date,\n    });\n\n    const daysRemaining = days ?? 0;\n\n    const hoursRemaining = daysRemaining * 24 + (hours ?? 0);\n    const minutesRemaining = hoursRemaining * 60 + (minutes ?? 0);\n\n    return minutesRemaining * 60 + (seconds ?? 0);\n};\n\nconst secondsToFullTime = (duration: number) => {\n    const { days: daysInitial, hours: hoursInitial, minutes: minutesInitial, seconds: secondsInitial } =\n        intervalToDuration({ start: 0, end: duration * 1000 });\n\n    const days = daysInitial ?? 0;\n\n    const hours = hoursInitial ?? 0;\n\n    const minutes = minutesInitial ?? 0;\n\n    const seconds = secondsInitial ?? 0;\n\n    return { days, hours, minutes, seconds };\n};\n\ninterface IConvertToTwoDigitValuesParamType {\n    hours: number;\n    minutes: number;\n    seconds: number\n}\n\nconst convertToTwoDigitValues = ({\n    hours: hoursValue,\n    minutes: minutesValue,\n    seconds: secondsValue,\n}: IConvertToTwoDigitValuesParamType) => {\n    const hours = hoursValue >= 10\n        ? hoursValue.toString()\n        : `0${hoursValue}`;\n\n    const minutes = minutesValue >= 10\n        ? minutesValue.toString()\n        : `0${minutesValue}`;\n\n    const seconds = secondsValue >= 10\n        ? secondsValue.toString()\n        : `0${secondsValue}`;\n\n    return {\n        hours,\n        minutes,\n        seconds,\n    };\n};\n\nexport default {\n    formatDate,\n    secondsToFullTime,\n    calculateTimeUntil,\n    convertToSecondsRemaining,\n    convertToTwoDigitValues,\n};\n\nexport {\n    formatDate,\n    secondsToFullTime,\n    calculateTimeUntil,\n    convertToSecondsRemaining,\n    convertToTwoDigitValues,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAIA;AAAA;AAAA;AACA;AAIA;AAIA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}