{"version":3,"file":"main.93ed0a03e233eb67042f.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/guidelines/trees/Tree.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { MdChevronRight, MdExpandMore } from 'react-icons/md';\nimport { isArray, isEmpty, isNil } from 'lodash';\nimport defaultKeyFunc from '../../common/colcollection-key-utils';\n\ninterface ITreeItemType {\n    id: string,\n    name: string,\n    parentId?: string,\n    children?: ITreeItemType[],\n}\n\ninterface ITreeProps<TValue> {\n    items: ITreeItemType[];\n    itemFunc: (value: TValue) => React.ReactElement;\n    keyFunc?: (value: TValue) => string,\n    onTreeLabelClick: (node: ITreeItemType) => void;\n    defaultSelected?: string;\n    defaultExpanded?: string[];\n}\n\nconst Tree = <TValue extends unknown>({\n    items,\n    itemFunc,\n    keyFunc = defaultKeyFunc,\n    onTreeLabelClick,\n    defaultSelected,\n    defaultExpanded = [],\n}: ITreeProps<TValue>) => {\n    const [ expanded, setExpanded ] = useState([] as string[]);\n    const [ selected, setSelected ] = useState('');\n\n    const handleTreeItemClick = useCallback(\n        (node: ITreeItemType) => {\n            const id = node.id.toString();\n            let newExpanded = Array.from(expanded);\n\n            if (expanded.includes(id)) {\n                newExpanded = newExpanded.filter((e) => e !== id);\n            } else {\n                newExpanded.push(id);\n            }\n\n            setExpanded(newExpanded);\n        },\n        [ expanded, setExpanded ],\n    );\n\n    const handleLabelClick = useCallback(\n        (node: ITreeItemType) => {\n            setSelected(node.id.toString());\n\n            onTreeLabelClick(node);\n        },\n        [ onTreeLabelClick ],\n    );\n\n    useEffect(\n        () => {\n            if (isEmpty(selected) && defaultSelected) {\n                setSelected(defaultSelected);\n            }\n        },\n        [ defaultSelected, selected ],\n    );\n\n    useEffect(\n        () => {\n            if (isEmpty(expanded) && !isEmpty(defaultExpanded)) {\n                setExpanded(defaultExpanded);\n            }\n        },\n        [ defaultExpanded, expanded ],\n    );\n    \n    const renderTree = useCallback((node: ITreeItemType) => (\n        <TreeItem\n            key={node.id}\n            nodeId={node.id.toString()}\n            label={node.name}\n            onClick={() => handleTreeItemClick(node)}\n            onLabelClick={() => handleLabelClick(node)}\n        >\n            {isArray(node.children)\n                ? node.children.map((child) => renderTree(child))\n                : null}\n        </TreeItem>\n    ), [ handleLabelClick, handleTreeItemClick ]);\n\n    // const renderTree = useCallback((node: ITreeItemType) => (\n    //     <div className={categoriesTreeClassName}>\n    //         <div className={treeTooltipClassName}>\n    //             <div className={treeTooltipElementClassName}\n    //                  key={node.id}>\n    //                 {node.name}\n    //             </div>\n    //         </div>\n    //         <TreeItem\n    //             key={node.id}\n    //             className={treeElementClassName}\n    //             nodeId={node.id.toString()}\n    //             label={node.name}\n    //             onClick={() => handleTreeItemClick(node)}\n    //             onLabelClick={() => handleLabelClick(node)}\n    //         >\n    //             {isArray(node.children)\n    //                 ? node.children.map((child) => renderTree(child))\n    //                 : null}\n    //         </TreeItem>\n    //     </div>\n    // ), [ categoriesTreeClassName, treeTooltipClassName, treeTooltipElementClassName,\n    //     treeElementClassName, handleTreeItemClick, handleLabelClick, renderTree ]);\n\n    const renderItems = useCallback(\n        () => {\n            if (isNil(items) || isEmpty(items)) {\n                return null;\n            }\n\n            return items.map((value) => (\n                <TreeItem key={keyFunc(value)}>\n                    {itemFunc(value)}\n                </TreeItem>\n            ));\n        },\n        [ itemFunc, keyFunc ],\n    );\n    \n    const renderTreeView = (treeItems: ITreeItemType[]) => treeItems.map((c) => renderTree(c));\n\n    return (\n        <TreeView\n            aria-label=\"rich object\"\n            defaultCollapseIcon={<MdExpandMore/>}\n            defaultExpandIcon={<MdChevronRight/>}\n            selected={selected}\n            expanded={expanded}\n        >\n            {/* <div className={treeTooltipClassName}> {renderTreeView(items)}</div> */}\n            {renderTreeView(items)}\n        </TreeView>\n    );\n};\n\nexport default Tree;\n\nexport type {\n    ITreeItemType,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;AAkBA;AAOA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAQA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AADA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AA1HA;AACA;AADA;AA2HA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}