{"version":3,"file":"main.ca7822fc4c69764e2aaf.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/use-current-contest.tsx"],"sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { isNil, sum } from 'lodash';\nimport { IContestType, IRegisterForContestResponseType, IStartParticipationResponseType } from '../common/types';\nimport { IHaveChildrenProps } from '../components/common/Props';\nimport { UrlType } from '../common/common-types';\nimport { IRegisterForContestUrlParams, ISubmitContestPasswordUrlParams } from '../common/url-types';\nimport { useLoading } from './use-loading';\nimport { useHttp } from './use-http';\nimport { useUrls } from './use-urls';\n\ninterface IStartContestArgs {\n    id: number;\n    isOfficial: boolean;\n}\n\ninterface ISubmitContestPasswordArgs {\n    id: number;\n    isOfficial: boolean;\n    password: string;\n}\n\ninterface ICurrentContestContext {\n    state: {\n        contest: IContestType | null;\n        contestPassword: string | null;\n        score: number;\n        maxScore: number;\n        isOfficial: boolean;\n        requirePassword: boolean | null;\n        submitContestPasswordErrorMessage: string | null;\n        isPasswordValid: boolean | null;\n        remainingTimeInMilliseconds: number;\n    };\n    actions: {\n        setContestPassword: (password: string) => void;\n        start: (info: IStartContestArgs) => void;\n        register: (info: IStartContestArgs) => void;\n        submitPassword: (info: ISubmitContestPasswordArgs) => void;\n    };\n}\n\nconst defaultState = {\n    state: {\n        contest: null,\n        contestPassword: null,\n        score: 0,\n        maxScore: 0,\n        isOfficial: false,\n        requirePassword: false,\n        remainingTimeInMilliseconds: 0.0,\n    },\n};\n\nconst CurrentContestsContext = createContext<ICurrentContestContext>(defaultState as ICurrentContestContext);\n\ninterface ICurrentContestsProviderProps extends IHaveChildrenProps {\n}\n\ninterface IContestToStartType {\n    id: number;\n    isOfficial: boolean;\n}\n\nconst CurrentContestsProvider = ({ children }: ICurrentContestsProviderProps) => {\n    const [ contest, setContest ] = useState<IContestType | null>(defaultState.state.contest);\n    const [ contestPassword, setContestPassword ] = useState<string | null>(defaultState.state.contest);\n    const [ score, setScore ] = useState(defaultState.state.score);\n    const [ maxScore, setMaxScore ] = useState(defaultState.state.maxScore);\n    const [ isOfficial, setIsOfficial ] = useState(defaultState.state.isOfficial);\n    const [ requirePassword, setRequirePassword ] = useState<boolean | null>(null);\n    const [ contestToStart, setContestToStart ] = useState<IContestToStartType | null>(null);\n    const [ registerForContestParams, setRegisterForContestParams ] = useState<IRegisterForContestUrlParams | null>(null);\n    const [ submitContestPasswordUrlParams, setSubmitContestPasswordUrlParams ] = useState<ISubmitContestPasswordUrlParams | null>(null);\n    const [ submitContestPasswordErrorMessage, setSubmitContestPasswordErrorMessage ] = useState<string | null>(null);\n    const [ isPasswordValid, setIsPasswordValid ] = useState<boolean | null>(null);\n    const [ remainingTimeInMilliseconds, setRemainingTimeInMilliseconds ] = useState(defaultState.state.remainingTimeInMilliseconds);\n\n    const {\n        startLoading,\n        stopLoading,\n    } = useLoading();\n\n    const {\n        getStartContestParticipationUrl,\n        getRegisterForContestUrl,\n        getSubmitContestPasswordUrl,\n    } = useUrls();\n\n    const {\n        get: startContest,\n        data: startContestData,\n    } = useHttp(getStartContestParticipationUrl as UrlType, contestToStart);\n\n    const {\n        get: registerForContest,\n        data: registerForContestData,\n    } = useHttp(getRegisterForContestUrl as UrlType, registerForContestParams);\n\n    const {\n        post: submitContestPassword,\n        data: submitContestPasswordData,\n        response: submitContestPasswordResponse,\n    } = useHttp(getSubmitContestPasswordUrl as UrlType, submitContestPasswordUrlParams);\n\n    const start = useCallback((obj) => {\n        setContestToStart(obj);\n    }, []);\n\n    const register = useCallback((obj) => {\n        const { id, isOfficial: official } = obj;\n        \n        setRegisterForContestParams({ id, isOfficial: official } as IRegisterForContestUrlParams);\n    }, []);\n\n    const submitPassword = useCallback(({ id, isOfficial: official, password }: ISubmitContestPasswordArgs) => {\n        setSubmitContestPasswordUrlParams({\n            id,\n            isOfficial: official,\n        } as ISubmitContestPasswordUrlParams);\n        setContestPassword(password);\n    }, []);\n\n    useEffect(() => {\n        if (isNil(contestToStart)) {\n            return;\n        }\n\n        (async () => {\n            startLoading();\n            await startContest();\n            stopLoading();\n        })();\n    }, [ contestToStart, startContest, startLoading, stopLoading ]);\n\n    useEffect(() => {\n        if (isNil(startContestData)) {\n            return;\n        }\n\n        const responseData = startContestData as IStartParticipationResponseType;\n        const { contest: newContest, contestIsCompete, remainingTimeInMilliseconds: newRemainingTimeInMilliseconds } = responseData;\n\n        setContest(newContest);\n        setIsOfficial(contestIsCompete);\n        setRemainingTimeInMilliseconds(newRemainingTimeInMilliseconds);\n    }, [ startContestData ]);\n\n    useEffect(() => {\n        if (isNil(registerForContestParams)) {\n            return;\n        }\n\n        (async () => {\n            startLoading();\n            await registerForContest();\n            stopLoading();\n        })();\n    }, [ registerForContest, registerForContestParams, startLoading, stopLoading ]);\n\n    useEffect(() => {\n        if (isNil(registerForContestData)) {\n            return;\n        }\n\n        const responseData = registerForContestData as IRegisterForContestResponseType;\n        const { requirePassword: responseRequirePassword } = responseData;\n\n        setContest({ id: responseData.id, name: responseData.name } as IContestType);\n        setRequirePassword(responseRequirePassword);\n    }, [ registerForContestData ]);\n\n    useEffect(() => {\n        if (isNil(submitContestPasswordUrlParams)) {\n            return;\n        }\n\n        (async () => {\n            startLoading();\n            await submitContestPassword({ password: contestPassword });\n            stopLoading();\n        })();\n    }, [ contestPassword, submitContestPassword, submitContestPasswordUrlParams, startLoading, stopLoading ]);\n\n    useEffect(() => {\n        if (isNil(submitContestPasswordData)) {\n            return;\n        }\n\n        // TODO: fix this https://github.com/SoftUni-Internal/exam-systems-issues/issues/224\n        if (!isNil(submitContestPasswordResponse) && submitContestPasswordResponse.status !== 200) {\n            setSubmitContestPasswordErrorMessage('Incorrect password');\n            setIsPasswordValid(false);\n            \n            return;\n        }\n\n        setIsPasswordValid(true);\n        setSubmitContestPasswordErrorMessage(null);\n    }, [ registerForContestData, submitContestPasswordData, submitContestPasswordResponse ]);\n\n    useEffect(\n        () => {\n            const { problems } = contest || {};\n\n            if (isNil(problems)) {\n                return;\n            }\n\n            setScore(sum(problems.map((p) => p.points)));\n            setMaxScore(sum(problems.map((p) => p.maximumPoints)));\n        },\n        [ contest ],\n    );\n\n    const value = {\n        state: {\n            contest,\n            contestPassword,\n            score,\n            maxScore,\n            isOfficial,\n            requirePassword,\n            submitContestPasswordErrorMessage,\n            isPasswordValid,\n            remainingTimeInMilliseconds,\n        },\n        actions: {\n            setContestPassword,\n            register,\n            start,\n            submitPassword,\n        },\n    };\n\n    return (\n        <CurrentContestsContext.Provider value={value}>\n            {children}\n        </CurrentContestsContext.Provider>\n    );\n};\nconst useCurrentContest = () => useContext(CurrentContestsContext);\n\nexport default CurrentContestsProvider;\n\nexport {\n    useCurrentContest,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAKA;AACA;AACA;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAYA;AACA;AASA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AACA;AAHA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AAJA;AAZA;AAoBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAjLA;AAiBA;;;AAjBA;AACA;AAgLA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}