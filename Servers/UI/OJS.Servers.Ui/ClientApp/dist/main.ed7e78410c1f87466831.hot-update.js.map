{"version":3,"file":"main.ed7e78410c1f87466831.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/common/InitProviders.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contests-filters/ContestFilters.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/submission-box/SubmissionBox.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/guidelines/icons/LockIcon.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/guidelines/icons/MemoryIcon.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/guidelines/icons/TimeLimitIcon.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/home-header/HomeHeader.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/profile/profile-submissions/ProfileSubmisssions.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/contests/use-current-contest-results.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/submissions/use-submissions.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/use-current-contest.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/identity-config.ts","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/index.tsx"],"sourcesContent":["import React, { FC } from 'react';\r\nimport { IHaveChildrenProps } from './Props';\r\n\r\ninterface IProvider {\r\n    Provider: FC<IHaveChildrenProps>,\r\n    props?: any,\r\n}\r\n\r\n// A provider could be FC or IProvider when props are needed\r\ntype ProviderType = IProvider | FC;\r\n\r\ninterface IInitProviderProps {\r\n    providers: ProviderType[],\r\n    children: any,\r\n}\r\n\r\nconst InitProviders = ({ providers, children }: IInitProviderProps) => {\r\n    const initial = (<>{children}</>);\r\n\r\n    return providers\r\n        .reverse()\r\n        .reduce(\r\n            (current, item) => {\r\n                let Provider = item as FC<IHaveChildrenProps>;\r\n                let props = {};\r\n                const providerItem = item as IProvider;\r\n\r\n                // Checking if provider is of type IProvider to pass props\r\n                if (providerItem.Provider) {\r\n                    Provider = providerItem.Provider;\r\n                    props = providerItem.props;\r\n                }\r\n\r\n                return (\r\n                    // eslint-disable-next-line react/jsx-props-no-spreading\r\n                    <Provider {...props}>\r\n                        {current}\r\n                    </Provider>\r\n                );\r\n            },\r\n            initial,\r\n        );\r\n};\r\n\r\nexport default InitProviders;\r\n\r\nexport type {\r\n    ProviderType,\r\n};\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { isNil } from 'lodash';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport List, { Orientation } from '../../guidelines/lists/List';\r\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\r\n\r\nimport { FilterType, IFilter } from '../../../common/contest-types';\r\nimport ContestCategories from '../contest-categories/ContestCategories';\r\n\r\nimport Button, { ButtonSize, ButtonType } from '../../guidelines/buttons/Button';\r\nimport { useContests } from '../../../hooks/use-contests';\r\nimport { groupByType } from '../../../common/filter-utils';\r\nimport ExpandButton from '../../guidelines/buttons/ExpandButton';\r\nimport concatClassNames from '../../../utils/class-names';\r\nimport { useContestStrategyFilters } from '../../../hooks/use-contest-strategy-filters';\r\nimport { useContestCategories } from '../../../hooks/use-contest-categories';\r\n\r\nimport styles from './ContestFilters.module.scss';\r\n\r\ninterface IContestFiltersProps {\r\n    onFilterClick: (filter: IFilter) => void;\r\n}\r\n\r\ninterface IFiltersGroup {\r\n    type: FilterType;\r\n    filters: IFilter[];\r\n}\r\n\r\nconst ContestFilters = ({ onFilterClick }: IContestFiltersProps) => {\r\n    const [ filtersGroups, setFiltersGroups ] = useState<IFiltersGroup[]>([]);\r\n    const [ expanded, setExpanded ] = useState(false);\r\n    const [ defaultSelected, setDefaultSelected ] = useState('');\r\n    const [ searchParams ] = useSearchParams();\r\n    const [ isLoaded, setIsLoaded ] = useState(false);\r\n    const { actions: { load: loadStrategies } } = useContestStrategyFilters();\r\n    const { actions: { load: loadCategories } } = useContestCategories();\r\n\r\n    const {\r\n        state: {\r\n            possibleFilters,\r\n            filters,\r\n        },\r\n    } = useContests();\r\n\r\n    const handleFilterClick = useCallback(\r\n        (filterId: number) => {\r\n            const filter = possibleFilters.find(({ id }) => filterId === id);\r\n\r\n            if (isNil(filter)) {\r\n                return;\r\n            }\r\n\r\n            onFilterClick(filter);\r\n        },\r\n        [ possibleFilters, onFilterClick ],\r\n    );\r\n\r\n    const renderStatusFilterItem = useCallback(\r\n        (buttonType: ButtonType, btnClassName: string,name: string, id: number) => (\r\n            <Button\r\n                    type={buttonType}\r\n                    onClick={() => handleFilterClick(id)}\r\n                    className={btnClassName + styles.btnSelectFilter}\r\n                    text={name}\r\n                    size={ButtonSize.small}\r\n                />\r\n        ),\r\n        [ handleFilterClick ],\r\n    );\r\n    \r\n    const renderStrategyFilterItem = useCallback(\r\n        (buttonType: ButtonType, btnClassName: string, name: string, id: number)=> (\r\n            <div className={styles.strategyHeader}>\r\n                <div className={styles.tooltip}>\r\n                    <span className={styles.tooltipElement}>{name}</span>\r\n                </div>\r\n                <Button\r\n                        type={buttonType}\r\n                        onClick={() => handleFilterClick(id)}\r\n                        className={styles.strategyElementClassName}\r\n                        text={name}\r\n                        size={ButtonSize.small}\r\n                    />\r\n            </div>\r\n        ),\r\n        [ handleFilterClick ],\r\n    );\r\n    \r\n    const getRenderFilterItem = useCallback(\r\n        (type: FilterType) => ({ name, id }: IFilter) => {\r\n            const filterIsSelected = filters.some((f) => f.name === name);\r\n            const buttonType = filterIsSelected\r\n                ? ButtonType.primary\r\n                : ButtonType.secondary;\r\n\r\n            const btnClassName = type === FilterType.Strategy\r\n                ? styles.btnSelectFilter\r\n                : '';\r\n            \r\n            return type === FilterType.Strategy \r\n                ? renderStrategyFilterItem(buttonType,btnClassName,name,id) \r\n                : renderStatusFilterItem(buttonType,btnClassName, name, id);\r\n            \r\n        },\r\n        [ filters, renderStatusFilterItem, renderStrategyFilterItem ],\r\n    );\r\n    \r\n    const toggleFiltersExpanded = useCallback(\r\n        (isExpanded: boolean) => setExpanded(isExpanded),\r\n        [],\r\n    );\r\n\r\n    const renderExpandButton = useCallback(\r\n        (allFilters: IFilter[]) => {\r\n            const maxFiltersToDisplayCount = 3;\r\n\r\n            return allFilters.length > maxFiltersToDisplayCount\r\n                ? <ExpandButton onExpandChanged={toggleFiltersExpanded}/>\r\n                : null;\r\n        },\r\n        [ toggleFiltersExpanded ],\r\n    );\r\n\r\n    const renderFilter = useCallback(\r\n        (fg: IFiltersGroup) => {\r\n            const { type, filters: groupFilters } = fg;\r\n            const className = concatClassNames(\r\n                styles.listFilters,\r\n                expanded\r\n                    ? styles.expanded\r\n                    : '',\r\n            );\r\n\r\n            const listOrientation = type === FilterType.Status\r\n                ? Orientation.horizontal\r\n                : Orientation.vertical;\r\n\r\n            return (\r\n                <div className={styles.filterTypeContainer}>\r\n                    <Heading\r\n                        type={HeadingType.small}\r\n                        className={styles.heading}\r\n                    >\r\n                        {type}\r\n                    </Heading>\r\n                    <List\r\n                        values={groupFilters}\r\n                        itemFunc={getRenderFilterItem(type)}\r\n                        orientation={listOrientation}\r\n                        className={className}\r\n                        itemClassName={styles.listFilterItem}\r\n                        fullWidth\r\n                    />\r\n                    {renderExpandButton(groupFilters)}\r\n                </div>\r\n            );\r\n        },\r\n        [ expanded, getRenderFilterItem, renderExpandButton ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            const plainFilters = possibleFilters.filter(({ type }) => type !== FilterType.Category);\r\n\r\n            setFiltersGroups(groupByType(plainFilters));\r\n        },\r\n        [ possibleFilters ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            if (isLoaded) {\r\n                return;\r\n            }\r\n\r\n            const searchParamName = FilterType.Category.toString();\r\n            let selectedCategory = searchParams.get(searchParamName);\r\n\r\n            if (isNil(selectedCategory)) {\r\n                selectedCategory = searchParams.get(searchParamName.toLowerCase());\r\n            }\r\n\r\n            if (isNil(selectedCategory)) {\r\n                return;\r\n            }\r\n\r\n            setIsLoaded(true);\r\n            setDefaultSelected(selectedCategory.toString());\r\n        },\r\n        [ isLoaded, searchParams ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            (async () => {\r\n                await loadStrategies();\r\n            })();\r\n        },\r\n        [ loadStrategies ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            (async () => {\r\n                await loadCategories();\r\n            })();\r\n        },\r\n        [ loadCategories ],\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <ContestCategories\r\n                className={styles.filterTypeContainer}\r\n                onCategoryClick={onFilterClick}\r\n                defaultSelected={defaultSelected}\r\n            />\r\n            <List\r\n                values={filtersGroups}\r\n                itemFunc={renderFilter}\r\n                fullWidth\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContestFilters;\r\n","import * as React from 'react';\r\nimport { useCallback } from 'react';\r\n\r\nimport { isNil } from 'lodash';\r\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\r\nimport CodeEditor from '../../code-editor/CodeEditor';\r\nimport List, { Orientation } from '../../guidelines/lists/List';\r\nimport { Button } from '../../guidelines/buttons/Button';\r\nimport ExecutionTypeSelector from '../execution-type-selector/ExecutionTypeSelector';\r\n\r\nimport { ISubmissionTypeType } from '../../../common/types';\r\n\r\nimport { useSubmissions } from '../../../hooks/submissions/use-submissions';\r\nimport { useProblems } from '../../../hooks/use-problems';\r\n\r\nimport styles from './SubmissionBox.module.scss';\r\nimport concatClassNames from '../../../utils/class-names';\r\n\r\nconst SubmissionBox = () => {\r\n    const { actions: { selectSubmissionTypeById } } = useSubmissions();\r\n    const {\r\n        state: {\r\n            submissionCode,\r\n            selectedSubmissionType,\r\n        },\r\n        actions: {\r\n            submit,\r\n            updateSubmissionCode,\r\n        },\r\n    } = useSubmissions();\r\n\r\n    const { state: { currentProblem } } = useProblems();\r\n    const { allowedSubmissionTypes } = currentProblem || {};\r\n\r\n    const handleCodeChanged = useCallback(\r\n        (newValue: string) => {\r\n            updateSubmissionCode(newValue);\r\n        },\r\n        [ updateSubmissionCode ],\r\n    );\r\n\r\n    const handleSelectExecutionType = useCallback(\r\n        (id: number) => {\r\n            selectSubmissionTypeById(id);\r\n        },\r\n        [ selectSubmissionTypeById ],\r\n    );\r\n\r\n    const renderSubmissionTypesSelectors = useCallback(\r\n        (submissionType: ISubmissionTypeType) => {\r\n            const { id, name } = submissionType;\r\n            const isSelected = allowedSubmissionTypes && allowedSubmissionTypes.length === 1\r\n                ? true\r\n                : submissionType.isSelectedByDefault;\r\n\r\n            return (\r\n                <ExecutionTypeSelector\r\n                  id={id}\r\n                  value={name}\r\n                  isSelected={isSelected}\r\n                  onSelect={() => handleSelectExecutionType(id)}\r\n                />\r\n            );\r\n        },\r\n        [ allowedSubmissionTypes, handleSelectExecutionType ],\r\n    );\r\n\r\n    const renderSubmissionTypesSelectorsList = useCallback(\r\n        () => {\r\n            if (isNil(currentProblem)) {\r\n                return null;\r\n            }\r\n\r\n            if (isNil(allowedSubmissionTypes)) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <List\r\n                  className={styles.submissionTypesList}\r\n                  values={allowedSubmissionTypes}\r\n                  itemFunc={renderSubmissionTypesSelectors}\r\n                  orientation={Orientation.horizontal}\r\n                  wrap\r\n                />\r\n            );\r\n        },\r\n        [ allowedSubmissionTypes, currentProblem, renderSubmissionTypesSelectors ],\r\n    );\r\n\r\n    const handleOnSubmit = useCallback(async () => {\r\n        await submit();\r\n        updateSubmissionCode('');\r\n    }, [ submit, updateSubmissionCode ]);\r\n\r\n    const taskText = 'Task: ';\r\n    const executionTypeListClass = 'executionTypeLis';\r\n    const executionTypeListClassName = concatClassNames(\r\n        styles.executionTypeSelectors,\r\n        executionTypeListClass,\r\n    );\r\n\r\n    return (\r\n        <div className={styles.contestMainWrapper}>\r\n            <Heading\r\n              type={HeadingType.secondary}\r\n              className={styles.heading}\r\n            >\r\n                {taskText}\r\n                <span className={styles.taskName}>\r\n                    {currentProblem?.name}\r\n                </span>\r\n            </Heading>\r\n            <div className={styles.contestInnerLayout}>\r\n                <div className={styles.editorAndProblemControlsWrapper}>\r\n                    <CodeEditor\r\n                      selectedSubmissionType={selectedSubmissionType!}\r\n                      code={submissionCode}\r\n                      onCodeChange={handleCodeChanged}\r\n                    />\r\n                    <div className={styles.contestSubmitControlsWrapper}>\r\n                        <div className={executionTypeListClassName}>\r\n                            {renderSubmissionTypesSelectorsList()}\r\n                        </div>\r\n                        <div className={styles.submitButtonContainer}>\r\n                            <Button\r\n                              text=\"Submit\"\r\n                              onClick={handleOnSubmit}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SubmissionBox;\r\n","import React from 'react';\r\nimport { AiOutlineLock } from 'react-icons/ai';\r\n\r\nimport IconSize from './common/icon-sizes';\r\nimport Icon, { IIconProps } from './Icon';\r\n\r\ninterface ILockIconProps extends IIconProps {\r\n}\r\n\r\nconst LockIcon = ({\r\n    className = '',\r\n    size = IconSize.Medium,\r\n    helperText = '',\r\n}: ILockIconProps) => (\r\n    <Icon\r\n      className={className}\r\n      size={size}\r\n      helperText={helperText}\r\n      Component={AiOutlineLock}\r\n    />\r\n);\r\n\r\nexport default LockIcon;\r\n","import React from 'react';\r\nimport { BiMemoryCard } from 'react-icons/bi';\r\nimport IconSize from './common/icon-sizes';\r\nimport Icon, { IIconProps } from './Icon';\r\n\r\ninterface IMemoryIconProps extends IIconProps {\r\n}\r\n\r\nconst MemoryIcon = ({\r\n    className = '',\r\n    size = IconSize.Medium,\r\n    helperText = '',\r\n}: IMemoryIconProps) => (\r\n    <Icon\r\n      className={className}\r\n      Component={BiMemoryCard}\r\n      size={size}\r\n      helperText={helperText}\r\n    />\r\n);\r\n\r\nexport default MemoryIcon;\r\n","import React from 'react';\r\nimport { BiTime } from 'react-icons/bi';\r\n\r\nimport IconSize from './common/icon-sizes';\r\nimport Icon, { IIconProps } from './Icon';\r\nimport concatClassNames from '../../../utils/class-names';\r\nimport styles from './TimeLimitIcon.module.scss';\r\n\r\ninterface IInProgressIconProps extends IIconProps {\r\n}\r\n\r\nconst TimeLimitIcon = ({\r\n    className = '',\r\n    size = IconSize.Medium,\r\n    helperText = '',\r\n}: IInProgressIconProps) => (\r\n    <Icon\r\n      className={concatClassNames(styles.timeLimitIcon, className)}\r\n      Component={BiTime}\r\n      size={size}\r\n      helperText={helperText}\r\n    />\r\n);\r\n\r\nexport default TimeLimitIcon;\r\n","import React, { FC, useCallback, useEffect, useMemo } from 'react';\r\n\r\nimport { isNil } from 'lodash';\r\n\r\nimport { IDictionary, IKeyValuePair } from '../../common/common-types';\r\nimport { toList } from '../../utils/object-utils';\r\nimport IconSize from '../guidelines/icons/common/icon-sizes';\r\n\r\nimport List, { Orientation } from '../guidelines/lists/List';\r\nimport StatisticBox from '../statistic-box/StatisticBox';\r\nimport UsersIcon from '../guidelines/icons/UsersIcon';\r\nimport CodeIcon from '../guidelines/icons/CodeIcon';\r\nimport ProblemIcon from '../guidelines/icons/ProblemIcon';\r\nimport StrategyIcon from '../guidelines/icons/StrategyIcon';\r\nimport ContestIcon from '../guidelines/icons/ContestIcon';\r\nimport SubmissionsPerDayIcon from '../guidelines/icons/SubmissionsPerDayIcon';\r\nimport Heading, { HeadingType } from '../guidelines/headings/Heading';\r\n\r\nimport { useHomeStatistics } from '../../hooks/use-home-statistics';\r\n\r\nimport styles from './HomeHeader.module.scss';\r\n\r\nconst keyToNameMap: IDictionary<string> = {\r\n    usersCount: 'Users',\r\n    submissionsCount: 'Submissions',\r\n    submissionsPerDayCount: 'Submissions per day',\r\n    problemsCount: 'Problems',\r\n    strategiesCount: 'Test strategies',\r\n    contestsCount: 'Contests',\r\n};\r\n\r\nconst defaultProps = { className: styles.icon };\r\n\r\n/* eslint-disable react/jsx-props-no-spreading */\r\nconst keyToIconComponent: IDictionary<FC> = {\r\n    usersCount: (props: any) => (<UsersIcon {...defaultProps} {...props} />),\r\n    submissionsCount: (props: any) => (<CodeIcon {...defaultProps} {...props} />),\r\n    submissionsPerDayCount: (props: any) => (<SubmissionsPerDayIcon {...defaultProps} {...props} />),\r\n    problemsCount: (props: any) => (<ProblemIcon {...defaultProps} {...props} />),\r\n    strategiesCount: (props: any) => (<StrategyIcon {...defaultProps} {...props} />),\r\n    contestsCount: (props: any) => (<ContestIcon {...defaultProps} {...props} />),\r\n};\r\n/* eslint-enable react/jsx-props-no-spreading */\r\n\r\nconst HomeHeader = () => {\r\n    const {\r\n        state: { statistics },\r\n        actions: { load },\r\n    } = useHomeStatistics();\r\n\r\n    useEffect(\r\n        () => {\r\n            (async () => {\r\n                await load();\r\n            })();\r\n        },\r\n        [ load ],\r\n    );\r\n\r\n    const renderIcon = (type: string) => {\r\n        const props = { size: IconSize.ExtraLarge, children: {} };\r\n        const func = keyToIconComponent[type];\r\n\r\n        return func(props);\r\n    };\r\n\r\n    const renderStatistic = useCallback(\r\n        (statisticItem: IKeyValuePair<number>) => {\r\n            const { key, value } = statisticItem;\r\n\r\n            return (\r\n                <>\r\n                    <StatisticBox\r\n                        statistic={{ name: keyToNameMap[key], value }}\r\n                        renderIcon={() => renderIcon(key)}\r\n                    />\r\n                </>\r\n            );\r\n        },\r\n        [],\r\n    );\r\n\r\n    const statisticsList = useMemo(\r\n        () => {\r\n            if (isNil(statistics)) {\r\n                return [];\r\n            }\r\n\r\n            return toList(statistics);\r\n        },\r\n        [ statistics ],\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Heading type={HeadingType.primary}>\r\n                SoftUni Judge Numbers\r\n            </Heading>\r\n            <List\r\n                values={statisticsList}\r\n                itemFunc={renderStatistic}\r\n                className={styles.statisticsList}\r\n                itemClassName={styles.statisticsListItem}\r\n                wrap\r\n                orientation={Orientation.horizontal}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeHeader;\r\n","/* eslint-disable */\r\nimport * as React from 'react';\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSubmissions } from '../../../hooks/submissions/use-submissions';\r\nimport { formatDate } from '../../../utils/dates';\r\nimport ExecutionResult from '../../submissions/execution-result/ExecutionResult';\r\nimport styles from './ProfileSubmissions.module.scss';\r\n\r\n// const columns: GridColDef[] = [\r\n//     { field: 'id', headerName: '№', minWidth: 70, flex: 1 },\r\n//     {\r\n//         field: 'submittedOn',\r\n//         headerName: 'Submitted On',\r\n//         minWidth: 160,\r\n//         flex: 1,\r\n//         sortable: true,\r\n//         valueGetter: (params: GridValueGetterParams) => `${formatDate(new Date(params.row.submittedOn))}`,\r\n//     },\r\n//     {\r\n//         field: 'problem',\r\n//         headerName: 'Task',\r\n//         minWidth: 150,\r\n//         flex: 1,\r\n//         sortable: true,\r\n//         renderCell: (params: GridValueGetterParams) => (\r\n//             <Link to={`/submissions/${params.row.id}`} className={styles.contestLink}>{params.row.problem.name}</Link>\r\n//         ),\r\n//     },\r\n//     {\r\n//         field: 'points',\r\n//         headerName: 'Points',\r\n//         type: 'number',\r\n//         minWidth: 70,\r\n//         flex: 1,\r\n//         sortable: true,\r\n//         valueGetter: (params: GridValueGetterParams) => `${params.row.points}/${params.row.problem.maximumPoints}`,\r\n//     },\r\n//     {\r\n//         field: 'maxUsedTime',\r\n//         headerName: 'Memory Used',\r\n//         type: 'string',\r\n//         minWidth: 70,\r\n//         flex: 1,\r\n//         hide: true,\r\n//         sortable: false,\r\n//     },\r\n//     {\r\n//         field: 'maxUsedMemory',\r\n//         headerName: 'Memory Used',\r\n//         type: 'string',\r\n//         minWidth: 70,\r\n//         hide: true,\r\n//         sortable: true,\r\n//     },\r\n//     {\r\n//         field: 'executionResult',\r\n//         headerName: 'Execution Result',\r\n//         type: 'string',\r\n//         minWidth: 250,\r\n//         flex: 1,\r\n//         sortable: false,\r\n//         renderCell: (params: GridValueGetterParams) => (\r\n//             <ExecutionResult testRuns={params.row.testRuns} />\r\n//         ),\r\n//     },\r\n// ];\r\n\r\nconst ProfileSubmissions = () => {\r\n    // const { submissions, getUserSubmissions } = useSubmissions();\r\n    //\r\n    // useEffect(() => {\r\n    //     getUserSubmissions();\r\n    // }, [ getUserSubmissions ]);\r\n    //\r\n    // return (\r\n    //     <div style={{ height: 400, width: '100%' }}>\r\n    //         <DataGrid\r\n    //           rows={submissions}\r\n    //           columns={columns}\r\n    //           pageSize={5}\r\n    //           rowsPerPageOptions={[ 5 ]}\r\n    //           disableSelectionOnClick\r\n    //         />\r\n    //     </div>\r\n    // );\r\n\r\n    const x = 5;\r\n    return (<h1>{x}</h1>);\r\n};\r\n\r\nexport default ProfileSubmissions;\r\n","import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\r\nimport { isNil } from 'lodash';\r\nimport { IHaveChildrenProps } from '../../components/common/Props';\r\nimport { IContestResultsParticipationType, IContestResultsType } from './types';\r\nimport { useLoading } from '../use-loading';\r\nimport { useHttp } from '../use-http';\r\nimport { IGetContestResultsParams } from '../../common/url-types';\r\nimport { useUrls } from '../use-urls';\r\nimport { UrlType } from '../../common/common-types';\r\n\r\ninterface ICurrentContestResultsContext {\r\n    state: {\r\n        contestResults: IContestResultsType,\r\n    };\r\n    actions: {\r\n        load: (id: number, official: boolean, full: boolean) => Promise<void>,\r\n    };\r\n}\r\n\r\ninterface ICurrentContestResultsProviderProps extends IHaveChildrenProps {\r\n}\r\n\r\nconst defaultState = { state: { contestResults: { results: [] as IContestResultsParticipationType[] } as IContestResultsType } };\r\n\r\nconst ContestResultsContext = createContext<ICurrentContestResultsContext>(defaultState as ICurrentContestResultsContext);\r\n\r\nconst CurrentContestResultsProvider = ({ children }: ICurrentContestResultsProviderProps) => {\r\n    const { getContestResultsUrl } = useUrls();\r\n    const [ contestResults, setContestResults ] = useState(defaultState.state.contestResults);\r\n    const { startLoading, stopLoading } = useLoading();\r\n    const [ getContestResultsParams, setGetContestResultsParams ] = useState<IGetContestResultsParams>();\r\n\r\n    const {\r\n        get: getContestResults,\r\n        data: apiContestResults,\r\n    } = useHttp(getContestResultsUrl as UrlType, getContestResultsParams);\r\n\r\n    const load = useCallback(async (id: number, official: boolean, full: boolean) => {\r\n        if (isNil(id)) {\r\n            return;\r\n        }\r\n\r\n        setGetContestResultsParams({ id, official, full });\r\n    }, []);\r\n\r\n    useEffect(\r\n        () => {\r\n            if (isNil(apiContestResults)) {\r\n                return;\r\n            }\r\n\r\n            setContestResults(apiContestResults);\r\n        },\r\n        [ apiContestResults ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            if (isNil(getContestResultsParams)) {\r\n                return;\r\n            }\r\n\r\n            (async () => {\r\n                startLoading();\r\n                await getContestResults();\r\n                stopLoading();\r\n            })();\r\n        },\r\n        [ getContestResults, getContestResultsParams, startLoading, stopLoading ],\r\n    );\r\n\r\n    const value = {\r\n        state: { contestResults },\r\n        actions: { load },\r\n    };\r\n\r\n    return (\r\n        <ContestResultsContext.Provider value={value}>\r\n            {children}\r\n        </ContestResultsContext.Provider>\r\n    );\r\n};\r\n\r\nconst useCurrentContestResults = () => useContext(ContestResultsContext);\r\n\r\nexport default CurrentContestResultsProvider;\r\n\r\nexport {\r\n    useCurrentContestResults,\r\n};\r\n","import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\r\nimport { first } from 'lodash';\r\nimport { useLoading } from '../use-loading';\r\nimport { useHttp } from '../use-http';\r\nimport { useCurrentContest } from '../use-current-contest';\r\nimport { useProblems } from '../use-problems';\r\nimport { useProblemSubmissions } from './use-problem-submissions';\r\nimport { useUrls } from '../use-urls';\r\nimport { ISubmissionTypeType } from '../../common/types';\r\nimport { ISubmissionType, ITestRunType } from './types';\r\nimport { IHaveChildrenProps } from '../../components/common/Props';\r\n\r\ninterface ISubmissionsContext {\r\n    state: {\r\n        submissionCode: string;\r\n        selectedSubmissionType: ISubmissionTypeType | null;\r\n    };\r\n    actions: {\r\n        submit: () => Promise<void>\r\n        updateSubmissionCode: (code: string) => void;\r\n        selectSubmissionTypeById: (id: number) => void;\r\n    };\r\n}\r\n\r\nconst defaultState = {\r\n    state: {\r\n        submissionCode: `\r\nfunction hello() {\r\n    alert('Hello world!');\r\n}\r\n`,\r\n        selectedSubmissionType: null,\r\n    },\r\n};\r\n\r\nconst SubmissionsContext = createContext<ISubmissionsContext>(defaultState as ISubmissionsContext);\r\n\r\ninterface ISubmissionsProviderProps extends IHaveChildrenProps {\r\n}\r\n\r\nconst SubmissionsProvider = ({ children }: ISubmissionsProviderProps) => {\r\n    const [ selectedSubmissionType, setSelectedSubmissionType ] =\r\n        useState<ISubmissionTypeType | null>(defaultState.state.selectedSubmissionType);\r\n    const [ submissionCode, setSubmissionCode ] = useState<string>(defaultState.state.submissionCode);\r\n\r\n    const { getSubmitUrl } = useUrls();\r\n\r\n    const {\r\n        startLoading,\r\n        stopLoading,\r\n    } = useLoading();\r\n\r\n    const { state: { currentProblem } } = useProblems();\r\n    const { actions: { loadSubmissions } } = useProblemSubmissions();\r\n    const { state: { isOfficial } } = useCurrentContest();\r\n\r\n    const {\r\n        post: submitCode,\r\n        data: submitCodeResult,\r\n    } = useHttp(getSubmitUrl);\r\n\r\n    const submit = useCallback(async () => {\r\n        startLoading();\r\n        const { id } = selectedSubmissionType || {};\r\n        const { id: problemId } = currentProblem || {};\r\n\r\n        await submitCode({\r\n            ProblemId: problemId,\r\n            SubmissionTypeId: id,\r\n            Content: submissionCode,\r\n            Official: isOfficial,\r\n        });\r\n        stopLoading();\r\n    }, [ startLoading, selectedSubmissionType, currentProblem, submitCode, submissionCode, isOfficial, stopLoading ]);\r\n\r\n    const selectSubmissionTypeById = useCallback(\r\n        (id: number | null) => {\r\n            const { allowedSubmissionTypes } = currentProblem || {};\r\n\r\n            if (allowedSubmissionTypes == null) {\r\n                return;\r\n            }\r\n\r\n            const newSubmissionType = allowedSubmissionTypes.find((st) => st.id === id);\r\n\r\n            if (!newSubmissionType) {\r\n                return;\r\n            }\r\n\r\n            setSelectedSubmissionType(newSubmissionType);\r\n        },\r\n        [ currentProblem ],\r\n    );\r\n\r\n    const updateSubmissionCode = (code: string) => {\r\n        setSubmissionCode(code);\r\n    };\r\n\r\n    useEffect(\r\n        () => {\r\n            const { allowedSubmissionTypes } = currentProblem || {};\r\n            const submissionType = first(allowedSubmissionTypes);\r\n\r\n            if (submissionType) {\r\n                const { id } = submissionType;\r\n\r\n                selectSubmissionTypeById(id);\r\n            } else {\r\n                selectSubmissionTypeById(null);\r\n            }\r\n        },\r\n        [ currentProblem, selectSubmissionTypeById ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            (async () => {\r\n                await loadSubmissions();\r\n            })();\r\n        },\r\n        [ loadSubmissions, submitCodeResult ],\r\n    );\r\n\r\n    const value = {\r\n        state: {\r\n            submissionCode,\r\n            selectedSubmissionType,\r\n        },\r\n        actions: {\r\n            updateSubmissionCode,\r\n            selectSubmissionTypeById,\r\n            submit,\r\n        },\r\n    };\r\n\r\n    return (\r\n        <SubmissionsContext.Provider value={value}>\r\n            {children}\r\n        </SubmissionsContext.Provider>\r\n    );\r\n};\r\n\r\nconst useSubmissions = () => useContext(SubmissionsContext);\r\n\r\nexport {\r\n    useSubmissions,\r\n};\r\n\r\nexport type { ISubmissionType, ITestRunType };\r\n\r\nexport default SubmissionsProvider;\r\n","import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\r\nimport { isNil, sum } from 'lodash';\r\nimport { IContestType, IRegisterForContestResponseType, IStartParticipationResponseType } from '../common/types';\r\nimport { IHaveChildrenProps } from '../components/common/Props';\r\nimport { UrlType } from '../common/common-types';\r\nimport { IRegisterForContestUrlParams, ISubmitContestPasswordUrlParams } from '../common/url-types';\r\nimport { useLoading } from './use-loading';\r\nimport { useHttp } from './use-http';\r\nimport { useUrls } from './use-urls';\r\n\r\ninterface IStartContestArgs {\r\n    id: number;\r\n    isOfficial: boolean;\r\n}\r\n\r\ninterface ISubmitContestPasswordArgs {\r\n    id: number;\r\n    isOfficial: boolean;\r\n    password: string;\r\n}\r\n\r\ninterface ICurrentContestContext {\r\n    state: {\r\n        contest: IContestType | null;\r\n        contestPassword: string | null;\r\n        score: number;\r\n        maxScore: number;\r\n        isOfficial: boolean;\r\n        requirePassword: boolean | null;\r\n        submitContestPasswordErrorMessage: string | null;\r\n        isPasswordValid: boolean | null;\r\n        remainingTimeInMilliseconds: number;\r\n    };\r\n    actions: {\r\n        setContestPassword: (password: string) => void;\r\n        start: (info: IStartContestArgs) => void;\r\n        register: (info: IStartContestArgs) => void;\r\n        submitPassword: (info: ISubmitContestPasswordArgs) => void;\r\n    };\r\n}\r\n\r\nconst defaultState = {\r\n    state: {\r\n        contest: null,\r\n        contestPassword: null,\r\n        score: 0,\r\n        maxScore: 0,\r\n        isOfficial: false,\r\n        requirePassword: false,\r\n        remainingTimeInMilliseconds: 0.0,\r\n    },\r\n};\r\n\r\nconst CurrentContestsContext = createContext<ICurrentContestContext>(defaultState as ICurrentContestContext);\r\n\r\ninterface ICurrentContestsProviderProps extends IHaveChildrenProps {\r\n}\r\n\r\ninterface IContestToStartType {\r\n    id: number;\r\n    isOfficial: boolean;\r\n}\r\n\r\nconst CurrentContestsProvider = ({ children }: ICurrentContestsProviderProps) => {\r\n    const [ contest, setContest ] = useState<IContestType | null>(defaultState.state.contest);\r\n    const [ contestPassword, setContestPassword ] = useState<string | null>(defaultState.state.contest);\r\n    const [ score, setScore ] = useState(defaultState.state.score);\r\n    const [ maxScore, setMaxScore ] = useState(defaultState.state.maxScore);\r\n    const [ isOfficial, setIsOfficial ] = useState(defaultState.state.isOfficial);\r\n    const [ requirePassword, setRequirePassword ] = useState<boolean | null>(null);\r\n    const [ contestToStart, setContestToStart ] = useState<IContestToStartType | null>(null);\r\n    const [ registerForContestParams, setRegisterForContestParams ] = useState<IRegisterForContestUrlParams | null>(null);\r\n    const [ submitContestPasswordUrlParams, setSubmitContestPasswordUrlParams ] = useState<ISubmitContestPasswordUrlParams | null>(null);\r\n    const [ submitContestPasswordErrorMessage, setSubmitContestPasswordErrorMessage ] = useState<string | null>(null);\r\n    const [ isPasswordValid, setIsPasswordValid ] = useState<boolean | null>(null);\r\n    const [ remainingTimeInMilliseconds, setRemainingTimeInMilliseconds ] = useState(defaultState.state.remainingTimeInMilliseconds);\r\n\r\n    const {\r\n        startLoading,\r\n        stopLoading,\r\n    } = useLoading();\r\n\r\n    const {\r\n        getStartContestParticipationUrl,\r\n        getRegisterForContestUrl,\r\n        getSubmitContestPasswordUrl,\r\n    } = useUrls();\r\n\r\n    const {\r\n        get: startContest,\r\n        data: startContestData,\r\n    } = useHttp(getStartContestParticipationUrl as UrlType, contestToStart);\r\n\r\n    const {\r\n        get: registerForContest,\r\n        data: registerForContestData,\r\n    } = useHttp(getRegisterForContestUrl as UrlType, registerForContestParams);\r\n\r\n    const {\r\n        post: submitContestPassword,\r\n        data: submitContestPasswordData,\r\n        response: submitContestPasswordResponse,\r\n    } = useHttp(getSubmitContestPasswordUrl as UrlType, submitContestPasswordUrlParams);\r\n\r\n    const start = useCallback((obj: IContestToStartType) => {\r\n        setContestToStart(obj);\r\n    }, []);\r\n\r\n    const register = useCallback((obj: IStartContestArgs) => {\r\n        const { id, isOfficial: official } = obj;\r\n        \r\n        setRegisterForContestParams({ id, isOfficial: official } as IRegisterForContestUrlParams);\r\n    }, []);\r\n\r\n    const submitPassword = useCallback(({ id, isOfficial: official, password }: ISubmitContestPasswordArgs) => {\r\n        setSubmitContestPasswordUrlParams({\r\n            id,\r\n            isOfficial: official,\r\n        } as ISubmitContestPasswordUrlParams);\r\n        setContestPassword(password);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isNil(contestToStart)) {\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            startLoading();\r\n            await startContest();\r\n            stopLoading();\r\n        })();\r\n    }, [ contestToStart, startContest, startLoading, stopLoading ]);\r\n\r\n    useEffect(() => {\r\n        if (isNil(startContestData)) {\r\n            return;\r\n        }\r\n\r\n        const responseData = startContestData as IStartParticipationResponseType;\r\n        const { contest: newContest, contestIsCompete, remainingTimeInMilliseconds: newRemainingTimeInMilliseconds } = responseData;\r\n\r\n        setContest(newContest);\r\n        setIsOfficial(contestIsCompete);\r\n        setRemainingTimeInMilliseconds(newRemainingTimeInMilliseconds);\r\n    }, [ startContestData ]);\r\n\r\n    useEffect(() => {\r\n        if (isNil(registerForContestParams)) {\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            startLoading();\r\n            await registerForContest();\r\n            stopLoading();\r\n        })();\r\n    }, [ registerForContest, registerForContestParams, startLoading, stopLoading ]);\r\n\r\n    useEffect(() => {\r\n        if (isNil(registerForContestData)) {\r\n            return;\r\n        }\r\n\r\n        const responseData = registerForContestData as IRegisterForContestResponseType;\r\n        const { requirePassword: responseRequirePassword } = responseData;\r\n\r\n        setContest({ id: responseData.id, name: responseData.name } as IContestType);\r\n        setRequirePassword(responseRequirePassword);\r\n    }, [ registerForContestData ]);\r\n\r\n    useEffect(() => {\r\n        if (isNil(submitContestPasswordUrlParams)) {\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            startLoading();\r\n            await submitContestPassword({ password: contestPassword });\r\n            stopLoading();\r\n        })();\r\n    }, [ contestPassword, submitContestPassword, submitContestPasswordUrlParams, startLoading, stopLoading ]);\r\n\r\n    useEffect(() => {\r\n        if (isNil(submitContestPasswordData)) {\r\n            return;\r\n        }\r\n\r\n        // TODO: fix this https://github.com/SoftUni-Internal/exam-systems-issues/issues/224\r\n        if (!isNil(submitContestPasswordResponse) && submitContestPasswordResponse.status !== 200) {\r\n            setSubmitContestPasswordErrorMessage('Incorrect password');\r\n            setIsPasswordValid(false);\r\n            \r\n            return;\r\n        }\r\n\r\n        setIsPasswordValid(true);\r\n        setSubmitContestPasswordErrorMessage(null);\r\n    }, [ registerForContestData, submitContestPasswordData, submitContestPasswordResponse ]);\r\n\r\n    useEffect(\r\n        () => {\r\n            const { problems } = contest || {};\r\n\r\n            if (isNil(problems)) {\r\n                return;\r\n            }\r\n\r\n            setScore(sum(problems.map((p) => p.points)));\r\n            setMaxScore(sum(problems.map((p) => p.maximumPoints)));\r\n        },\r\n        [ contest ],\r\n    );\r\n\r\n    const value = {\r\n        state: {\r\n            contest,\r\n            contestPassword,\r\n            score,\r\n            maxScore,\r\n            isOfficial,\r\n            requirePassword,\r\n            submitContestPasswordErrorMessage,\r\n            isPasswordValid,\r\n            remainingTimeInMilliseconds,\r\n        },\r\n        actions: {\r\n            setContestPassword,\r\n            register,\r\n            start,\r\n            submitPassword,\r\n        },\r\n    };\r\n\r\n    return (\r\n        <CurrentContestsContext.Provider value={value}>\r\n            {children}\r\n        </CurrentContestsContext.Provider>\r\n    );\r\n};\r\nconst useCurrentContest = () => useContext(CurrentContestsContext);\r\n\r\nexport default CurrentContestsProvider;\r\n\r\nexport {\r\n    useCurrentContest,\r\n};\r\n","// import { WebStorageStateStore } from 'oidc-client';\r\n\r\nconst appBaseUrl = window.URLS.UI_URL;\r\nconst authorityBaseUrl = process.env.REACT_APP_PLATFORM_IDENTITY_BASE_URL;\r\nconst authorityUrl = `${process.env.REACT_APP_PLATFORM_IDENTITY_BASE_URL}${process.env.REACT_APP_PLATFORM_IDENTITY_AUTHORITY_URL_POSTFIX}`;\r\nconst authorityRegisterUrl = `${authorityUrl}/register`;\r\n// eslint-disable-next-line max-len\r\n\r\nconst IDENTITY_CONFIG = {\r\n    authority: authorityBaseUrl,\r\n    client_id: process.env.REACT_APP_IDENTITY_CLIENT_ID,\r\n    redirect_uri: `${appBaseUrl}/logincallback`,\r\n    login: `${authorityUrl}`,\r\n    register: authorityRegisterUrl,\r\n    automaticSilentRenew: false,\r\n    loadUserInfo: true,\r\n    silent_redirect_uri: `${appBaseUrl}/silentrenew`,\r\n    scope: process.env.REACT_APP_IDENTITY_ALLOWED_SCOPES,\r\n    response_type: process.env.REACT_APP_RESPONSE_TYPE,\r\n    // stateStore: new WebStorageStateStore({ store: window.localStorage }),\r\n    canAccessAdministrationCookieName: 'can_access_administration',\r\n    loggedInUsernameCookieName: 'logged_in_username',\r\n};\r\n\r\nconst METADATA_OIDC = {\r\n    issuer: authorityBaseUrl,\r\n    jwks_uri: `${authorityBaseUrl}/.well-known/jwks`,\r\n    authorization_endpoint: `${authorityUrl}/authorize`,\r\n    token_endpoint: `${authorityUrl}/token`,\r\n    userinfo_endpoint: `${authorityUrl}/userinfo`,\r\n    end_session_endpoint: `${authorityUrl}/endsession`,\r\n    check_session_iframe: `${authorityUrl}/checksession`,\r\n    revocation_endpoint: `${authorityUrl}/revocation`,\r\n    introspection_endpoint: `${authorityUrl}/introspect`,\r\n};\r\n\r\nexport {\r\n    IDENTITY_CONFIG,\r\n    METADATA_OIDC,\r\n};\r\n","import React, { Suspense } from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\n\r\nimport App from './App';\r\nimport Loading from './components/guidelines/loading/Loading';\r\nimport register from './registerServiceWorker';\r\n\r\nconst container = document.getElementById('root');\r\nconst root = createRoot(container!);\r\n\r\nroot\r\n    .render(<Suspense fallback={<Loading isWholePage isLoading/>}>\r\n        <App/>\r\n    </Suspense>);\r\n\r\n\r\nregister();\r\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAQA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAJA;AAcA;AACA;AAjEA;AAIA;;;AAJA;AAkEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/GA;AACA;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","sourceRoot":""}