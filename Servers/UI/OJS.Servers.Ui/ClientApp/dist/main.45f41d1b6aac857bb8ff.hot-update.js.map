{"version":3,"file":"main.45f41d1b6aac857bb8ff.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/guidelines/trees/Tree.module.scss","webpack:///./src/components/guidelines/trees/Tree.module.scss?1a82","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/guidelines/trees/Tree.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".Tree_tree__3hW8W div:nth-child(2) {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  width: 150px;\\n}\\n\\n.Tree_tooltip__2H9jN {\\n  position: absolute;\\n  border-bottom: 1px dotted black;\\n}\\n\\n.Tree_tooltip__2H9jN > .Tree_tree__3hW8W div:nth-child(2) {\\n  width: 210px;\\n  background-color: grey;\\n  color: #fff;\\n  text-align: center;\\n  border-radius: 6px;\\n  left: 70%;\\n}\\n\\n.Tree_tree__3hW8W div:hover .Tree_tooltip__2H9jN > .Tree_tree__3hW8W div:nth-child(2) {\\n  display: none;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/components/guidelines/trees/Tree.module.scss\"],\"names\":[],\"mappings\":\"AAAE;EACE,mBAAA;EACA,gBAAA;EACA,uBAAA;EACA,YAAA;AACJ;;AAEE;EACE,kBAAA;EAEA,+BAAA;AAAJ;;AAGE;EAEE,YAAA;EACA,sBAAA;EACA,WAAA;EACA,kBAAA;EACA,kBAAA;EACA,SAAA;AADJ;;AAKI;EACE,aAAA;AAFN\",\"sourcesContent\":[\"  .tree div:nth-child(2) {\\r\\n    white-space: nowrap;\\r\\n    overflow: hidden;\\r\\n    text-overflow: ellipsis;\\r\\n    width: 150px;\\r\\n  }\\r\\n\\r\\n  .tooltip {\\r\\n    position: absolute;\\r\\n    //display: none;\\r\\n    border-bottom: 1px dotted black;\\r\\n  }\\r\\n  \\r\\n  .tooltip>.tree div:nth-child(2)\\r\\n  {\\r\\n    width: 210px;\\r\\n    background-color: grey;\\r\\n    color: #fff;\\r\\n    text-align: center;\\r\\n    border-radius: 6px;\\r\\n    left: 70%;\\r\\n  }\\r\\n\\r\\n  .tree div:hover {\\r\\n    .tooltip>.tree div:nth-child(2) {\\r\\n      display: none;\\r\\n    }\\r\\n  }\\r\\n\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"tree\": \"Tree_tree__3hW8W\",\n\t\"tooltip\": \"Tree_tooltip__2H9jN\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-7-1!../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../node_modules/resolve-url-loader/index.js??ref--5-oneOf-7-3!../../../../node_modules/sass-loader/dist/cjs.js??ref--5-oneOf-7-4!./Tree.module.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-7-1!../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../node_modules/resolve-url-loader/index.js??ref--5-oneOf-7-3!../../../../node_modules/sass-loader/dist/cjs.js??ref--5-oneOf-7-4!./Tree.module.scss\",\n      function () {\n        content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-7-1!../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../node_modules/resolve-url-loader/index.js??ref--5-oneOf-7-3!../../../../node_modules/sass-loader/dist/cjs.js??ref--5-oneOf-7-4!./Tree.module.scss\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};","import React, { useCallback, useEffect, useState } from 'react';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { MdChevronRight, MdExpandMore } from 'react-icons/md';\nimport { isArray, isEmpty } from 'lodash';\n\nimport concatClassNames from '../../../utils/class-names';\nimport styles from './Tree.module.scss';\n\ninterface ITreeItemType {\n    id: string,\n    name: string,\n    parentId?: string,\n    children?: ITreeItemType[],\n}\n\ninterface ITreeProps {\n    items: ITreeItemType[];\n    onTreeLabelClick: (node: ITreeItemType) => void;\n    defaultSelected?: string;\n    defaultExpanded?: string[];\n}\n\nconst Tree = ({\n    items,\n    onTreeLabelClick,\n    defaultSelected,\n    defaultExpanded = [],\n} : ITreeProps) => {\n    const [ expanded, setExpanded ] = useState([] as string[]);\n    const [ selected, setSelected ] = useState('');\n\n    const handleTreeItemClick = useCallback(\n        (node: ITreeItemType) => {\n            const id = node.id.toString();\n            let newExpanded = Array.from(expanded);\n\n            if (expanded.includes(id)) {\n                newExpanded = newExpanded.filter((e) => e !== id);\n            } else {\n                newExpanded.push(id);\n            }\n\n            setExpanded(newExpanded);\n        },\n        [ expanded, setExpanded ],\n    );\n\n    const handleLabelClick = useCallback(\n        (node: ITreeItemType) => {\n            setSelected(node.id.toString());\n\n            onTreeLabelClick(node);\n        },\n        [ onTreeLabelClick ],\n    );\n\n    useEffect(\n        () => {\n            if (isEmpty(selected) && defaultSelected) {\n                setSelected(defaultSelected);\n            }\n        },\n        [ defaultSelected, selected ],\n    );\n\n    useEffect(\n        () => {\n            if (isEmpty(expanded) && !isEmpty(defaultExpanded)) {\n                setExpanded(defaultExpanded);\n            }\n        },\n        [ defaultExpanded, expanded ],\n    );\n    \n    const treeElement='tree';\n    const treeElementClassName=concatClassNames(treeElement,styles.tree);\n    const treeTooltip='tootip';\n    const treeTooltipClassName=concatClassNames(treeTooltip,styles.tooltip);\n\n    const renderTree = useCallback((node: ITreeItemType) => (\n        <TreeItem\n          key={node.id}\n          className={treeElementClassName}\n          nodeId={node.id.toString()}\n          label={node.name}\n          onClick={() => handleTreeItemClick(node)}\n          onLabelClick={() => handleLabelClick(node)}\n        >\n            {isArray(node.children)\n                ? node.children.map((child) => renderTree(child))\n                : null}\n        </TreeItem>\n    ), [ treeElementClassName, handleLabelClick, handleTreeItemClick ]);\n\n    const renderTreeView = (treeItems: ITreeItemType[]) => treeItems.map((c) => renderTree(c));\n    \n    const renderTooltip=useCallback((node: ITreeItemType) => (\n        <TreeItem\n            key={node.id}\n            className={treeElementClassName}\n            nodeId={node.id.toString()}\n            label={node.name}\n         />\n    ), [ treeElementClassName ]);\n\n    const renderTooltipView= (treeItems: ITreeItemType[]) => treeItems.map((c) =>renderTooltip(c));\n\n    return (\n        <TreeView\n          aria-label=\"rich object\"\n          defaultCollapseIcon={<MdExpandMore />}\n          defaultExpandIcon={<MdChevronRight />}\n          selected={selected}\n          expanded={expanded}\n        >\n            <div className={treeTooltipClassName}> {renderTooltipView(items)}</div>\n            {renderTreeView(items)}\n        </TreeView>\n    );\n};\n\nexport default Tree;\n\nexport type {\n    ITreeItemType,\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AAEA;AACA;;;AAgBA;AAKA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AASA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAlGA;AACA;AADA;AAmGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}