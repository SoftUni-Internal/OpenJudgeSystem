{"version":3,"file":"main.c8abe403b54d6d422519.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contests-filters/ContestFilters.module.scss","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/guidelines/trees/Tree.module.scss","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/home-contests/contest-card/ContestCard.module.scss","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contests-filters/ContestFilters.tsx","webpack:///./src/components/guidelines/trees/Tree.module.scss?1a82","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/guidelines/trees/Tree.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/home-contests/contest-card/ContestCard.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/statistic-box/StatisticBox.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/submissions/details/SubmissionDetails.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/submissions/submissions-list/RefreshableSubmissionsList.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/layout/header/PageHeader.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/pages/contests/ContestsPage.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ContestFilters_heading__2zpGe {\\n  text-align: left;\\n  padding-bottom: 10px;\\n  border-bottom: 1px solid #bebebe;\\n}\\n\\n.ContestFilters_filterTypeContainer__QuWHH {\\n  margin-top: 10px;\\n}\\n\\n.ContestFilters_listFilters__2MlVy {\\n  max-height: 130px;\\n  overflow: hidden;\\n  align-items: flex-start;\\n}\\n.ContestFilters_listFilters__2MlVy .ContestFilters_listFilterItem__29aBG {\\n  margin-top: 5px;\\n}\\n.ContestFilters_listFilters__2MlVy.ContestFilters_expanded__2nNsm {\\n  max-height: none;\\n  overflow: visible;\\n}\\n\\n.ContestFilters_btnSelectFilter__1BuMC {\\n  width: 95%;\\n}\\n\\n.ContestFilters_container__25CDp {\\n  min-width: 300px;\\n}\\n\\n.ContestFilters_strategyHeader__2Y1pI {\\n  width: 10px;\\n}\\n\\n.ContestFilters_strategyHeader__2Y1pI:hover .ContestFilters_tooltip__1L21o {\\n  display: block;\\n}\\n\\n.ContestFilters_tooltip__1L21o {\\n  position: absolute;\\n  left: 14%;\\n  margin-top: 12px;\\n  display: none;\\n}\\n\\n.ContestFilters_tooltipElement__ehwJP {\\n  color: #42abf8;\\n  border-radius: 6px;\\n  padding: 10px;\\n  font-family: Lato, serif;\\n  border: 2px solid #42abf8;\\n  text-transform: uppercase;\\n  font-weight: 700;\\n  font-size: 12px;\\n}\\n\\n.ContestFilters_strategyElementClassName__1yvqN {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  width: 150px;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/components/contests/contests-filters/ContestFilters.module.scss\"],\"names\":[],\"mappings\":\"AAEA;EACE,gBAAA;EACA,oBAAA;EACA,gCAAA;AADF;;AAIA;EACE,gBAAA;AADF;;AAIA;EACE,iBAAA;EACA,gBAAA;EACA,uBAAA;AADF;AAGE;EACE,eAAA;AADJ;AAIE;EACE,gBAAA;EACA,iBAAA;AAFJ;;AAMA;EACE,UAAA;AAHF;;AAMA;EACE,gBAAA;AAHF;;AAMA;EACE,WAAA;AAHF;;AAOE;EACE,cAAA;AAJJ;;AAQA;EACE,kBAAA;EACA,SAAA;EACA,gBAAA;EACA,aAAA;AALF;;AAQA;EACE,cAAA;EACA,kBAAA;EACA,aAAA;EACA,wBAAA;EACA,yBAAA;EACA,yBAAA;EACA,gBAAA;EACA,eAAA;AALF;;AAQA;EACE,mBAAA;EACA,gBAAA;EACA,uBAAA;EACA,YAAA;AALF\",\"sourcesContent\":[\"@import \\\"src/styles/colors\\\";\\r\\n\\r\\n.heading {\\r\\n  text-align: left;\\r\\n  padding-bottom: 10px;\\r\\n  border-bottom: 1px solid $bottom-border-color;\\r\\n}\\r\\n\\r\\n.filterTypeContainer {\\r\\n  margin-top: 10px;\\r\\n}\\r\\n\\r\\n.listFilters {\\r\\n  max-height: 130px;\\r\\n  overflow: hidden;\\r\\n  align-items: flex-start;\\r\\n\\r\\n  .listFilterItem {\\r\\n    margin-top: 5px;\\r\\n  }\\r\\n\\r\\n  &.expanded {\\r\\n    max-height: none;\\r\\n    overflow: visible;\\r\\n  }\\r\\n}\\r\\n\\r\\n.btnSelectFilter {\\r\\n  width: 95%;\\r\\n}\\r\\n\\r\\n.container {\\r\\n  min-width: 300px;\\r\\n}\\r\\n\\r\\n.strategyHeader {\\r\\n  width: 10px;\\r\\n}\\r\\n\\r\\n.strategyHeader:hover {\\r\\n  .tooltip {\\r\\n    display: block;\\r\\n  }\\r\\n}\\r\\n\\r\\n.tooltip {\\r\\n  position: absolute;\\r\\n  left: 14%;\\r\\n  margin-top: 12px;\\r\\n  display: none;\\r\\n}\\r\\n\\r\\n.tooltipElement {\\r\\n  color: #42abf8;\\r\\n  border-radius: 6px;\\r\\n  padding: 10px;\\r\\n  font-family: Lato, serif;\\r\\n  border: 2px solid #42abf8;\\r\\n  text-transform: uppercase;\\r\\n  font-weight: 700;\\r\\n  font-size: 12px;\\r\\n}\\r\\n\\r\\n.strategyElementClassName {\\r\\n  white-space: nowrap;\\r\\n  overflow: hidden;\\r\\n  text-overflow: ellipsis;\\r\\n  width: 150px;\\r\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"heading\": \"ContestFilters_heading__2zpGe\",\n\t\"filterTypeContainer\": \"ContestFilters_filterTypeContainer__QuWHH\",\n\t\"listFilters\": \"ContestFilters_listFilters__2MlVy\",\n\t\"listFilterItem\": \"ContestFilters_listFilterItem__29aBG\",\n\t\"expanded\": \"ContestFilters_expanded__2nNsm\",\n\t\"btnSelectFilter\": \"ContestFilters_btnSelectFilter__1BuMC\",\n\t\"container\": \"ContestFilters_container__25CDp\",\n\t\"strategyHeader\": \"ContestFilters_strategyHeader__2Y1pI\",\n\t\"tooltip\": \"ContestFilters_tooltip__1L21o\",\n\t\"tooltipElement\": \"ContestFilters_tooltipElement__ehwJP\",\n\t\"strategyElementClassName\": \"ContestFilters_strategyElementClassName__1yvqN\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".Tree_categoriesTree__1AfoW {\\n  font-size: 1rem;\\n  font-family: \\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif;\\n  font-weight: 400;\\n  line-height: 1.5;\\n}\\n\\n.Tree_treeElement__1J2kJ div:nth-child(2) {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  width: 150px;\\n}\\n\\n.Tree_tooltip__2H9jN {\\n  position: absolute;\\n  left: 16%;\\n  display: none;\\n}\\n\\n.Tree_tooltipElement__25ie5 {\\n  width: 183px;\\n  background-color: #B0B0B0;\\n  color: #fff;\\n  border-radius: 6px;\\n}\\n\\n.Tree_categoriesTree__1AfoW:hover .Tree_tooltip__2H9jN {\\n  display: block;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/components/guidelines/trees/Tree.module.scss\"],\"names\":[],\"mappings\":\"AAAA;EACE,eAAA;EACA,uDAAA;EACA,gBAAA;EACA,gBAAA;AACF;;AAEA;EACE,mBAAA;EACA,gBAAA;EACA,uBAAA;EACA,YAAA;AACF;;AAEA;EACE,kBAAA;EACA,SAAA;EACA,aAAA;AACF;;AAEA;EACE,YAAA;EACA,yBAAA;EACA,WAAA;EACA,kBAAA;AACF;;AAGE;EACE,cAAA;AAAJ\",\"sourcesContent\":[\".categoriesTree {\\r\\n  font-size: 1rem;\\r\\n  font-family: \\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif;\\r\\n  font-weight: 400;\\r\\n  line-height: 1.5;\\r\\n}\\r\\n\\r\\n.treeElement div:nth-child(2) {\\r\\n  white-space: nowrap;\\r\\n  overflow: hidden;\\r\\n  text-overflow: ellipsis;\\r\\n  width: 150px;\\r\\n}\\r\\n\\r\\n.tooltip {\\r\\n  position: absolute;\\r\\n  left: 16%;\\r\\n  display: none;\\r\\n}\\r\\n\\r\\n.tooltipElement {\\r\\n  width: 183px;\\r\\n  background-color: #B0B0B0;\\r\\n  color: #fff;\\r\\n  border-radius: 6px;\\r\\n}\\r\\n\\r\\n.categoriesTree:hover {\\r\\n  .tooltip {\\r\\n    display: block;\\r\\n  }\\r\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"categoriesTree\": \"Tree_categoriesTree__1AfoW\",\n\t\"treeElement\": \"Tree_treeElement__1J2kJ\",\n\t\"tooltip\": \"Tree_tooltip__2H9jN\",\n\t\"tooltipElement\": \"Tree_tooltipElement__25ie5\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".ContestCard_contestCardHeader__2WK4O, .ContestCard_contestCard__aTYur {\\n  font-family: Lato, serif;\\n}\\n\\n.ContestCard_contestCardHeader__2WK4O, .ContestCard_contestCard__aTYur {\\n  font-style: normal;\\n}\\n\\n.ContestCard_contestCard__aTYur {\\n  display: grid;\\n  flex-flow: wrap;\\n  grid-template-rows: auto 1fr auto;\\n  align-content: center;\\n  grid-gap: 10px;\\n  min-height: 10vh;\\n  margin: 10px;\\n  padding: 0.7vw;\\n  box-shadow: 0 1px 5px rgba(0, 0, 0, 0.2), 0 3px 4px rgba(0, 0, 0, 0.12), 0 2px 4px rgba(0, 0, 0, 0.14);\\n  border-radius: 8px;\\n}\\n\\n.ContestCard_contestCardHeader__2WK4O {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  font-weight: 500;\\n  font-size: 18px;\\n  min-height: 4vh;\\n  margin: 10px;\\n  border-bottom: 1px solid;\\n  border-bottom-color: #bebebe;\\n}\\n\\n.ContestCard_contestCardControls__3wft9 {\\n  display: flex;\\n  align-items: flex-end;\\n  grid-gap: 10px;\\n}\\n\\n.ContestCard_contestCardCountdown__3C04z {\\n  padding: 10px;\\n  font-size: 12px;\\n  font-weight: bold;\\n  color: #3e4c5d;\\n}\\n\\n.ContestCard_contestCardCategoryLabel__3z11Z {\\n  margin-left: 10px;\\n  font-size: 10px;\\n  text-transform: uppercase;\\n  font-weight: bold;\\n  color: #b5b5b5;\\n}\\n\\n.ContestCard_contestCardTitle__1sRJ0 {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  display: block;\\n  text-overflow: ellipsis;\\n  width: 225px;\\n}\\n\\n.ContestCard_tooltip__18XWQ {\\n  position: absolute;\\n  display: none;\\n  border-bottom: 1px dotted black;\\n}\\n\\n.ContestCard_tooltiptext__3DNsk {\\n  width: 245px;\\n  background-color: grey;\\n  color: #fff;\\n  text-align: center;\\n  border-radius: 6px;\\n  padding: 5px 0;\\n  position: absolute;\\n  bottom: 100%;\\n  left: 50%;\\n}\\n\\n.ContestCard_contestCardHeader__2WK4O:hover .ContestCard_tooltip__18XWQ {\\n  display: block;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/styles/fonts.scss\",\"webpack://src/components/home-contests/contest-card/ContestCard.module.scss\",\"webpack://src/styles/colors.scss\",\"webpack://src/styles/variables.scss\"],\"names\":[],\"mappings\":\"AAMA;EACE,wBAPkB;ACEpB;;ADwBA;EACE,kBAvBkB;ACEpB;;AAFA;EAEE,aAAA;EACA,eAAA;EACA,iCAAA;EACA,qBAAA;EACA,cAAA;EACA,gBAAA;EACA,YAAA;EACA,cAAA;EACA,sGCMiB;EDLjB,kBAAA;AAIF;;AADA;EACE,aAAA;EACA,mBAAA;EACA,8BAAA;EAEA,gBAAA;EACA,eEpBU;EFqBV,eAAA;EACA,YAAA;EACA,wBAAA;EACA,4BCXoB;ADctB;;AAAA;EACE,aAAA;EACA,qBAAA;EACA,cAAA;AAGF;;AAAA;EACE,aAAA;EACA,eErCU;EFsCV,iBAAA;EACA,cCtBqB;ADyBvB;;AAAA;EACE,iBAAA;EACA,eE7CU;EF8CV,yBAAA;EACA,iBAAA;EACA,cC/BsB;ADkCxB;;AAAA;EACE,mBAAA;EACA,gBAAA;EACA,cAAA;EACA,uBAAA;EACA,YAAA;AAGF;;AAAA;EACE,kBAAA;EACA,aAAA;EACA,+BAAA;AAGF;;AAAA;EACE,YAAA;EACA,sBAAA;EACA,WAAA;EACA,kBAAA;EACA,kBAAA;EACA,cAAA;EACA,kBAAA;EACA,YAAA;EACA,SAAA;AAGF;;AACE;EACE,cAAA;AAEJ\",\"sourcesContent\":[\"﻿$font-family-lato: Lato, serif;\\r\\n$font-family-lato-regular: Lato-Regular, serif;\\r\\n$font-family-montserrat: Montserrat, serif;\\r\\n$font-family-montserrat-medium: Montserrat-Medium, serif;\\r\\n$font-style-normal: normal;\\r\\n\\r\\n%font-family-lato {\\r\\n  font-family: $font-family-lato;\\r\\n  @extend %font-style-normal;\\r\\n}\\r\\n\\r\\n%font-family-lato-regular {\\r\\n  font-family: $font-family-lato-regular;\\r\\n  @extend %font-style-normal;\\r\\n}\\r\\n\\r\\n%font-family-montserrat {\\r\\n  font-family: $font-family-montserrat;\\r\\n  @extend %font-style-normal;\\r\\n}\\r\\n\\r\\n%font-family-montserrat-medium {\\r\\n  font-family: $font-family-montserrat-medium;\\r\\n  @extend %font-style-normal;\\r\\n}\\r\\n\\r\\n%font-style-normal {\\r\\n  font-style: $font-style-normal;\\r\\n}\",\".contestCardHeader, .contestCard {\\n  font-family: Lato, serif;\\n}\\n\\n.contestCardHeader, .contestCard {\\n  font-style: normal;\\n}\\n\\n.contestCard {\\n  display: grid;\\n  flex-flow: wrap;\\n  grid-template-rows: auto 1fr auto;\\n  align-content: center;\\n  grid-gap: 10px;\\n  min-height: 10vh;\\n  margin: 10px;\\n  padding: 0.7vw;\\n  box-shadow: 0 1px 5px rgba(0, 0, 0, 0.2), 0 3px 4px rgba(0, 0, 0, 0.12), 0 2px 4px rgba(0, 0, 0, 0.14);\\n  border-radius: 8px;\\n}\\n\\n.contestCardHeader {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  font-weight: 500;\\n  font-size: 18px;\\n  min-height: 4vh;\\n  margin: 10px;\\n  border-bottom: 1px solid;\\n  border-bottom-color: #bebebe;\\n}\\n\\n.contestCardControls {\\n  display: flex;\\n  align-items: flex-end;\\n  grid-gap: 10px;\\n}\\n\\n.contestCardCountdown {\\n  padding: 10px;\\n  font-size: 12px;\\n  font-weight: bold;\\n  color: #3e4c5d;\\n}\\n\\n.contestCardCategoryLabel {\\n  margin-left: 10px;\\n  font-size: 10px;\\n  text-transform: uppercase;\\n  font-weight: bold;\\n  color: #b5b5b5;\\n}\\n\\n.contestCardTitle {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  display: block;\\n  text-overflow: ellipsis;\\n  width: 225px;\\n}\\n\\n.tooltip {\\n  position: absolute;\\n  display: none;\\n  border-bottom: 1px dotted black;\\n}\\n\\n.tooltiptext {\\n  width: 245px;\\n  background-color: grey;\\n  color: #fff;\\n  text-align: center;\\n  border-radius: 6px;\\n  padding: 5px 0;\\n  position: absolute;\\n  bottom: 100%;\\n  left: 50%;\\n}\\n\\n.contestCardHeader:hover .tooltip {\\n  display: block;\\n}\",\"$white-color: #fff;\\r\\n$warning-color: #FEC112;\\r\\n$grey-color: #565656;\\r\\n$light-blue-color: #42abf8;\\r\\n\\r\\n$primary-blue: #44a9f8;\\r\\n$background-color-footer: #3e4c5d;\\r\\n$background-color-light-gray: #fdfdfd;\\r\\n$wrappers-border-color: #cbcbcb;\\r\\n$success-background-color: #42abf8;\\r\\n$success-font-color: #fff;\\r\\n$color-btn-secondary: $light-blue-color;\\r\\n$color-btn-disabled: #bebebe;\\r\\n$background-color-btn-primary: $success-background-color;\\r\\n$background-color-btn-primary-hover: $primary-blue;\\r\\n$background-color-btn-secondary: white;\\r\\n$background-color-btn-secondary-hover: #e3f3fd;\\r\\n$bottom-border-color: #bebebe;\\r\\n$text-light-gray-color: #b5b5b5;\\r\\n$text-dark-gray-color: #3e4c5d;\\r\\n$box-shadow-color: 0 1px 5px rgb(0 0 0 / 20%), 0 3px 4px rgb(0 0 0 / 12%), 0 2px 4px rgb(0 0 0 / 14%);\\r\\n$primary-red: #fc4c50;\\r\\n$primary-green: #23be5e;\\r\\n$icon-green: green;\\r\\n$icon-blue: blue;\\r\\n$icon-red: red;\\r\\n\",\"﻿// Font-Sizes\\r\\n$f-size-10: 10px;\\r\\n$f-size-12: 12px;\\r\\n$f-size-16: 16px;\\r\\n$f-size-18: 18px;\\r\\n$f-size-24: 24px;\\r\\n$f-size-30: 30px;\\r\\n$f-size-36: 36px;\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"contestCardHeader\": \"ContestCard_contestCardHeader__2WK4O\",\n\t\"contestCard\": \"ContestCard_contestCard__aTYur\",\n\t\"contestCardControls\": \"ContestCard_contestCardControls__3wft9\",\n\t\"contestCardCountdown\": \"ContestCard_contestCardCountdown__3C04z\",\n\t\"contestCardCategoryLabel\": \"ContestCard_contestCardCategoryLabel__3z11Z\",\n\t\"contestCardTitle\": \"ContestCard_contestCardTitle__1sRJ0\",\n\t\"tooltip\": \"ContestCard_tooltip__18XWQ\",\n\t\"tooltiptext\": \"ContestCard_tooltiptext__3DNsk\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { isNil } from 'lodash';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport List, { Orientation } from '../../guidelines/lists/List';\r\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\r\n\r\nimport { FilterType, IFilter } from '../../../common/contest-types';\r\nimport ContestCategories from '../contest-categories/ContestCategories';\r\n\r\nimport styles from './ContestFilters.module.scss';\r\nimport Button, { ButtonSize, ButtonType } from '../../guidelines/buttons/Button';\r\nimport { useContests } from '../../../hooks/use-contests';\r\nimport { groupByType } from '../../../common/filter-utils';\r\nimport ExpandButton from '../../guidelines/buttons/ExpandButton';\r\nimport concatClassNames from '../../../utils/class-names';\r\nimport { useContestStrategyFilters } from '../../../hooks/use-contest-strategy-filters';\r\nimport { useContestCategories } from '../../../hooks/use-contest-categories';\r\n\r\ninterface IContestFiltersProps {\r\n    onFilterClick: (filter: IFilter) => void;\r\n}\r\n\r\ninterface IFiltersGroup {\r\n    type: FilterType;\r\n    filters: IFilter[];\r\n}\r\n\r\nconst ContestFilters = ({ onFilterClick }: IContestFiltersProps) => {\r\n    const [ filtersGroups, setFiltersGroups ] = useState<IFiltersGroup[]>([]);\r\n    const [ expanded, setExpanded ] = useState(false);\r\n    const [ defaultSelected, setDefaultSelected ] = useState('');\r\n    const [ searchParams ] = useSearchParams();\r\n    const [ isLoaded, setIsLoaded ] = useState(false);\r\n    const { actions: { load: loadStrategies } } = useContestStrategyFilters();\r\n    const { actions: { load: loadCategories } } = useContestCategories();\r\n\r\n    const {\r\n        state: {\r\n            possibleFilters,\r\n            filters,\r\n        },\r\n    } = useContests();\r\n\r\n    const handleFilterClick = useCallback(\r\n        (filterId: number) => {\r\n            const filter = possibleFilters.find(({ id }) => filterId === id);\r\n\r\n            if (isNil(filter)) {\r\n                return;\r\n            }\r\n\r\n            onFilterClick(filter);\r\n        },\r\n        [ possibleFilters, onFilterClick ],\r\n    );\r\n\r\n    const getRenderStatusFilterItem = useCallback(\r\n        (type: FilterType) => ({ id, name }: IFilter) => {\r\n            const filterIsSelected = filters.some((f) => f.name === name);\r\n            const buttonType = filterIsSelected\r\n                ? ButtonType.primary\r\n                : ButtonType.secondary;\r\n\r\n            const btnClassName = type === FilterType.Status\r\n                ? styles.btnSelectFilter\r\n                : '';\r\n\r\n            return (\r\n                <Button\r\n                    type={buttonType}\r\n                    onClick={() => handleFilterClick(id)}\r\n                    className={btnClassName}\r\n                    text={name}\r\n                    size={ButtonSize.small}\r\n                />\r\n            );\r\n        },\r\n        [ handleFilterClick, filters ],\r\n    );\r\n\r\n    const strategyHeader = 'strategy-Header';\r\n    const strategyHeaderClassName = concatClassNames(strategyHeader, styles.strategyHeader);\r\n    const strategyElement = 'strategy-Element';\r\n    const strategyElementClassName = concatClassNames(strategyElement, styles.strategyElementClassName);\r\n    const strategyTooltip = 'tooltip';\r\n    const strategyTooltipClassName = concatClassNames(strategyTooltip, styles.tooltip);\r\n    const strategyTooltipElement = 'tooltip-Element';\r\n    const strategyTooltipElementClassName = concatClassNames(strategyTooltipElement, styles.tooltipElement);\r\n\r\n    const getRenderStrategyFilterItem = useCallback(\r\n        (type: FilterType) => ({ id, name }: IFilter) => {\r\n            const filterIsSelected = filters.some((f) => f.name === name);\r\n            const buttonType = filterIsSelected\r\n                ? ButtonType.primary\r\n                : ButtonType.secondary;\r\n\r\n            const btnClassName = type === FilterType.Strategy\r\n                ? styles.btnSelectFilter\r\n                : '';\r\n\r\n            return (\r\n                <div className={strategyHeaderClassName}>\r\n                    <div className={strategyTooltipClassName}>\r\n                        <span className={strategyTooltipElementClassName}>{name}</span>\r\n                    </div>\r\n                    <Button\r\n                        type={buttonType}\r\n                        onClick={() => handleFilterClick(id)}\r\n                        className={btnClassName + strategyElementClassName}\r\n                        text={name}\r\n                        size={ButtonSize.small}\r\n                    />\r\n                </div>\r\n            );\r\n        },\r\n        [ strategyTooltipClassName, strategyTooltipElementClassName, strategyElementClassName,\r\n            strategyHeaderClassName, handleFilterClick, filters ],\r\n    );\r\n    const toggleFiltersExpanded = useCallback(\r\n        (isExpanded) => setExpanded(isExpanded),\r\n        [],\r\n    );\r\n\r\n    const renderExpandButton = useCallback(\r\n        (allFilters: IFilter[]) => {\r\n            const maxFiltersToDisplayCount = 3;\r\n\r\n            return allFilters.length > maxFiltersToDisplayCount\r\n                ? <ExpandButton onExpandChanged={toggleFiltersExpanded}/>\r\n                : null;\r\n        },\r\n        [ toggleFiltersExpanded ],\r\n    );\r\n\r\n    const renderFilter = useCallback(\r\n        (fg: IFiltersGroup) => {\r\n            const { type, filters: groupFilters } = fg;\r\n            const className = concatClassNames(\r\n                styles.listFilters,\r\n                expanded\r\n                    ? styles.expanded\r\n                    : '',\r\n            );\r\n\r\n            const strategyFilter = groupFilters.filter(t => t.type === FilterType.Strategy);\r\n            const statusFilter = groupFilters.filter(t => t.type === FilterType.Status);\r\n\r\n            const listOrientation = type === FilterType.Status\r\n                ? Orientation.horizontal\r\n                : Orientation.vertical;\r\n\r\n            return (\r\n                <div className={styles.filterTypeContainer}>\r\n                    <Heading\r\n                        type={HeadingType.small}\r\n                        className={styles.heading}\r\n                    >\r\n                        {type}\r\n                    </Heading>\r\n                    <List\r\n                        values={statusFilter}\r\n                        itemFunc={getRenderStatusFilterItem(type)}\r\n                        orientation={listOrientation}\r\n                        className={className}\r\n                        itemClassName={styles.listFilterItem}\r\n                        fullWidth\r\n                    />\r\n                    <List\r\n                        values={strategyFilter}\r\n                        itemFunc={getRenderStrategyFilterItem(type)}\r\n                        orientation={listOrientation}\r\n                        className={className}\r\n                        itemClassName={styles.listFilterItem}\r\n                        fullWidth\r\n                    />\r\n                    {renderExpandButton(groupFilters)}\r\n                </div>\r\n            );\r\n        },\r\n        [ getRenderStatusFilterItem, getRenderStrategyFilterItem, expanded, renderExpandButton ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            const plainFilters = possibleFilters.filter(({ type }) => type !== FilterType.Category);\r\n\r\n            setFiltersGroups(groupByType(plainFilters));\r\n        },\r\n        [ possibleFilters ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            if (isLoaded) {\r\n                return;\r\n            }\r\n\r\n            const searchParamName = FilterType.Category.toString();\r\n            let selectedCategory = searchParams.get(searchParamName);\r\n\r\n            if (isNil(selectedCategory)) {\r\n                selectedCategory = searchParams.get(searchParamName.toLowerCase());\r\n            }\r\n\r\n            if (isNil(selectedCategory)) {\r\n                return;\r\n            }\r\n\r\n            setIsLoaded(true);\r\n            setDefaultSelected(selectedCategory.toString());\r\n        },\r\n        [ isLoaded, searchParams ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            (async () => {\r\n                await loadStrategies();\r\n            })();\r\n        },\r\n        [ loadStrategies ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            (async () => {\r\n                await loadCategories();\r\n            })();\r\n        },\r\n        [ loadCategories ],\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <ContestCategories\r\n                className={styles.filterTypeContainer}\r\n                onCategoryClick={onFilterClick}\r\n                defaultSelected={defaultSelected}\r\n            />\r\n            <List\r\n                values={filtersGroups}\r\n                itemFunc={renderFilter}\r\n                fullWidth\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContestFilters;\r\n","var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-7-1!../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../node_modules/resolve-url-loader/index.js??ref--5-oneOf-7-3!../../../../node_modules/sass-loader/dist/cjs.js??ref--5-oneOf-7-4!./Tree.module.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-7-1!../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../node_modules/resolve-url-loader/index.js??ref--5-oneOf-7-3!../../../../node_modules/sass-loader/dist/cjs.js??ref--5-oneOf-7-4!./Tree.module.scss\",\n      function () {\n        content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-7-1!../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../node_modules/resolve-url-loader/index.js??ref--5-oneOf-7-3!../../../../node_modules/sass-loader/dist/cjs.js??ref--5-oneOf-7-4!./Tree.module.scss\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { TreeItem, TreeView } from '@material-ui/lab';\r\nimport { MdChevronRight, MdExpandMore } from 'react-icons/md';\r\nimport { isArray, isEmpty } from 'lodash';\r\n\r\nimport concatClassNames from '../../../utils/class-names';\r\nimport styles from './Tree.module.scss';\r\n\r\ninterface ITreeItemType {\r\n    id: string,\r\n    name: string,\r\n    parentId?: string,\r\n    children?: ITreeItemType[],\r\n}\r\n\r\ninterface ITreeProps {\r\n    items: ITreeItemType[];\r\n    onTreeLabelClick: (node: ITreeItemType) => void;\r\n    defaultSelected?: string;\r\n    defaultExpanded?: string[];\r\n}\r\n\r\nconst Tree = ({\r\n    items,\r\n    onTreeLabelClick,\r\n    defaultSelected,\r\n    defaultExpanded = [],\r\n}: ITreeProps) => {\r\n    const [ expanded, setExpanded ] = useState([] as string[]);\r\n    const [ selected, setSelected ] = useState('');\r\n\r\n    const handleTreeItemClick = useCallback(\r\n        (node: ITreeItemType) => {\r\n            const id = node.id.toString();\r\n            let newExpanded = Array.from(expanded);\r\n\r\n            if (expanded.includes(id)) {\r\n                newExpanded = newExpanded.filter((e) => e !== id);\r\n            } else {\r\n                newExpanded.push(id);\r\n            }\r\n\r\n            setExpanded(newExpanded);\r\n        },\r\n        [ expanded, setExpanded ],\r\n    );\r\n\r\n    const handleLabelClick = useCallback(\r\n        (node: ITreeItemType) => {\r\n            setSelected(node.id.toString());\r\n\r\n            onTreeLabelClick(node);\r\n        },\r\n        [ onTreeLabelClick ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            if (isEmpty(selected) && defaultSelected) {\r\n                setSelected(defaultSelected);\r\n            }\r\n        },\r\n        [ defaultSelected, selected ],\r\n    );\r\n\r\n    useEffect(\r\n        () => {\r\n            if (isEmpty(expanded) && !isEmpty(defaultExpanded)) {\r\n                setExpanded(defaultExpanded);\r\n            }\r\n        },\r\n        [ defaultExpanded, expanded ],\r\n    );\r\n\r\n    const categoriesTree = 'tree-Header';\r\n    const categoriesTreeClassName = concatClassNames(categoriesTree, styles.categoriesTree);\r\n    const treeElement = 'tree-Element';\r\n    const treeElementClassName = concatClassNames(treeElement, styles.treeElement);\r\n    const treeTooltip = 'tooltip';\r\n    const treeTooltipClassName = concatClassNames(treeTooltip, styles.tooltip);\r\n    const treeTooltipElement = 'tooltip-Element';\r\n    const treeTooltipElementClassName = concatClassNames(treeTooltipElement, styles.tooltipElement);\r\n\r\n    const renderTree = useCallback((node: ITreeItemType) => (\r\n        <div className={categoriesTreeClassName}>\r\n            <div className={treeTooltipClassName}>\r\n                <div className={treeTooltipElementClassName}\r\n                     key={node.id}>\r\n                    {node.name}\r\n                </div>\r\n            </div>\r\n            <TreeItem\r\n                key={node.id}\r\n                className={treeElementClassName}\r\n                nodeId={node.id.toString()}\r\n                label={node.name}\r\n                onClick={() => handleTreeItemClick(node)}\r\n                onLabelClick={() => handleLabelClick(node)}\r\n            >\r\n                {isArray(node.children)\r\n                    ? node.children.map((child) => renderTree(child))\r\n                    : null}\r\n            </TreeItem>\r\n        </div>\r\n    ), [ categoriesTreeClassName, treeTooltipClassName, treeTooltipElementClassName,\r\n        treeElementClassName, handleLabelClick, handleTreeItemClick ]);\r\n\r\n    const renderTreeView = (treeItems: ITreeItemType[]) => treeItems.map((c) => renderTree(c));\r\n\r\n    return (\r\n        <TreeView\r\n            aria-label=\"rich object\"\r\n            defaultCollapseIcon={<MdExpandMore/>}\r\n            defaultExpandIcon={<MdChevronRight/>}\r\n            selected={selected}\r\n            expanded={expanded}\r\n        >\r\n            <div className={treeTooltipClassName}> {renderTreeView(items)}</div>\r\n            {renderTreeView(items)}\r\n        </TreeView>\r\n    );\r\n};\r\n\r\nexport default Tree;\r\n\r\nexport type {\r\n    ITreeItemType,\r\n};\r\n","import * as React from 'react';\r\nimport { useCallback } from 'react';\r\nimport Countdown, { Metric } from '../../guidelines/countdown/Countdown';\r\nimport { convertToSecondsRemaining } from '../../../utils/dates';\r\nimport { IIndexContestsType } from '../../../common/types';\r\nimport concatClassNames from '../../../utils/class-names';\r\n\r\nimport { ButtonSize, ButtonState, LinkButton, LinkButtonType } from '../../guidelines/buttons/Button';\r\nimport LockIcon from '../../guidelines/icons/LockIcon';\r\nimport styles from './ContestCard.module.scss';\r\n\r\ninterface IContestCardProps {\r\n    contest: IIndexContestsType\r\n}\r\n\r\nconst ContestCard = ({ contest }: IContestCardProps) => {\r\n    const {\r\n        id,\r\n        name,\r\n        category,\r\n        canBePracticed,\r\n        practiceEndTime,\r\n        canBeCompeted,\r\n        endTime,\r\n    } = contest;\r\n    const contestCard = 'card-contests';\r\n    const contestCardClassName = concatClassNames(styles.contestCard, contestCard);\r\n    const contestCardHeader = 'card-header';\r\n    const contestCardHeaderClassName = concatClassNames(styles.contestCardHeader, contestCardHeader);\r\n    const contestCardCategory = 'card-category';\r\n    const contestCardCategoryClassName = concatClassNames(styles.contestCardCategoryLabel, contestCardCategory);\r\n    const contestCardCounter = 'card-counter';\r\n    const contestCardCounterClassName = concatClassNames(styles.contestCardCountdown, contestCardCounter);\r\n    const contestCardControlBtns = 'card-control-buttons';\r\n    const contestCardControlBtnsClassName = concatClassNames(styles.contestCardControls, contestCardControlBtns);\r\n    const contestCardTitle = 'card-title';\r\n    const contestCardTitleClassName=concatClassNames(styles.contestCardTitle,contestCardTitle);\r\n    const contestCardTooltip='tooltip';\r\n    const contestCardTooltipClassName=concatClassNames(styles.tooltip,contestCardTooltip);\r\n    const contestCardTooltipText='tooltiptext';\r\n    const contestCardTooltipTextClassName=concatClassNames(styles.tooltiptext,contestCardTooltipText);\r\n\r\n    const renderCountdown = useCallback(\r\n        () => {\r\n            if (canBePracticed && practiceEndTime == null) {\r\n                return <p>No practice end time.</p>;\r\n            }\r\n\r\n            const endDate = canBeCompeted && !canBePracticed\r\n                ? endTime\r\n                : practiceEndTime;\r\n\r\n            return (\r\n                <Countdown\r\n                  key={id}\r\n                  duration={convertToSecondsRemaining(new Date(endDate))}\r\n                  metric={Metric.seconds}\r\n                />\r\n            );\r\n        },\r\n        [ canBeCompeted, canBePracticed, endTime, id, practiceEndTime ],\r\n    );\r\n\r\n    const renderContestLockIcon = useCallback(\r\n        () => {\r\n            const { hasContestPassword, hasPracticePassword } = contest;\r\n            \r\n            return (canBeCompeted && hasContestPassword) || (canBePracticed && hasPracticePassword)\r\n                ? <LockIcon />\r\n                : null;\r\n        },\r\n        [ canBeCompeted, canBePracticed, contest ],\r\n    );\r\n\r\n    return (\r\n        <div className={contestCardClassName}>\r\n            <div className={contestCardHeaderClassName}>\r\n                <div className={contestCardTooltipClassName}>\r\n                    <span className={contestCardTooltipTextClassName}>{name}</span>\r\n                </div>\r\n                <span className={contestCardTitleClassName}>{name}</span>\r\n                { renderContestLockIcon() }\r\n            </div>\r\n            <div className={contestCardCategoryClassName}>{category}</div>\r\n            <div className={contestCardCounterClassName}>\r\n                {renderCountdown()}\r\n            </div>\r\n            <div className={contestCardControlBtnsClassName}>\r\n                <LinkButton\r\n                  id=\"button-card-compete\"\r\n                  to={`/contests/${id}/register/compete`}\r\n                  text=\"Compete\"\r\n                  state={\r\n                        canBeCompeted\r\n                            ? ButtonState.enabled\r\n                            : ButtonState.disabled\r\n                    }\r\n                  size={ButtonSize.small}\r\n                />\r\n                <LinkButton\r\n                  id=\"button-card-practice\"\r\n                  to={`/contests/${id}/register/practice`}\r\n                  text=\"Practice\"\r\n                  type={LinkButtonType.secondary}\r\n                  state={\r\n                        canBePracticed\r\n                            ? ButtonState.enabled\r\n                            : ButtonState.disabled\r\n                    }\r\n                  size={ButtonSize.small}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContestCard;\r\n","import React, { ReactNode, useCallback, useMemo } from 'react';\r\n\r\nimport { isNil } from 'lodash';\r\n\r\nimport { format } from '../../utils/number-utils';\r\n\r\nimport { IStatistic } from '../../common/statistics-types';\r\n\r\nimport Heading, { HeadingType } from '../guidelines/headings/Heading';\r\n\r\nimport styles from './StatisticBox.module.scss';\r\n\r\nenum StatisticBoxSize {\r\n    small = 1,\r\n    medium = 2,\r\n    big = 3,\r\n}\r\n\r\ninterface IStatisticBoxProps {\r\n    statistic: IStatistic;\r\n    renderIcon?: (() => ReactNode) | null;\r\n}\r\n\r\nconst StatisticBox = ({\r\n    statistic,\r\n    renderIcon = null,\r\n}: IStatisticBoxProps) => {\r\n    const { name, value } = statistic;\r\n\r\n    const formattedValue = useMemo(\r\n        () => format(value),\r\n        [ value ],\r\n    );\r\n\r\n    const renderIconInternal = useCallback(\r\n        () => {\r\n            if (isNil(renderIcon)) {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    {renderIcon()}\r\n                </div>\r\n            );\r\n        },\r\n        [ renderIcon ],\r\n    );\r\n\r\n    return (\r\n        <div className={styles.box}>\r\n            {renderIconInternal()}\r\n            <div className={styles.valuesContainer}>\r\n                <Heading\r\n                  type={HeadingType.small}\r\n                  className={styles.name}\r\n                >\r\n                    {name}\r\n                </Heading>\r\n                <Heading\r\n                  className={styles.value}\r\n                  type={HeadingType.secondary}\r\n                >\r\n                    {formattedValue}\r\n                </Heading>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StatisticBox;\r\n\r\nexport {\r\n    StatisticBoxSize,\r\n};\r\n","import * as React from 'react';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { isNil } from 'lodash';\r\nimport { useSubmissionsDetails } from '../../../hooks/submissions/use-submissions-details';\r\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\r\nimport CodeEditor from '../../code-editor/CodeEditor';\r\nimport SubmissionResults from '../submission-results/SubmissionResults';\r\nimport concatClassNames from '../../../utils/class-names';\r\nimport RefreshableSubmissionsList from '../submissions-list/RefreshableSubmissionsList';\r\nimport styles from './SubmissionDetails.module.scss';\r\n\r\nconst SubmissionDetails = () => {\r\n    const {\r\n        state: {\r\n            currentSubmission,\r\n            currentProblemSubmissionResults,\r\n        },\r\n        actions: { getSubmissionResults },\r\n    } = useSubmissionsDetails();\r\n\r\n    const problemNameHeadingText = useMemo(\r\n        () => `${currentSubmission?.problem.name} - ${currentSubmission?.problem.id}`,\r\n        [ currentSubmission?.problem.id, currentSubmission?.problem.name ],\r\n    );\r\n\r\n    const detailsHeadingText = useMemo(\r\n        () => `Details #${currentSubmission?.id}`,\r\n        [ currentSubmission?.id ],\r\n    );\r\n\r\n    const { submissionType } = currentSubmission || {};\r\n\r\n    const submissionsNavigationClassName = 'submissionsNavigation';\r\n\r\n    const submissionsDetails = 'submissionDetails';\r\n    const submissionDetailsClassName = concatClassNames(styles.navigation, styles.submissionDetails, submissionsDetails);\r\n\r\n    useEffect(() => {\r\n        if (isNil(currentSubmission)) {\r\n            return;\r\n        }\r\n\r\n        const { problem: { id: problemId }, isOfficial } = currentSubmission;\r\n\r\n        (async () => {\r\n            await getSubmissionResults(problemId, isOfficial);\r\n        })();\r\n    }, [ currentSubmission, getSubmissionResults ]);\r\n\r\n    if (isNil(currentSubmission)) {\r\n        return <div>No details fetched.</div>;\r\n    }\r\n\r\n    return (\r\n        <div className={styles.detailsWrapper}>\r\n            <div className={styles.navigation}>\r\n                <div className={submissionsNavigationClassName}>\r\n                    <Heading type={HeadingType.secondary}>Submissions</Heading>\r\n                </div>\r\n                <RefreshableSubmissionsList\r\n                  items={currentProblemSubmissionResults}\r\n                  selectedSubmission={currentSubmission}\r\n                  className={styles.submissionsList}\r\n                />\r\n            </div>\r\n            <div className={styles.code}>\r\n                <Heading\r\n                  type={HeadingType.secondary}\r\n                  className={styles.taskHeading}\r\n                >\r\n                    {problemNameHeadingText}\r\n                </Heading>\r\n                <CodeEditor\r\n                  readOnly\r\n                  code={currentSubmission?.content}\r\n                  selectedSubmissionType={submissionType}\r\n                />\r\n            </div>\r\n            <div className={submissionDetailsClassName}>\r\n                <Heading type={HeadingType.secondary}>{detailsHeadingText}</Heading>\r\n                <SubmissionResults testRuns={currentSubmission.testRuns} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SubmissionDetails;\r\n","import React, { useCallback } from 'react';\r\nimport { isNil } from 'lodash';\r\nimport SubmissionsList, { ISubmissionsListProps } from './SubmissionsList';\r\nimport { useSubmissionsDetails } from '../../../hooks/submissions/use-submissions-details';\r\nimport Button, { ButtonType } from '../../guidelines/buttons/Button';\r\n\r\ninterface IRefreshableSubmissionsListProps extends ISubmissionsListProps {\r\n}\r\n\r\nconst RefreshableSubmissionsList = ({\r\n    items,\r\n    selectedSubmission,\r\n    className = '',\r\n}: IRefreshableSubmissionsListProps) => {\r\n    const {\r\n        state: { currentSubmission },\r\n        actions: { getSubmissionResults },\r\n    } = useSubmissionsDetails();\r\n\r\n    const submissionsReloadBtnClassName = 'submissionReloadBtn';\r\n\r\n    const handleReloadClick = useCallback(async () => {\r\n        if (isNil(currentSubmission)) {\r\n            return;\r\n        }\r\n\r\n        const { problem: { id: problemId }, isOfficial } = currentSubmission;\r\n\r\n        await getSubmissionResults(problemId, isOfficial);\r\n    }, [ currentSubmission, getSubmissionResults ]);\r\n    \r\n    return (\r\n        <>\r\n            <SubmissionsList\r\n                items={items}\r\n                selectedSubmission={selectedSubmission}\r\n                className={className} />\r\n            \r\n            <Button\r\n                onClick={handleReloadClick}\r\n                text=\"Reload\"\r\n                type={ButtonType.secondary}\r\n                className={submissionsReloadBtnClassName} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RefreshableSubmissionsList;\r\n","import React, { useCallback } from 'react';\r\nimport logo from './softuni-logo-horizontal.svg';\r\nimport PageNav from '../nav/PageNav';\r\nimport Heading, { HeadingType } from '../../components/guidelines/headings/Heading';\r\nimport { useAuth } from '../../hooks/use-auth';\r\nimport { useUrls } from '../../hooks/use-urls';\r\nimport { ButtonSize, LinkButton, LinkButtonType } from '../../components/guidelines/buttons/Button';\r\nimport styles from './PageHeader.module.scss';\r\n\r\nconst PageHeader = () => {\r\n    const { state: { user } } = useAuth();\r\n\r\n    const { getAdministrationNavigation } = useUrls();\r\n\r\n    const renderLinks = useCallback(() => {\r\n        const administrationLink = user.permissions.canAccessAdministration\r\n            ? (\r\n                <LinkButton\r\n                  type={LinkButtonType.plain}\r\n                  size={ButtonSize.none}\r\n                  to={getAdministrationNavigation()}\r\n                  isToExternal\r\n                  text=\"Administration\"\r\n                />\r\n            )\r\n            : null;\r\n\r\n        return (\r\n            <>\r\n                <LinkButton\r\n                  id=\"nav-contests-link\"\r\n                  type={LinkButtonType.plain}\r\n                  size={ButtonSize.none}\r\n                  to=\"/contests\"\r\n                  text=\"Contests\"\r\n                />\r\n                <LinkButton\r\n                  id=\"nav-submissions-link\"\r\n                  type={LinkButtonType.plain}\r\n                  size={ButtonSize.none}\r\n                  to=\"/submissions\"\r\n                  text=\"Submissions\"\r\n                />\r\n                { administrationLink }\r\n            </>\r\n        );\r\n    }, [ getAdministrationNavigation, user.permissions.canAccessAdministration ]);\r\n\r\n    return (\r\n        <header id=\"pageHeader\" className={styles.header}>\r\n            <div className={styles.headerSize}>\r\n                <div className={styles.headerLinks}>\r\n                    <Heading\r\n                      id=\"page-header-h2\"\r\n                      type={HeadingType.secondary}\r\n                      className={styles.heading}\r\n                    >\r\n                        <a href=\"/\">\r\n                            <img src={logo} alt=\"softuni logo\" />\r\n                        </a>\r\n                    </Heading>\r\n                    { renderLinks() }\r\n                </div>\r\n                <PageNav />\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default PageHeader;\r\n","import React, { useCallback } from 'react';\r\nimport { isEmpty, isNil } from 'lodash';\r\nimport ContestFilters from '../../components/contests/contests-filters/ContestFilters';\r\nimport { useContests } from '../../hooks/use-contests';\r\nimport { setLayout } from '../shared/set-layout';\r\nimport ContestCard from '../../components/home-contests/contest-card/ContestCard';\r\nimport List, { Orientation } from '../../components/guidelines/lists/List';\r\nimport PaginationControls from '../../components/guidelines/pagination/PaginationControls';\r\nimport { FilterType, IFilter } from '../../common/contest-types';\r\nimport Heading, { HeadingType } from '../../components/guidelines/headings/Heading';\r\nimport Breadcrumb from '../../components/guidelines/breadcrumb/Breadcrumb';\r\nimport { IIndexContestsType } from '../../common/types';\r\nimport { ICategoriesBreadcrumbItem, useCategoriesBreadcrumbs } from '../../hooks/use-contest-categories-breadcrumb';\r\nimport { LinkButton, LinkButtonType } from '../../components/guidelines/buttons/Button';\r\nimport concatClassNames from '../../utils/class-names';\r\nimport styles from './ContestsPage.module.scss';\r\n\r\nconst getBreadcrumbItemPath = (id: string) => `/contests?${FilterType.Category.toString()}=${id}`;\r\n\r\nconst ContestsPage = () => {\r\n    const {\r\n        state: {\r\n            contests,\r\n            pagesInfo,\r\n            currentPage,\r\n        },\r\n        actions: {\r\n            toggleFilter,\r\n            changePage,\r\n        },\r\n    } = useContests();\r\n    \r\n    const { state: { breadcrumbItems } } = useCategoriesBreadcrumbs();\r\n\r\n    const handlePageChange = useCallback(\r\n        (page: number) => changePage(page),\r\n        [ changePage ],\r\n    );\r\n\r\n    const handleFilterClick = useCallback(\r\n        (filter: IFilter) => toggleFilter(filter),\r\n        [ toggleFilter ],\r\n    );\r\n\r\n    const renderContest = useCallback(\r\n        (contest: IIndexContestsType) => (\r\n            <ContestCard contest={contest}/>\r\n        ),\r\n        [],\r\n    );\r\n\r\n    const renderContests = useCallback(\r\n        () => {\r\n            if (isNil(contests) || isEmpty(contests)) {\r\n                return (\r\n                    <Heading type={HeadingType.secondary}>\r\n                        No contests apply for this filter\r\n                    </Heading>\r\n                );\r\n            }\r\n\r\n            const { pagesCount } = pagesInfo;\r\n\r\n            return (\r\n                <div>\r\n                    <PaginationControls\r\n                        count={pagesCount}\r\n                        page={currentPage}\r\n                        onChange={handlePageChange}\r\n                    />\r\n                    <List\r\n                        values={contests}\r\n                        itemFunc={renderContest}\r\n                        itemClassName={styles.contestItem}\r\n                        orientation={Orientation.horizontal}\r\n                        wrap\r\n                    />\r\n                </div>\r\n            );\r\n        },\r\n        [ contests, currentPage, handlePageChange, pagesInfo, renderContest ],\r\n    );\r\n\r\n    const renderCategoriesBreadcrumbItem = useCallback(\r\n        (categoryBreadcrumbItem: ICategoriesBreadcrumbItem) => {\r\n            const { value, isLast, id } = categoryBreadcrumbItem;\r\n            const classNames = concatClassNames(styles.breadcrumbBtn, isLast\r\n                ? styles.breadcrumbBtnLast\r\n                : '');\r\n\r\n            return (\r\n                <LinkButton type={LinkButtonType.plain} className={classNames} to={getBreadcrumbItemPath(id)} text={value} />\r\n            );\r\n        },\r\n        [ ],\r\n    );\r\n    \r\n    const mainHeader='main-header';\r\n    const mainHeaderClassName=concatClassNames(mainHeader,styles.mainHeader);\r\n\r\n    return (\r\n        <>\r\n            <Breadcrumb items={breadcrumbItems} itemFunc={renderCategoriesBreadcrumbItem} />\r\n            <div className={styles.container}>\r\n                <ContestFilters onFilterClick={handleFilterClick}/>\r\n                <div className={mainHeaderClassName}>\r\n                    {renderContests()}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default setLayout(ContestsPage, true);\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAWA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAQA;AAnBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAaA;AAxBA;AA4BA;AACA;AAAA;AAIA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AAEA;AAAA;AACA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAIA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AA5NA;AAIA;;;AAJA;AA6NA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;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","sourceRoot":""}