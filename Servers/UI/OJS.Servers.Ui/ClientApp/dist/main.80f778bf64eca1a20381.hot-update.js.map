{"version":3,"file":"main.80f778bf64eca1a20381.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/contests/use-current-contest-results.tsx"],"sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { isNil } from 'lodash';\nimport { IHaveChildrenProps } from '../../components/common/Props';\nimport { IContestResultsParticipationType, IContestResultsType } from './types';\nimport { useLoading } from '../use-loading';\nimport { useHttp } from '../use-http';\nimport { IGetContestResultsParams } from '../../common/url-types';\nimport { useUrls } from '../use-urls';\nimport { UrlType } from '../../common/common-types';\n\ninterface ICurrentContestResultsContext {\n    state: {\n        contestResults: IContestResultsType,\n    };\n    actions: {\n        load: (id: number, official: boolean, full: boolean) => Promise<void>,\n    };\n}\n\ninterface ICurrentContestResultsProviderProps extends IHaveChildrenProps {\n}\n\nconst defaultState = { state: { contestResults: { results: [] as IContestResultsParticipationType[] } as IContestResultsType } };\n\nconst ContestResultsContext = createContext<ICurrentContestResultsContext>(defaultState as ICurrentContestResultsContext);\n\nconst CurrentContestResultsProvider = ({ children }: ICurrentContestResultsProviderProps) => {\n    const { getContestResultsUrl } = useUrls();\n    const [ contestResults, setContestResults ] = useState(defaultState.state.contestResults);\n    const { startLoading, stopLoading } = useLoading();\n    const [ getContestResultsParams, setGetContestResultsParams ] = useState<IGetContestResultsParams>();\n\n    const {\n        get: getContestResults,\n        data: apiContestResults,\n    } = useHttp(getContestResultsUrl as UrlType, getContestResultsParams);\n\n    const load = useCallback(async (id, official, full) => {\n        if (isNil(id)) {\n            return;\n        }\n\n        setGetContestResultsParams({ id, official, full });\n    }, []);\n\n    useEffect(\n        () => {\n            if (isNil(apiContestResults)) {\n                return;\n            }\n\n            setContestResults(apiContestResults);\n        },\n        [ apiContestResults ],\n    );\n\n    useEffect(\n        () => {\n            if (isNil(getContestResultsParams)) {\n                return;\n            }\n\n            (async () => {\n                startLoading();\n                await getContestResults();\n                stopLoading();\n            })();\n        },\n        [ getContestResults, getContestResultsParams, startLoading, stopLoading ],\n    );\n\n    const value = {\n        state: { contestResults },\n        actions: { load },\n    };\n\n    return (\n        <ContestResultsContext.Provider value={value}>\n            {children}\n        </ContestResultsContext.Provider>\n    );\n};\n\nconst useCurrentContestResults = () => useContext(ContestResultsContext);\n\nexport default CurrentContestResultsProvider;\n\nexport {\n    useCurrentContestResults,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAEA;;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAxDA;AACA;;;AADA;AACA;AAwDA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}