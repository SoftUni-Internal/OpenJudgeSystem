{"version":3,"file":"main.cb3c0f5d91ae88ab3a32.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contests-filters/ContestFilters.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { isNil } from 'lodash';\nimport { useSearchParams } from 'react-router-dom';\nimport List, { Orientation } from '../../guidelines/lists/List';\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\n\nimport { FilterType, IFilter } from '../../../common/contest-types';\nimport ContestCategories from '../contest-categories/ContestCategories';\n\nimport styles from './ContestFilters.module.scss';\nimport Button, { ButtonSize, ButtonType } from '../../guidelines/buttons/Button';\nimport { useContests } from '../../../hooks/use-contests';\nimport { groupByType } from '../../../common/filter-utils';\nimport ExpandButton from '../../guidelines/buttons/ExpandButton';\nimport concatClassNames from '../../../utils/class-names';\nimport { useContestStrategyFilters } from '../../../hooks/use-contest-strategy-filters';\nimport { useContestCategories } from '../../../hooks/use-contest-categories';\n\ninterface IContestFiltersProps {\n    onFilterClick: (filter: IFilter) => void;\n}\n\ninterface IFiltersGroup {\n    type: FilterType;\n    filters: IFilter[];\n}\n\nconst ContestFilters = ({ onFilterClick }: IContestFiltersProps) => {\n    const [ filtersGroups, setFiltersGroups ] = useState<IFiltersGroup[]>([]);\n    const [ expanded, setExpanded ] = useState(false);\n    const [ defaultSelected, setDefaultSelected ] = useState('');\n    const [ searchParams ] = useSearchParams();\n    const [ isLoaded, setIsLoaded ] = useState(false);\n    const { actions: { load: loadStrategies } } = useContestStrategyFilters();\n    const { actions: { load: loadCategories } } = useContestCategories();\n\n    const {\n        state: {\n            possibleFilters,\n            filters,\n        },\n    } = useContests();\n\n    const handleFilterClick = useCallback(\n        (filterId: number) => {\n            const filter = possibleFilters.find(({ id }) => filterId === id);\n\n            if (isNil(filter)) {\n                return;\n            }\n\n            onFilterClick(filter);\n        },\n        [ possibleFilters, onFilterClick ],\n    );\n    \n\n    const strategyHeader = 'tree-Header';\n    const strategyHeaderClassName = concatClassNames(strategyHeader, styles.strategyHeader);\n    const strategyElement = 'tree-Element';\n    const strategyElementClassName = concatClassNames(strategyElement, styles.strategyElementClassName);\n    const strategyTooltip = 'tooltip';\n    const strategyTooltipClassName = concatClassNames(strategyTooltip, styles.tooltip);\n    const strategyTooltipElement = 'tooltip-Element';\n    const strategyTooltipElementClassName=concatClassNames(strategyTooltipElement,styles.tooltipElement);\n\n    const getRenderFilterStrategyItem = useCallback(\n        (type: FilterType) => ({ id, name }: IFilter) => {\n            const filterIsSelected = filters.some((f) => f.name === name && f.type === FilterType.Strategy);\n            const buttonType = filterIsSelected\n                ? ButtonType.primary\n                : ButtonType.secondary;\n\n            const btnClassName = type === FilterType.Status\n                ? styles.btnSelectFilter\n                : '';\n\n            return (\n                <div className={strategyHeaderClassName}>\n                    <div className={strategyTooltipClassName}>\n                        <span className={strategyTooltipElementClassName}>{name}</span>\n                    </div>\n                    <Button\n                        type={buttonType}\n                        onClick={() => handleFilterClick(id)}\n                        className={btnClassName + strategyElementClassName}\n                        text={name}\n                        size={ButtonSize.small}\n                    />\n                </div>\n            );\n        },\n        [ strategyElementClassName, strategyHeaderClassName, handleFilterClick, filters ],\n    );\n    const toggleFiltersExpanded = useCallback(\n        (isExpanded) => setExpanded(isExpanded),\n        [],\n    );\n\n    const renderExpandButton = useCallback(\n        (allFilters: IFilter[]) => {\n            const maxFiltersToDisplayCount = 3;\n\n            return allFilters.length > maxFiltersToDisplayCount\n                ? <ExpandButton onExpandChanged={toggleFiltersExpanded}/>\n                : null;\n        },\n        [ toggleFiltersExpanded ],\n    );\n\n    const renderFilter = useCallback(\n        (fg: IFiltersGroup) => {\n            const { type, filters: groupFilters } = fg;\n            const className = concatClassNames(\n                styles.listFilters,\n                expanded\n                    ? styles.expanded\n                    : '',\n            );\n\n            const strategyFilter = groupFilters.filter(t=>t.type===FilterType.Strategy);\n            const statusFilter = groupFilters.filter(t=>t.type===FilterType.Status);\n            \n            const listOrientation = type === FilterType.Status\n                ? Orientation.horizontal\n                : Orientation.vertical;\n\n            return (\n                <div className={styles.filterTypeContainer}>\n                    <Heading\n                        type={HeadingType.small}\n                        className={styles.heading}\n                    >\n                        {type}\n                    </Heading>\n                    <List\n                        values={strategyFilter}\n                        itemFunc={getRenderFilterStrategyItem(type)}\n                        orientation={listOrientation}\n                        className={className}\n                        itemClassName={styles.listFilterItem}\n                        fullWidth\n                    />\n                    <List\n                        values={statusFilter}\n                        itemFunc={getRenderFilterStrategyItem(type)}\n                        orientation={listOrientation}\n                        className={className}\n                        itemClassName={styles.listFilterItem}\n                        fullWidth\n                    />\n                    {renderExpandButton(groupFilters)}\n                </div>\n            );\n        },\n        [ expanded, getRenderFilterItemFunc, renderExpandButton ],\n    );\n\n    useEffect(\n        () => {\n            const plainFilters = possibleFilters.filter(({ type }) => type !== FilterType.Category);\n\n            setFiltersGroups(groupByType(plainFilters));\n        },\n        [ possibleFilters ],\n    );\n\n    useEffect(\n        () => {\n            if (isLoaded) {\n                return;\n            }\n\n            const searchParamName = FilterType.Category.toString();\n            let selectedCategory = searchParams.get(searchParamName);\n\n            if (isNil(selectedCategory)) {\n                selectedCategory = searchParams.get(searchParamName.toLowerCase());\n            }\n\n            if (isNil(selectedCategory)) {\n                return;\n            }\n\n            setIsLoaded(true);\n            setDefaultSelected(selectedCategory.toString());\n        },\n        [ isLoaded, searchParams ],\n    );\n\n    useEffect(\n        () => {\n            (async () => {\n                await loadStrategies();\n            })();\n        },\n        [ loadStrategies ],\n    );\n\n    useEffect(\n        () => {\n            (async () => {\n                await loadCategories();\n            })();\n        },\n        [ loadCategories ],\n    );\n\n    return (\n        <div className={styles.container}>\n            <ContestCategories\n                className={styles.filterTypeContainer}\n                onCategoryClick={onFilterClick}\n                defaultSelected={defaultSelected}\n            />\n            <List\n                values={filtersGroups}\n                itemFunc={renderFilter}\n                fullWidth\n            />\n        </div>\n    );\n};\n\nexport default ContestFilters;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAWA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAaA;AAxBA;AA2BA;AACA;AAAA;AAIA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AAEA;AAAA;AACA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAIA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AApMA;AAIA;;;AAJA;AAqMA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}