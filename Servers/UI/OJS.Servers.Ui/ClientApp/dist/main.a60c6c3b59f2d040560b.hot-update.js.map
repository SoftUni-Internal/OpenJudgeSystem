{"version":3,"file":"main.a60c6c3b59f2d040560b.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contest-tree/CategoriesTree.module.scss","webpack:///./src/components/contests/contest-tree/CategoriesTree.module.scss?7960","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contest-tree/CategoriesTree.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".CategoriesTree_categoriesTree__259Yp {\\n  font-size: 1rem;\\n  font-family: \\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif;\\n  font-weight: 400;\\n  line-height: 1.5;\\n}\\n\\n.CategoriesTree_treeElement__3E4HO div:nth-child(2) {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  width: 150px;\\n}\\n\\n.CategoriesTree_tooltip__18X7S {\\n  position: absolute;\\n  left: 16%;\\n  display: none;\\n}\\n.CategoriesTree_tooltip__18X7S .CategoriesTree_tooltipElement__1M-Gd {\\n  width: 183px;\\n  background-color: #B0B0B0;\\n  color: #fff;\\n  border-radius: 6px;\\n}\\n\\n.CategoriesTree_categoriesTree__259Yp:hover .CategoriesTree_tooltip__18X7S {\\n  display: block;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://src/components/contests/contest-tree/CategoriesTree.module.scss\"],\"names\":[],\"mappings\":\"AAAA;EACE,eAAA;EACA,uDAAA;EACA,gBAAA;EACA,gBAAA;AACF;;AAEA;EACE,mBAAA;EACA,gBAAA;EACA,uBAAA;EACA,YAAA;AACF;;AAEA;EACE,kBAAA;EACA,SAAA;EACA,aAAA;AACF;AACA;EACE,YAAA;EACA,yBAAA;EACA,WAAA;EACA,kBAAA;AACF;;AAKE;EACE,cAAA;AAFJ\",\"sourcesContent\":[\".categoriesTree {\\r\\n  font-size: 1rem;\\r\\n  font-family: \\\"Roboto\\\", \\\"Helvetica\\\", \\\"Arial\\\", sans-serif;\\r\\n  font-weight: 400;\\r\\n  line-height: 1.5;\\r\\n}\\r\\n\\r\\n.treeElement div:nth-child(2) {\\r\\n  white-space: nowrap;\\r\\n  overflow: hidden;\\r\\n  text-overflow: ellipsis;\\r\\n  width: 150px;\\r\\n}\\r\\n\\r\\n.tooltip {\\r\\n  position: absolute;\\r\\n  left: 16%;\\r\\n  display: none;\\r\\n  \\r\\n.tooltipElement {\\r\\n  width: 183px;\\r\\n  background-color: #B0B0B0;\\r\\n  color: #fff;\\r\\n  border-radius: 6px;\\r\\n}\\r\\n}\\r\\n\\r\\n\\r\\n.categoriesTree:hover {\\r\\n  .tooltip {\\r\\n    display: block;\\r\\n  }\\r\\n}\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"categoriesTree\": \"CategoriesTree_categoriesTree__259Yp\",\n\t\"treeElement\": \"CategoriesTree_treeElement__3E4HO\",\n\t\"tooltip\": \"CategoriesTree_tooltip__18X7S\",\n\t\"tooltipElement\": \"CategoriesTree_tooltipElement__1M-Gd\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","var api = require(\"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-7-1!../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../node_modules/resolve-url-loader/index.js??ref--5-oneOf-7-3!../../../../node_modules/sass-loader/dist/cjs.js??ref--5-oneOf-7-4!./CategoriesTree.module.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-7-1!../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../node_modules/resolve-url-loader/index.js??ref--5-oneOf-7-3!../../../../node_modules/sass-loader/dist/cjs.js??ref--5-oneOf-7-4!./CategoriesTree.module.scss\",\n      function () {\n        content = require(\"!!../../../../node_modules/css-loader/dist/cjs.js??ref--5-oneOf-7-1!../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../node_modules/resolve-url-loader/index.js??ref--5-oneOf-7-3!../../../../node_modules/sass-loader/dist/cjs.js??ref--5-oneOf-7-4!./CategoriesTree.module.scss\");\n\n              content = content.__esModule ? content.default : content;\n\n              if (typeof content === 'string') {\n                content = [[module.id, content, '']];\n              }\n\n              if (!isEqualLocals(oldLocals, content.locals)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nmodule.exports = content.locals || {};","import React, { useCallback, useEffect, useState } from 'react';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { MdChevronRight, MdExpandMore } from 'react-icons/md';\nimport { isArray, isEmpty } from 'lodash';\n\nimport styles from './CategoriesTree.module.scss';\n\ninterface ITreeItemType {\n    id: string,\n    name: string,\n    parentId?: string,\n    children?: ITreeItemType[],\n}\n\ninterface ITreeProps {\n    items: ITreeItemType[];\n    onTreeLabelClick: (node: ITreeItemType) => void;\n    defaultSelected?: string;\n    defaultExpanded?: string[];\n}\n\nconst CategoryTree = ({\n    items,\n    onTreeLabelClick,\n    defaultSelected,\n    defaultExpanded = [],\n}: ITreeProps) => {\n    const [ expanded, setExpanded ] = useState([] as string[]);\n    const [ selected, setSelected ] = useState('');\n\n    const handleTreeItemClick = useCallback(\n        (node: ITreeItemType) => {\n            const id = node.id.toString();\n            let newExpanded = Array.from(expanded);\n\n            if (expanded.includes(id)) {\n                newExpanded = newExpanded.filter((e) => e !== id);\n            } else {\n                newExpanded.push(id);\n            }\n\n            setExpanded(newExpanded);\n        },\n        [ expanded, setExpanded ],\n    );\n\n    const handleLabelClick = useCallback(\n        (node: ITreeItemType) => {\n            setSelected(node.id.toString());\n\n            onTreeLabelClick(node);\n        },\n        [ onTreeLabelClick ],\n    );\n\n    useEffect(\n        () => {\n            if (isEmpty(selected) && defaultSelected) {\n                setSelected(defaultSelected);\n            }\n        },\n        [ defaultSelected, selected ],\n    );\n\n    useEffect(\n        () => {\n            if (isEmpty(expanded) && !isEmpty(defaultExpanded)) {\n                setExpanded(defaultExpanded);\n            }\n        },\n        [ defaultExpanded, expanded ],\n    );\n    \n    const renderCategoryTree = useCallback((node: ITreeItemType) => (\n        <div className={styles.categoriesTree}>\n       \n            <TreeItem\n                key={node.id}\n                className={styles.treeElement}\n                nodeId={node.id.toString()}\n                label={node.name}\n                onClick={() => handleTreeItemClick(node)}\n                onLabelClick={() => handleLabelClick(node)}\n            >\n                {isArray(node.children)\n                    ? node.children.map((child) => renderCategoryTree(child))\n                    : null}\n            </TreeItem>\n        </div>\n    ), [ handleTreeItemClick, handleLabelClick ]);\n    \n    const renderCategoryTreeView = (treeItems: ITreeItemType[]) => treeItems.map((c) => renderCategoryTree(c));\n\n    return (\n        <TreeView\n            aria-label=\"rich object\"\n            defaultCollapseIcon={<MdExpandMore/>}\n            defaultExpandIcon={<MdChevronRight/>}\n            selected={selected}\n            expanded={expanded}\n        >\n            <div className={styles.tooltip}> {renderCategoryTreeView(items)}</div> \n            {renderCategoryTreeView(items)}\n        </TreeView>\n    );\n};\n\nexport default CategoryTree;\n\nexport type {\n    ITreeItemType,\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AAEA;;;AAgBA;AAKA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AASA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AArFA;AACA;AADA;AAsFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}