{"version":3,"file":"main.bc5af13679652e97a140.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/use-current-contest.tsx"],"sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\r\nimport { isNil, sum } from 'lodash';\r\nimport { IContestType, IRegisterForContestResponseType, IStartParticipationResponseType } from '../common/types';\r\nimport { IHaveChildrenProps } from '../components/common/Props';\r\nimport { UrlType } from '../common/common-types';\r\nimport { IRegisterForContestUrlParams, ISubmitContestPasswordUrlParams } from '../common/url-types';\r\nimport { useLoading } from './use-loading';\r\nimport { useHttp } from './use-http';\r\nimport { useUrls } from './use-urls';\r\n\r\ninterface IStartContestArgs {\r\n    id: number;\r\n    isOfficial: boolean;\r\n}\r\n\r\ninterface ISubmitContestPasswordArgs {\r\n    id: number;\r\n    isOfficial: boolean;\r\n    password: string;\r\n}\r\n\r\ninterface ICurrentContestContext {\r\n    state: {\r\n        contest: IContestType | null;\r\n        contestPassword: string | null;\r\n        score: number;\r\n        maxScore: number;\r\n        isOfficial: boolean;\r\n        requirePassword: boolean | null;\r\n        submitContestPasswordErrorMessage: string | null;\r\n        isPasswordValid: boolean | null;\r\n    };\r\n    actions: {\r\n        setContestPassword: (password: string) => void;\r\n        start: (info: IStartContestArgs) => void;\r\n        register: (info: IStartContestArgs) => void;\r\n        submitPassword: (info: ISubmitContestPasswordArgs) => void;\r\n    };\r\n}\r\n\r\nconst defaultState = {\r\n    state: {\r\n        contest: null,\r\n        contestPassword: null,\r\n        score: 0,\r\n        maxScore: 0,\r\n        isOfficial: false,\r\n        requirePassword: false,\r\n    },\r\n};\r\n\r\nconst CurrentContestsContext = createContext<ICurrentContestContext>(defaultState as ICurrentContestContext);\r\n\r\ninterface ICurrentContestsProviderProps extends IHaveChildrenProps {\r\n}\r\n\r\ninterface IContestToStartType {\r\n    id: number;\r\n    isOfficial: boolean;\r\n}\r\n\r\nconst CurrentContestsProvider = ({ children }: ICurrentContestsProviderProps) => {\r\n    const [ contest, setContest ] = useState<IContestType | null>(defaultState.state.contest);\r\n    const [ contestPassword, setContestPassword ] = useState<string | null>(defaultState.state.contest);\r\n    const [ score, setScore ] = useState(defaultState.state.score);\r\n    const [ maxScore, setMaxScore ] = useState(defaultState.state.maxScore);\r\n    const [ isOfficial, setIsOfficial ] = useState(defaultState.state.isOfficial);\r\n    const [ requirePassword, setRequirePassword ] = useState<boolean | null>(null);\r\n    const [ contestToStart, setContestToStart ] = useState<IContestToStartType | null>(null);\r\n    const [ registerForContestParams, setRegisterForContestParams ] = useState<IRegisterForContestUrlParams | null>(null);\r\n    const [ submitContestPasswordUrlParams, setSubmitContestPasswordUrlParams ] = useState<ISubmitContestPasswordUrlParams | null>(null);\r\n    const [ submitContestPasswordErrorMessage, setSubmitContestPasswordErrorMessage ] = useState<string | null>(null);\r\n    const [ isPasswordValid, setIsPasswordValid ] = useState<boolean | null>(null);\r\n\r\n    const {\r\n        startLoading,\r\n        stopLoading,\r\n    } = useLoading();\r\n\r\n    const {\r\n        getStartContestParticipationUrl,\r\n        getRegisterForContestUrl,\r\n        getSubmitContestPasswordUrl,\r\n    } = useUrls();\r\n\r\n    const {\r\n        get: startContest,\r\n        data: startContestData,\r\n    } = useHttp(getStartContestParticipationUrl as UrlType, contestToStart);\r\n\r\n    const {\r\n        get: registerForContest,\r\n        data: registerForContestData,\r\n    } = useHttp(getRegisterForContestUrl as UrlType, registerForContestParams);\r\n\r\n    const {\r\n        post: submitContestPassword,\r\n        data: submitContestPasswordData,\r\n        response: submitContestPasswordResponse,\r\n    } = useHttp(getSubmitContestPasswordUrl as UrlType, submitContestPasswordUrlParams);\r\n\r\n    const start = useCallback((obj) => {\r\n        setContestToStart(obj);\r\n    }, []);\r\n\r\n    const register = useCallback((obj) => {\r\n        const { id, isOfficial: official } = obj;\r\n        \r\n        setRegisterForContestParams({ id, isOfficial: official } as IRegisterForContestUrlParams);\r\n    }, []);\r\n\r\n    const submitPassword = useCallback(({ id, isOfficial: official, password }: ISubmitContestPasswordArgs) => {\r\n        setSubmitContestPasswordUrlParams({\r\n            id,\r\n            isOfficial: official,\r\n        } as ISubmitContestPasswordUrlParams);\r\n        setContestPassword(password);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isNil(contestToStart)) {\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            startLoading();\r\n            await startContest();\r\n            stopLoading();\r\n        })();\r\n    }, [ contestToStart, startContest, startLoading, stopLoading ]);\r\n\r\n    useEffect(() => {\r\n        if (isNil(startContestData)) {\r\n            return;\r\n        }\r\n\r\n        const responseData = startContestData as IStartParticipationResponseType;\r\n        const { contest: newContest, contestIsCompete } = responseData;\r\n\r\n        setContest(newContest);\r\n        setIsOfficial(contestIsCompete);\r\n    }, [ startContestData ]);\r\n\r\n    useEffect(() => {\r\n        if (isNil(registerForContestParams)) {\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            startLoading();\r\n            await registerForContest();\r\n            stopLoading();\r\n        })();\r\n    }, [ registerForContest, registerForContestParams, startLoading, stopLoading ]);\r\n\r\n    useEffect(() => {\r\n        if (isNil(registerForContestData)) {\r\n            return;\r\n        }\r\n\r\n        const responseData = registerForContestData as IRegisterForContestResponseType;\r\n        const { requirePassword: responseRequirePassword } = responseData;\r\n\r\n        setContest({ id: responseData.id, name: responseData.name } as IContestType);\r\n        setRequirePassword(responseRequirePassword);\r\n    }, [ registerForContestData ]);\r\n\r\n    useEffect(() => {\r\n        if (isNil(submitContestPasswordUrlParams)) {\r\n            return;\r\n        }\r\n\r\n        (async () => {\r\n            startLoading();\r\n            await submitContestPassword({ password: contestPassword });\r\n            stopLoading();\r\n        })();\r\n    }, [ contestPassword, submitContestPassword, submitContestPasswordUrlParams, startLoading, stopLoading ]);\r\n\r\n    useEffect(() => {\r\n        if (isNil(submitContestPasswordData)) {\r\n            return;\r\n        }\r\n\r\n        // TODO: fix this https://github.com/SoftUni-Internal/exam-systems-issues/issues/224\r\n        if (!isNil(submitContestPasswordResponse) && submitContestPasswordResponse.status !== 200) {\r\n            setSubmitContestPasswordErrorMessage('Incorrect password');\r\n            setIsPasswordValid(false);\r\n            \r\n            return;\r\n        }\r\n\r\n        setIsPasswordValid(true);\r\n        setSubmitContestPasswordErrorMessage(null);\r\n    }, [ registerForContestData, submitContestPasswordData, submitContestPasswordResponse ]);\r\n\r\n    useEffect(\r\n        () => {\r\n            const { problems } = contest || {};\r\n\r\n            if (isNil(problems)) {\r\n                return;\r\n            }\r\n\r\n            setScore(sum(problems.map((p) => p.points)));\r\n            setMaxScore(sum(problems.map((p) => p.maximumPoints)));\r\n        },\r\n        [ contest ],\r\n    );\r\n\r\n    const value = {\r\n        state: {\r\n            contest,\r\n            contestPassword,\r\n            score,\r\n            maxScore,\r\n            isOfficial,\r\n            requirePassword,\r\n            submitContestPasswordErrorMessage,\r\n            isPasswordValid,\r\n        },\r\n        actions: {\r\n            setContestPassword,\r\n            register,\r\n            start,\r\n            submitPassword,\r\n        },\r\n    };\r\n\r\n    return (\r\n        <CurrentContestsContext.Provider value={value}>\r\n            {children}\r\n        </CurrentContestsContext.Provider>\r\n    );\r\n};\r\nconst useCurrentContest = () => useContext(CurrentContestsContext);\r\n\r\nexport default CurrentContestsProvider;\r\n\r\nexport {\r\n    useCurrentContest,\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAKA;AACA;AACA;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAWA;AACA;AASA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AACA;AAHA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AAJA;AAXA;AAmBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AA9KA;AAgBA;;;AAhBA;AACA;AA6KA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}