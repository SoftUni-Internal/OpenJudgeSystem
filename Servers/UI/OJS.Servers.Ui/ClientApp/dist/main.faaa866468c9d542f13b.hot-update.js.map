{"version":3,"file":"main.faaa866468c9d542f13b.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/home-contests/contest-card/ContestCard.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallback } from 'react';\nimport Countdown, { Metric } from '../../guidelines/countdown/Countdown';\nimport { convertToSecondsRemaining } from '../../../utils/dates';\nimport { IIndexContestsType } from '../../../common/types';\nimport concatClassNames from '../../../utils/class-names';\n\nimport { ButtonSize, ButtonState, LinkButton, LinkButtonType } from '../../guidelines/buttons/Button';\nimport LockIcon from '../../guidelines/icons/LockIcon';\nimport styles from './ContestCard.module.scss';\n\ninterface IContestCardProps {\n    contest: IIndexContestsType\n}\n\nconst ContestCard = ({ contest }: IContestCardProps) => {\n    const {\n        id,\n        name,\n        category,\n        canBePracticed,\n        practiceEndTime,\n        canBeCompeted,\n        endTime,\n    } = contest;\n    const contestCard = 'card-contests';\n    const contestCardClassName = concatClassNames(styles.contestCard, contestCard);\n    const contestCardHeader = 'card-header';\n    const contestCardHeaderClassName = concatClassNames(styles.contestCardHeader, contestCardHeader);\n    const contestCardCategory = 'card-category';\n    const contestCardCategoryClassName = concatClassNames(styles.contestCardCategoryLabel, contestCardCategory);\n    const contestCardCounter = 'card-counter';\n    const contestCardCounterClassName = concatClassNames(styles.contestCardCountdown, contestCardCounter);\n    const contestCardControlBtns = 'card-control-buttons';\n    const contestCardControlBtnsClassName = concatClassNames(styles.contestCardControls, contestCardControlBtns);\n\n    const renderCountdown = useCallback(\n        () => {\n            if (canBePracticed && practiceEndTime == null) {\n                return <p>No practice end time.</p>;\n            }\n\n            const endDate = canBeCompeted && !canBePracticed\n                ? endTime\n                : practiceEndTime;\n\n            return (\n                <Countdown\n                  key={id}\n                  duration={convertToSecondsRemaining(new Date(endDate))}\n                  metric={Metric.seconds}\n                />\n            );\n        },\n        [ canBeCompeted, canBePracticed, endTime, id, practiceEndTime ],\n    );\n\n    const renderContestLockIcon = useCallback(\n        () => {\n            const { hasContestPassword, hasPracticePassword } = contest;\n            \n            return (canBeCompeted && hasContestPassword) || (canBePracticed && hasPracticePassword)\n                ? <LockIcon />\n                : null;\n        },\n        [ canBeCompeted, canBePracticed, contest ],\n    );\n    \n    // const checkLength=(nameToCheck:string)=>{\n    //     if (nameToCheck.length<=20){\n    //         return nameToCheck;\n    //     }\n    //\n    //     return `${nameToCheck.substring(0, 25) }...`;\n    // };\n\n    return (\n        <div className={contestCardClassName}>\n            <div className={contestCardHeaderClassName}>\n                <span>{name}</span>\n                { renderContestLockIcon() }\n            </div>\n            <div className={contestCardCategoryClassName}>{category}</div>\n            <div className={contestCardCounterClassName}>\n                {renderCountdown()}\n            </div>\n            <div className={contestCardControlBtnsClassName}>\n                <LinkButton\n                  id=\"button-card-compete\"\n                  to={`/contests/${id}/register/compete`}\n                  text=\"Compete\"\n                  state={\n                        canBeCompeted\n                            ? ButtonState.enabled\n                            : ButtonState.disabled\n                    }\n                  size={ButtonSize.small}\n                />\n                <LinkButton\n                  id=\"button-card-practice\"\n                  to={`/contests/${id}/register/practice`}\n                  text=\"Practice\"\n                  type={LinkButtonType.secondary}\n                  state={\n                        canBePracticed\n                            ? ButtonState.enabled\n                            : ButtonState.disabled\n                    }\n                  size={ButtonSize.small}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ContestCard;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AAIA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AATA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AAKA;AAVA;AAAA;AAAA;AAAA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAoCA;AACA;AAnGA;AACA;AADA;AAoGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}