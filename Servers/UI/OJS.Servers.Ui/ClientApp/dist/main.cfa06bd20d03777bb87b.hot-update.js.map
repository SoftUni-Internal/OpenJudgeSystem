{"version":3,"file":"main.cfa06bd20d03777bb87b.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contests-filters/ContestFilters.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/pages/contests/ContestsPage.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { isNil } from 'lodash';\nimport { useSearchParams } from 'react-router-dom';\nimport List, { Orientation } from '../../guidelines/lists/List';\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\n\nimport { FilterType, IFilter } from '../../../common/contest-types';\nimport ContestCategories from '../contest-categories/ContestCategories';\n\nimport styles from './ContestFilters.module.scss';\nimport Button, { ButtonSize, ButtonType } from '../../guidelines/buttons/Button';\nimport { useContests } from '../../../hooks/use-contests';\nimport { groupByType } from '../../../common/filter-utils';\nimport ExpandButton from '../../guidelines/buttons/ExpandButton';\nimport concatClassNames from '../../../utils/class-names';\nimport { useContestStrategyFilters } from '../../../hooks/use-contest-strategy-filters';\nimport { useContestCategories } from '../../../hooks/use-contest-categories';\n\ninterface IContestFiltersProps {\n    onFilterClick: (filter: IFilter) => void;\n}\n\ninterface IFiltersGroup {\n    type: FilterType;\n    filters: IFilter[];\n}\n\nconst ContestFilters = ({ onFilterClick }: IContestFiltersProps) => {\n    const [ filtersGroups, setFiltersGroups ] = useState<IFiltersGroup[]>([]);\n    const [ expanded, setExpanded ] = useState(false);\n    const [ defaultSelected, setDefaultSelected ] = useState('');\n    const [ searchParams ] = useSearchParams();\n    const [ isLoaded, setIsLoaded ] = useState(false);\n    const { actions: { load: loadStrategies } } = useContestStrategyFilters();\n    const { actions: { load: loadCategories } } = useContestCategories();\n\n    const {\n        state: {\n            possibleFilters,\n            filters,\n        },\n    } = useContests();\n\n    const handleFilterClick = useCallback(\n        (filterId: number) => {\n            const filter = possibleFilters.find(({ id }) => filterId === id);\n\n            if (isNil(filter)) {\n                return;\n            }\n\n            onFilterClick(filter);\n        },\n        [ possibleFilters, onFilterClick ],\n    );\n\n    const getRenderStatusFilterItem = useCallback(\n        (type: FilterType) => ({ id, name }: IFilter) => {\n            const filterIsSelected = filters.some((f) => f.name === name);\n            const buttonType = filterIsSelected\n                ? ButtonType.primary\n                : ButtonType.secondary;\n\n            const btnClassName = type === FilterType.Status\n                ? styles.btnSelectFilter\n                : '';\n\n            return (\n                <Button\n                    type={buttonType}\n                    onClick={() => handleFilterClick(id)}\n                    className={btnClassName}\n                    text={name}\n                    size={ButtonSize.small}\n                />\n            );\n        },\n        [ handleFilterClick, filters ],\n    );\n\n    const strategyHeader = 'strategy-Header';\n    const strategyHeaderClassName = concatClassNames(strategyHeader, styles.strategyHeader);\n    const strategyElement = 'strategy-Element';\n    const strategyElementClassName = concatClassNames(strategyElement, styles.strategyElementClassName);\n    const strategyTooltip = 'tooltip';\n    const strategyTooltipClassName = concatClassNames(strategyTooltip, styles.tooltip);\n    const strategyTooltipElement = 'tooltip-Element';\n    const strategyTooltipElementClassName = concatClassNames(strategyTooltipElement, styles.tooltipElement);\n\n    const getRenderStrategyFilterItem = useCallback(\n        (type: FilterType) => ({ id, name }: IFilter) => {\n            const filterIsSelected = filters.some((f) => f.name === name);\n            const buttonType = filterIsSelected\n                ? ButtonType.primary\n                : ButtonType.secondary;\n\n            const btnClassName = type === FilterType.Strategy\n                ? styles.btnSelectFilter\n                : '';\n\n            return (\n                <div className={strategyHeaderClassName}>\n                    <div className={strategyTooltipClassName}>\n                        <span className={strategyTooltipElementClassName}>{name}</span>\n                    </div>\n                    <Button\n                        type={buttonType}\n                        onClick={() => handleFilterClick(id)}\n                        className={btnClassName + strategyElementClassName}\n                        text={name}\n                        size={ButtonSize.small}\n                    />\n                </div>\n            );\n        },\n        [ strategyTooltipClassName, strategyTooltipElementClassName, strategyElementClassName,\n            strategyHeaderClassName, handleFilterClick, filters ],\n    );\n    const toggleFiltersExpanded = useCallback(\n        (isExpanded) => setExpanded(isExpanded),\n        [],\n    );\n\n    const renderExpandButton = useCallback(\n        (allFilters: IFilter[]) => {\n            const maxFiltersToDisplayCount = 3;\n\n            return allFilters.length > maxFiltersToDisplayCount\n                ? <ExpandButton onExpandChanged={toggleFiltersExpanded}/>\n                : null;\n        },\n        [ toggleFiltersExpanded ],\n    );\n\n    const renderFilter = useCallback(\n        (fg: IFiltersGroup) => {\n            const { type, filters: groupFilters } = fg;\n            const className = concatClassNames(\n                styles.listFilters,\n                expanded\n                    ? styles.expanded\n                    : '',\n            );\n\n            const strategyFilter = groupFilters.filter(t => t.type === FilterType.Strategy);\n            const statusFilter = groupFilters.filter(t => t.type === FilterType.Status);\n\n            const listOrientation = type === FilterType.Status\n                ? Orientation.horizontal\n                : Orientation.vertical;\n\n            return (\n                <div className={styles.filterTypeContainer}>\n                    <Heading\n                        type={HeadingType.small}\n                        className={styles.heading}\n                    >\n                        {type}\n                    </Heading>\n                    <List\n                        values={statusFilter}\n                        itemFunc={getRenderStatusFilterItem(type)}\n                        orientation={listOrientation}\n                        className={className}\n                        itemClassName={styles.listFilterItem}\n                        fullWidth\n                    />\n                    <List\n                        values={strategyFilter}\n                        itemFunc={getRenderStrategyFilterItem(type)}\n                        orientation={listOrientation}\n                        className={className}\n                        itemClassName={styles.listFilterItem}\n                        fullWidth\n                    />\n                    {renderExpandButton(groupFilters)}\n                </div>\n            );\n        },\n        [ getRenderStatusFilterItem, getRenderStrategyFilterItem, expanded, renderExpandButton ],\n    );\n\n    useEffect(\n        () => {\n            const plainFilters = possibleFilters.filter(({ type }) => type !== FilterType.Category);\n\n            setFiltersGroups(groupByType(plainFilters));\n        },\n        [ possibleFilters ],\n    );\n\n    useEffect(\n        () => {\n            if (isLoaded) {\n                return;\n            }\n\n            const searchParamName = FilterType.Category.toString();\n            let selectedCategory = searchParams.get(searchParamName);\n\n            if (isNil(selectedCategory)) {\n                selectedCategory = searchParams.get(searchParamName.toLowerCase());\n            }\n\n            if (isNil(selectedCategory)) {\n                return;\n            }\n\n            setIsLoaded(true);\n            setDefaultSelected(selectedCategory.toString());\n        },\n        [ isLoaded, searchParams ],\n    );\n\n    useEffect(\n        () => {\n            (async () => {\n                await loadStrategies();\n            })();\n        },\n        [ loadStrategies ],\n    );\n\n    useEffect(\n        () => {\n            (async () => {\n                await loadCategories();\n            })();\n        },\n        [ loadCategories ],\n    );\n\n    return (\n        <div className={styles.container}>\n            <ContestCategories\n                className={styles.filterTypeContainer}\n                onCategoryClick={onFilterClick}\n                defaultSelected={defaultSelected}\n            />\n            <List\n                values={filtersGroups}\n                itemFunc={renderFilter}\n                fullWidth\n            />\n        </div>\n    );\n};\n\nexport default ContestFilters;\n","import React, { useCallback } from 'react';\nimport { isEmpty, isNil } from 'lodash';\nimport ContestFilters from '../../components/contests/contests-filters/ContestFilters';\nimport { useContests } from '../../hooks/use-contests';\nimport { setLayout } from '../shared/set-layout';\nimport ContestCard from '../../components/home-contests/contest-card/ContestCard';\nimport List, { Orientation } from '../../components/guidelines/lists/List';\nimport PaginationControls from '../../components/guidelines/pagination/PaginationControls';\nimport { FilterType, IFilter } from '../../common/contest-types';\nimport Heading, { HeadingType } from '../../components/guidelines/headings/Heading';\nimport Breadcrumb from '../../components/guidelines/breadcrumb/Breadcrumb';\nimport { IIndexContestsType } from '../../common/types';\nimport { ICategoriesBreadcrumbItem, useCategoriesBreadcrumbs } from '../../hooks/use-contest-categories-breadcrumb';\nimport { LinkButton, LinkButtonType } from '../../components/guidelines/buttons/Button';\nimport concatClassNames from '../../utils/class-names';\nimport styles from './ContestsPage.module.scss';\n\nconst getBreadcrumbItemPath = (id: string) => `/contests?${FilterType.Category.toString()}=${id}`;\n\nconst ContestsPage = () => {\n    const {\n        state: {\n            contests,\n            pagesInfo,\n            currentPage,\n        },\n        actions: {\n            toggleFilter,\n            changePage,\n        },\n    } = useContests();\n    \n    const { state: { breadcrumbItems } } = useCategoriesBreadcrumbs();\n\n    const handlePageChange = useCallback(\n        (page: number) => changePage(page),\n        [ changePage ],\n    );\n\n    const handleFilterClick = useCallback(\n        (filter: IFilter) => toggleFilter(filter),\n        [ toggleFilter ],\n    );\n\n    const renderContest = useCallback(\n        (contest: IIndexContestsType) => (\n            <ContestCard contest={contest}/>\n        ),\n        [],\n    );\n\n    const renderContests = useCallback(\n        () => {\n            if (isNil(contests) || isEmpty(contests)) {\n                return (\n                    <Heading type={HeadingType.secondary}>\n                        No contests apply for this filter\n                    </Heading>\n                );\n            }\n\n            const { pagesCount } = pagesInfo;\n\n            return (\n                <div>\n                    <PaginationControls\n                        count={pagesCount}\n                        page={currentPage}\n                        onChange={handlePageChange}\n                    />\n                    <List\n                        values={contests}\n                        itemFunc={renderContest}\n                        itemClassName={styles.contestItem}\n                        orientation={Orientation.horizontal}\n                        wrap\n                    />\n                </div>\n            );\n        },\n        [ contests, currentPage, handlePageChange, pagesInfo, renderContest ],\n    );\n\n    const renderCategoriesBreadcrumbItem = useCallback(\n        (categoryBreadcrumbItem: ICategoriesBreadcrumbItem) => {\n            const { value, isLast, id } = categoryBreadcrumbItem;\n            const classNames = concatClassNames(styles.breadcrumbBtn, isLast\n                ? styles.breadcrumbBtnLast\n                : '');\n\n            return (\n                <LinkButton type={LinkButtonType.plain} className={classNames} to={getBreadcrumbItemPath(id)} text={value} />\n            );\n        },\n        [ ],\n    );\n    \n    const mainHeader='main-header';\n    const mainHeaderClassName=concatClassNames(mainHeader,styles.mainHeader);\n\n    return (\n        <>\n            <Breadcrumb items={breadcrumbItems} itemFunc={renderCategoriesBreadcrumbItem} />\n            <div className={styles.container}>\n                <ContestFilters onFilterClick={handleFilterClick}/>\n                <div className={mainHeaderClassName}>\n                    {renderContests()}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default setLayout(ContestsPage, true);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAWA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAQA;AAnBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAaA;AAxBA;AA4BA;AACA;AAAA;AAIA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AAEA;AAAA;AACA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAAA;AAAA;AAAA;AA0BA;AAIA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AA5NA;AAIA;;;AAJA;AA6NA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAeA;AAIA;AAEA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAFA;AAUA;AACA;AA7FA;AAWA;;;AAXA;AA8FA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}