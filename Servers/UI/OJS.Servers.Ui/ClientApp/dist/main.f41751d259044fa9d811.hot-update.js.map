{"version":3,"file":"main.f41751d259044fa9d811.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/categories-tree/CategoriesTree.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { isArray, isEmpty, without } from 'lodash';\nimport MdExpandMoreIcon from '../../guidelines/icons/MdExpandMoreIcon';\nimport MdChevronRightIcon from '../../guidelines/icons/MdChervronRightIcon';\nimport ITreeItemType from '../../../common/tree-types';\nimport { ITreeProps } from '../../guidelines/trees/Tree';\n\nimport styles from './CategoriesTree.module.scss';\n\ninterface ICategoriesTreeProps extends ITreeProps{\n}\n\nconst CategoryTree = ({\n    items,\n    onCategoryLabelClick,\n    defaultSelected,\n    defaultExpanded = [],\n}: ICategoriesTreeProps) => {\n    const [ expandedCategoriesIds, setExpanded ] = useState([] as string[]);\n    const [ selectedCategoriesIds, setSelected ] = useState('');\n\n    const handleTreeItemClick = useCallback(\n        (node: ITreeItemType) => {\n            const id = node.id.toString();\n            const newExpanded = expandedCategoriesIds.includes(id)\n                ? without(expandedCategoriesIds,id)\n                : [ ...expandedCategoriesIds,id ];\n\n            setExpanded(newExpanded);\n        },\n        [ expandedCategoriesIds, setExpanded ],\n    );\n\n    const handleLabelClick = useCallback(\n        (node: ITreeItemType) => {\n            setSelected(node.id.toString());\n\n            onCategoryLabelClick(node);\n        },\n        [ onCategoryLabelClick ],\n    );\n\n    useEffect(\n        () => {\n            if (isEmpty(selectedCategoriesIds) && defaultSelected) {\n                setSelected(defaultSelected);\n            }\n        },\n        [ defaultSelected, selectedCategoriesIds ],\n    );\n\n    useEffect(\n        () => {\n            if (isEmpty(expandedCategoriesIds) && !isEmpty(defaultExpanded)) {\n                setExpanded(defaultExpanded);\n            }\n        },\n        [ defaultExpanded, expandedCategoriesIds ],\n    );\n    \n    const renderCategoryTree = useCallback((node: ITreeItemType) => (\n        <div className={styles.categoriesTree}>\n            <div className={styles.tooltip}>\n                <div className={styles.tooltipElement}\n                     >\n                    {node.name}\n                </div>\n            </div>\n            <TreeItem\n                key={node.id}\n                className={styles.treeElement}\n                nodeId={node.id.toString()}\n                label={node.name}\n                onClick={() => handleTreeItemClick(node)}\n                onLabelClick={() => handleLabelClick(node)}\n            >\n                {isArray(node.children)\n                    ? node.children.map((child) => renderCategoryTree(child))\n                    : null}\n            </TreeItem>\n        </div>\n    ), [ handleTreeItemClick, handleLabelClick ]);\n    \n    const renderCategoryTreeView = (treeItems: ITreeItemType[]) => treeItems.map((c) => renderCategoryTree(c));\n\n    return (\n        <TreeView\n            aria-label=\"rich object\"\n            defaultCollapseIcon={<MdExpandMoreIcon />}\n            defaultExpandIcon={<MdChevronRightIcon />}\n            selected={selectedCategoriesIds}\n            expanded={expandedCategoriesIds}\n        >\n            <div className={styles.tooltip}> {renderCategoryTreeView(items)}</div> \n            {renderCategoryTreeView(items)}\n        </TreeView>\n    );\n};\n\nexport default CategoryTree;\n\nexport type {\n    ITreeItemType,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAIA;;;AAKA;AAKA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AASA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAsBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAtFA;AACA;AADA;AAuFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}