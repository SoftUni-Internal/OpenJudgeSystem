{"version":3,"file":"main.e8c1aadf584a2c58fb28.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/hooks/use-current-contest.tsx"],"sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\n\nimport { isNil, sum } from 'lodash';\nimport { IContestType, IStartParticipationResponseType } from '../common/types';\n\nimport { IHaveChildrenProps } from '../components/common/Props';\n\nimport { useLoading } from './use-loading';\nimport { useHttp } from './use-http';\nimport { useUrls } from './use-urls';\nimport { UrlType } from '../common/common-types';\n\ninterface IStartContestArgs {\n    id: number;\n    isOfficial: boolean;\n}\n\ninterface ICurrentContestContext {\n    state: {\n        contest: IContestType | null;\n        score: number;\n        maxScore: number;\n        isOfficial: boolean;\n        remainingTimeInMilliseconds: number;\n    };\n    actions: {\n        start: (info: IStartContestArgs) => void;\n    };\n}\n\nconst defaultState = {\n    state: {\n        contest: null,\n        score: 0,\n        maxScore: 0,\n        isOfficial: false,\n        remainingTimeInMilliseconds: 0.0,\n    },\n};\n\nconst CurrentContestsContext = createContext<ICurrentContestContext>(defaultState as ICurrentContestContext);\n\ninterface ICurrentContestsProviderProps extends IHaveChildrenProps {\n}\n\ninterface IContestToStartType {\n    id: number;\n    isOfficial: boolean;\n}\n\nconst CurrentContestsProvider = ({ children }: ICurrentContestsProviderProps) => {\n    const [ contest, setContest ] = useState<IContestType | null>(defaultState.state.contest);\n    const [ score, setScore ] = useState(defaultState.state.score);\n    const [ maxScore, setMaxScore ] = useState(defaultState.state.maxScore);\n    const [ isOfficial, setIsOfficial ] = useState(defaultState.state.isOfficial);\n    const [ contestToStart, setContestToStart ] = useState<IContestToStartType | null>(null);\n    const [ remainingTimeInMilliseconds, setRemainingTimeInMiliseconds ]=useState(defaultState.state.remainingTimeInMilliseconds);\n\n    const {\n        startLoading,\n        stopLoading,\n    } = useLoading();\n\n    const { getStartContestParticipationUrl } = useUrls();\n\n    const {\n        get: startContest,\n        data: startContestData,\n    } = useHttp(getStartContestParticipationUrl as UrlType, contestToStart);\n\n    const start = useCallback((obj) => {\n        setContestToStart(obj);\n    }, []);\n\n    useEffect(() => {\n        if (isNil(startContestData)) {\n            return;\n        }\n\n        const responseData = startContestData as IStartParticipationResponseType;\n        const { contest: newContest, contestIsCompete, remainingTimeInMilliseconds } = responseData;\n\n        setContest(newContest);\n        setIsOfficial(contestIsCompete);\n        setRemainingTimeInMiliseconds(remainingTimeInMilliseconds);\n    }, [ startContestData ]);\n\n    useEffect(() => {\n        if (isNil(contestToStart)) {\n            return;\n        }\n\n        (async () => {\n            startLoading();\n            await startContest();\n            stopLoading();\n        })();\n    }, [ contestToStart, startContest, startLoading, stopLoading ]);\n\n    useEffect(\n        () => {\n            const { problems } = contest || {};\n\n            if (isNil(problems)) {\n                return;\n            }\n\n            setScore(sum(problems.map((p) => p.points)));\n            setMaxScore(sum(problems.map((p) => p.maximumPoints)));\n        },\n        [ contest ],\n    );\n\n    const value = {\n        state: {\n            contest,\n            score,\n            maxScore,\n            isOfficial,\n            remainingTimeInMilliseconds,\n        },\n        actions: { start },\n    };\n\n    return (\n        <CurrentContestsContext.Provider value={value}>\n            {children}\n        </CurrentContestsContext.Provider>\n    );\n};\nconst useCurrentContest = () => useContext(CurrentContestsContext);\n\nexport default CurrentContestsProvider;\n\nexport {\n    useCurrentContest,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAKA;AACA;AACA;;AAqhFA;AAWA;;;AAXA;AACA;AA+EA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}