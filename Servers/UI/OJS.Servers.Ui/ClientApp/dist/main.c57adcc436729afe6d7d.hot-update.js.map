{"version":3,"file":"main.c57adcc436729afe6d7d.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contest-categories/ContestCategories.tsx","C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/guidelines/trees/Tree.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { isArray, isNil } from 'lodash';\nimport { useContestCategories } from '../../../hooks/use-contest-categories';\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\nimport styles from './ContestCategories.module.scss';\nimport { useContests } from '../../../hooks/use-contests';\nimport { IHaveOptionalClassName } from '../../common/Props';\nimport Tree, { ITreeItemType } from '../../guidelines/trees/Tree';\nimport { FilterType, IFilter } from '../../../common/contest-types';\nimport { useCategoriesBreadcrumbs } from '../../../hooks/use-contest-categories-breadcrumb';\nimport { IContestCategoryTreeType } from '../../../common/types';\n\n\ninterface IContestCategoriesProps extends IHaveOptionalClassName {\n    onCategoryClick: (filter: IFilter) => void;\n    defaultSelected?: string,\n}\n\nconst ContestCategories = ({\n    className = '',\n    onCategoryClick,\n    defaultSelected,\n}: IContestCategoriesProps) => {\n    const { state: { categories } } = useContestCategories();\n    const { state: { possibleFilters } } = useContests();\n    const { actions: { updateBreadcrumb } } = useCategoriesBreadcrumbs();\n\n    // const renderTree = useCallback((node: ITreeItemType) => (\n    //     <div className={styles.categoriesTree}>\n    //         <div className={styles.tooltip}>\n    //             <div className={styles.tooltipElement}\n    //                  key={node.id}>\n    //                 {node.name}\n    //             </div>\n    //         </div>\n    //         <TreeItem\n    //             key={node.id}\n    //             className={styles.treeElement}\n    //             nodeId={node.id.toString()}\n    //             label={node.name}\n    //             onClick={() => handleTreeItemClick(node)}\n    //             onLabelClick={() => handleLabelClick(node)}\n    //         >\n    //             {isArray(node.children)\n    //                 ? node.children.map((child) => renderTree(child))\n    //                 : null}\n    //         </TreeItem>\n    //     </div>\n    // ), [ handleTreeItemClick, handleLabelClick, renderTree ]);\n    \n    const flattenTree = useCallback(\n        (treeItems: ITreeItemType[], result: ITreeItemType[]) => {\n            treeItems.forEach(({ children, ...rest }) => {\n                result.push(rest);\n\n                if (!isNil(children)) {\n                    flattenTree(children, result);\n                }\n            });\n\n            return result;\n        },\n        [],\n    );\n\n    const getParents = useCallback(\n        (result: string[], allItems: ITreeItemType[], searchId?: string) => {\n            if (isNil(searchId)) {\n                return result;\n            }\n\n            const node = allItems.find(({ id }) => id.toString() === searchId);\n\n            if (isNil(node)) {\n                return result;\n            }\n\n            if (node.id.toString() === searchId) {\n                result.push(searchId);\n            }\n\n            getParents(result, allItems, node.parentId?.toString());\n\n            return result;\n        },\n        [],\n    );\n\n    const categoriesFlat = useMemo(\n        () => flattenTree(categories, []),\n        [ categories, flattenTree ],\n    );\n\n    const defaultExpanded = useMemo(\n        () => getParents([], categoriesFlat, defaultSelected),\n        [ defaultSelected, categoriesFlat, getParents ],\n    );\n\n    const handleTreeLabelClick = useCallback((node: ITreeItemType) => {\n        const filter = possibleFilters.find(({ value }) => value.toString() === node.id.toString());\n        const category = categoriesFlat.find(({ id }) => id.toString() === node.id.toString());\n\n        if (isNil(filter)) {\n            return;\n        }\n\n        onCategoryClick(filter);\n        updateBreadcrumb(category, categoriesFlat);\n    }, [ possibleFilters, categoriesFlat, onCategoryClick, updateBreadcrumb ]);\n    \n    const renderCategories = useCallback(\n        () => {\n            const category =categories.map(c=>\n                <TreeView className={styles.categoriesTree}>\n                    <div className={styles.tooltip}>\n                        <span className={styles.tooltipElement}>{c.name}</span>\n                    </div>\n                    <span className={styles.treeElement}>\n                        {c.name}\n                    </span>\n                </TreeView>);\n            \n          \n        },\n        [ categories ],\n    );\n\n    return (\n        <div className={className as string}>\n            <Heading\n              type={HeadingType.small}\n              className={styles.heading}\n            >\n                Category\n            </Heading>\n            <Tree\n              items={categories}\n              itemFunc={renderCategories()}\n              onTreeLabelClick={handleTreeLabelClick}\n              defaultSelected={defaultSelected}\n              defaultExpanded={defaultExpanded}\n            />\n        </div>\n    );\n};\n\nexport default ContestCategories;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { MdChevronRight, MdExpandMore } from 'react-icons/md';\nimport { isArray, isEmpty, isNil } from 'lodash';\nimport defaultKeyFunc from '../../common/colcollection-key-utils';\nimport { IContestCategoryTreeType } from '../../../common/types';\n\ninterface ITreeItemType {\n    id: string,\n    name: string,\n    parentId?: string,\n    children?: ITreeItemType[],\n}\n\ninterface ITreeProps<TValue> {\n    items: ITreeItemType[];\n    itemFunc: (value: IContestCategoryTreeType) => React.ReactElement;\n    keyFunc?: (value: TValue) => string,\n    onTreeLabelClick: (node: ITreeItemType) => void;\n    defaultSelected?: string;\n    defaultExpanded?: string[];\n}\n\nconst Tree = <TValue extends unknown>({\n    items,\n    itemFunc,\n    keyFunc = defaultKeyFunc,\n    onTreeLabelClick,\n    defaultSelected,\n    defaultExpanded = [],\n}: ITreeProps<TValue>) => {\n    const [ expanded, setExpanded ] = useState([] as string[]);\n    const [ selected, setSelected ] = useState('');\n\n    const handleTreeItemClick = useCallback(\n        (node: ITreeItemType) => {\n            const id = node.id.toString();\n            let newExpanded = Array.from(expanded);\n\n            if (expanded.includes(id)) {\n                newExpanded = newExpanded.filter((e) => e !== id);\n            } else {\n                newExpanded.push(id);\n            }\n\n            setExpanded(newExpanded);\n        },\n        [ expanded, setExpanded ],\n    );\n\n    const handleLabelClick = useCallback(\n        (node: ITreeItemType) => {\n            setSelected(node.id.toString());\n\n            onTreeLabelClick(node);\n        },\n        [ onTreeLabelClick ],\n    );\n\n    useEffect(\n        () => {\n            if (isEmpty(selected) && defaultSelected) {\n                setSelected(defaultSelected);\n            }\n        },\n        [ defaultSelected, selected ],\n    );\n\n    useEffect(\n        () => {\n            if (isEmpty(expanded) && !isEmpty(defaultExpanded)) {\n                setExpanded(defaultExpanded);\n            }\n        },\n        [ defaultExpanded, expanded ],\n    );\n\n    const renderTree1 = useCallback((node: ITreeItemType) => (\n        <TreeItem\n            key={node.id}\n            nodeId={node.id.toString()}\n            label={node.name}\n            onClick={() => handleTreeItemClick(node)}\n            onLabelClick={() => handleLabelClick(node)}\n        >\n            {isArray(node.children)\n                ? node.children.map((child) => renderTree(child))\n                : null}\n        </TreeItem>\n    ), [ handleLabelClick, handleTreeItemClick ]);\n\n    // const renderTree = useCallback((node: ITreeItemType) => (\n    //     <div className={categoriesTreeClassName}>\n    //         <div className={treeTooltipClassName}>\n    //             <div className={treeTooltipElementClassName}\n    //                  key={node.id}>\n    //                 {node.name}\n    //             </div>\n    //         </div>\n    //         <TreeItem\n    //             key={node.id}\n    //             className={treeElementClassName}\n    //             nodeId={node.id.toString()}\n    //             label={node.name}\n    //             onClick={() => handleTreeItemClick(node)}\n    //             onLabelClick={() => handleLabelClick(node)}\n    //         >\n    //             {isArray(node.children)\n    //                 ? node.children.map((child) => renderTree(child))\n    //                 : null}\n    //         </TreeItem>\n    //     </div>\n    // ), [ categoriesTreeClassName, treeTooltipClassName, treeTooltipElementClassName,\n    //     treeElementClassName, handleTreeItemClick, handleLabelClick, renderTree ]);\n\n    const renderTree = useCallback((node: ITreeItemType) => (\n        <TreeItem key={keyFunc(node as TValue)}\n                  nodeId={node.id}\n                  label={node.name}\n                  onClick={() => handleTreeItemClick(node)}\n                  onLabelClick={() => handleLabelClick(node)}\n        >\n            {itemFunc(node as IContestCategoryTreeType)}\n            {isArray(node.children)\n                ? node.children.map((child) => renderTree(child))\n                : null}\n        </TreeItem>\n\n    ), [ handleLabelClick, handleTreeItemClick, itemFunc, keyFunc ]);\n\n    const renderTreeView = (treeItems: ITreeItemType[]) => treeItems.map((c) => renderTree(c));\n\n    return (\n        <TreeView\n            aria-label=\"rich object\"\n            defaultCollapseIcon={<MdExpandMore/>}\n            defaultExpandIcon={<MdChevronRight/>}\n            selected={selected}\n            expanded={expanded}\n        >\n            {/* <div className={treeTooltipClassName}> {renderTreeView(items)}</div> */}\n            {renderTreeView(items)}\n        </TreeView>\n    );\n};\n\nexport default Tree;\n\nexport type {\n    ITreeItemType,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;AASA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AADA;AAWA;AAIA;AACA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AA/HA;AAKA;;;AALA;AAgIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnJA;AACA;AACA;AACA;AACA;;;AAmBA;AAOA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAIA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAQA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AADA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AAQA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AA1HA;AACA;AADA;AA2HA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}