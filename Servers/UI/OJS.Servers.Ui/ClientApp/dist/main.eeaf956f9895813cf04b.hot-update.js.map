{"version":3,"file":"main.eeaf956f9895813cf04b.hot-update.js","sources":["C:/Users/User/Desktop/OpenJudgeSystem/Servers/UI/OJS.Servers.Ui/ClientApp/src/components/contests/contest/Contest.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\r\nimport Heading, { HeadingType } from '../../guidelines/headings/Heading';\r\nimport Text, { TextType } from '../../guidelines/text/Text';\r\nimport Countdown, { ICountdownRemainingType, Metric } from '../../guidelines/countdown/Countdown';\r\n\r\nimport ContestTasksNavigation from '../contest-tasks-navigation/ContestTasksNavigation';\r\nimport SubmissionBox from '../submission-box/SubmissionBox';\r\nimport ContestProblemDetails from '../contest-problem-details/ContestProblemDetails';\r\n\r\nimport concatClassNames from '../../../utils/class-names';\r\n\r\nimport { convertToSecondsRemaining, convertToTwoDigitValues } from '../../../utils/dates';\r\nimport { useCurrentContest } from '../../../hooks/use-current-contest';\r\n\r\nimport styles from './Contest.module.scss';\r\n\r\nconst Contest = () => {\r\n    const {\r\n        state: {\r\n            contest,\r\n            score,\r\n            maxScore,\r\n            remainingTimeInMilliseconds,\r\n        },\r\n    } = useCurrentContest();\r\n\r\n    const navigationContestClass = 'navigationContest';\r\n    const navigationContestClassName = concatClassNames(navigationContestClass);\r\n\r\n    const submissionBoxClass = 'submissionBox';\r\n    const submissionBoxClassName = concatClassNames(submissionBoxClass);\r\n\r\n    const problemInfoClass = 'problemInfo';\r\n    const problemInfoClassName = concatClassNames(problemInfoClass);\r\n\r\n    const scoreText = useMemo(\r\n        () => `${score}/${maxScore}`,\r\n        [ maxScore, score ],\r\n    );\r\n\r\n    const scoreClassName = 'score';\r\n    const renderScore = useCallback(\r\n        () => {\r\n            if (scoreText === '0/0') {\r\n                return null;\r\n            }\r\n\r\n            return (\r\n                <p className={scoreClassName}>\r\n                    Score:\r\n                    {' '}\r\n                    <Text type={TextType.Bold}>\r\n                        {scoreText}\r\n                    </Text>\r\n                </p>\r\n            );\r\n        },\r\n        [ scoreText ],\r\n    );\r\n\r\n    const remainingTimeClassName = 'remainingTime';\r\n    const renderCountdown = useCallback(\r\n        (remainingTime: ICountdownRemainingType) => {\r\n            const { hours, minutes, seconds } = convertToTwoDigitValues(remainingTime);\r\n\r\n            return (\r\n                <>\r\n                    <p className={remainingTimeClassName}>\r\n                        Remaining time:\r\n                        {' '}\r\n                        <Text type={TextType.Bold}>\r\n                            {hours}\r\n                            :\r\n                            {minutes}\r\n                            :\r\n                            {seconds}\r\n                        </Text>\r\n                    </p>\r\n                </>\r\n            );\r\n        },\r\n        [],\r\n    );\r\n\r\n    const renderTimeRemaining = useCallback(\r\n        () => {\r\n            if (!remainingTimeInMilliseconds) {\r\n                return null;\r\n            }\r\n\r\n            const duration = convertToSecondsRemaining(new Date(remainingTimeInMilliseconds));\r\n\r\n            return (\r\n                <Countdown renderRemainingTime={renderCountdown} duration={duration} metric={Metric.seconds} />\r\n            );\r\n        },\r\n        [ remainingTimeInMilliseconds , renderCountdown ],\r\n    );\r\n\r\n    const secondaryHeadingClassName = useMemo(\r\n        () => concatClassNames(styles.contestHeading, styles.contestInfoContainer),\r\n        [],\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.headingContest}>\r\n                <Heading\r\n                  type={HeadingType.primary}\r\n                  className={styles.contestHeading}\r\n                >\r\n                    {contest?.name}\r\n                </Heading>\r\n                <Heading type={HeadingType.secondary} className={secondaryHeadingClassName}>\r\n                    {renderTimeRemaining()}\r\n                    {renderScore()}\r\n                </Heading>\r\n            </div>\r\n\r\n            <div className={styles.contestWrapper}>\r\n                <div className={navigationContestClassName}>\r\n                    <ContestTasksNavigation />\r\n                </div>\r\n                <div className={submissionBoxClassName}>\r\n                    <SubmissionBox />\r\n                </div>\r\n                <div className={problemInfoClassName}>\r\n                    <ContestProblemDetails />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Contest;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAQA;AAIA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AADA;AAcA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAdA;AA2BA;AACA;AArHA;AAQA;;;AARA;AAsHA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}