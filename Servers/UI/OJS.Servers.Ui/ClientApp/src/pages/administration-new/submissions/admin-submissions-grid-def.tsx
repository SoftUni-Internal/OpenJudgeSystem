import React from 'react';
import { Link } from 'react-router-dom';
import EditIcon from '@mui/icons-material/Edit';
import ShortcutIcon from '@mui/icons-material/Shortcut';
import { IconButton } from '@mui/material';
import { GridColDef, GridRenderCellParams } from '@mui/x-data-grid';

import ContestDeleteButton from '../../../components/administration/Contests/delete/ContestDeleteButton';

const dataColumns: GridColDef[] = [
    {
        field: 'id',
        headerName: 'Id',
        type: 'number',
        width: 10,
        filterable: true,
        sortable: true,
        valueFormatter: (params) => params.value.toString(),
    },
    {
        field: 'isCompiledSuccessfully',
        headerName: 'Is Compiled Successfully',
        align: 'center',
        type: 'boolean',
        width: 200,
        filterable: true,
        sortable: false,
    },
    {
        field: 'processed',
        headerName: 'Processed',
        align: 'center',
        type: 'boolean',
        width: 100,
        filterable: true,
        sortable: false,
    },
    {
        field: 'isDeleted',
        headerName: 'Is Deleted',
        align: 'center',
        type: 'boolean',
        filterable: true,
        sortable: false,
    },
    {
        field: 'processingComment',
        headerName: 'Processing Comment',
        align: 'center',
        width: 200,
        type: 'string',
        filterable: true,
        sortable: false,
    },
    {
        field: 'problemId',
        headerName: 'Problem Id',
        type: 'number',
        filterable: true,
        sortable: true,
        valueGetter: (params) => params.row?.problem?.id,
    },
    {
        field: 'problem',
        headerName: 'Problem',
        type: 'string',
        width: 200,
        filterable: true,
        sortable: true,
        valueGetter: (params) => params.row?.problem?.name,
    },
    {
        field: 'points',
        headerName: 'Points',
        align: 'center',
        type: 'number',
        filterable: true,
        sortable: true,
    },
    {
        field: 'participant',
        headerName: 'Participant',
        align: 'center',
        type: 'string',
        filterable: true,
        sortable: false,
        valueGetter: (params) => params.row?.participant?.userName,
    },
    {
        field: 'submissionType',
        headerName: 'Submission Type',
        align: 'center',
        type: 'string',
        width: 200,
        filterable: true,
        sortable: true,
        valueGetter: (params) => params.row?.submissionType?.name,
    },
    {
        field: 'createdOn',
        headerName: 'Created On',
        align: 'center',
        type: 'dateTime',
        width: 200,
        filterable: true,
        sortable: true,
        valueGetter: (params) => params.row?.createdOn,
    },
    {
        field: 'modifiedOn',
        headerName: 'Modified On',
        align: 'center',
        type: 'dateTime',
        width: 200,
        filterable: true,
        sortable: true,
        valueGetter: (params) => params.row?.modifiedOn,
    },
    {
        field: 'startedExecutionOn',
        headerName: 'Started Execution On',
        align: 'center',
        type: 'dateTime',
        width: 200,
        filterable: true,
        sortable: true,
        valueGetter: (params) => params.row?.startedExecutionOn,
    },
    {
        field: 'completedExecutionOn',
        headerName: 'Completed Execution On',
        align: 'center',
        type: 'dateTime',
        width: 200,
        filterable: true,
        sortable: true,
        valueGetter: (params) => params.row?.completedExecutionOn,
    },
];

export default dataColumns;
